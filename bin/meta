#!/bin/bash

#----------------------------------------------------------
# PARAM FOR META
# action(L1).action(L2):target{param}
#----------------------------------------------------------
# get.chain:$databox
# get.progress:$import_session
# get.num:$databox
# get.databox
# get.server
# get.attr:$user{$attribute_key}
# get.attr:${app}/${user}{$attribute_key}
# get.key:$databox{primary}
# get.key:$databox{all}
# get.key:$databox{$label}
# get.pdls:$databox{filter_word}
# get.label:$databox{primary}
# get.label:$databox{all}
# get.header:$databox{csv}
# get.header:$databox{json}
# get.tag:$databox
# get.tag:$app{$databox}
# get.command
# get.statistics:ls{html_tag}
# get.statistics:ls.$filter_word,$filter_word2{html_tag}
# get.statistics:$statistics{graph}
# get.statistics:$statistics{raw_data}
# get.shared_pass:$app
# get.users
# get.users:$app
# get.link:$app
# chk.form:$databox
# chk.null:$databox{id}
#----------------------------------------------------------

# global conf load
SCRIPT_DIR=$(dirname $0)
 . ${SCRIPT_DIR}/../global.conf

# load param
param=$1

if [[ $param == get.chain:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  databox=$(echo "$param" |  $AWK -F":" '{print $2}')
fi

if [[ $param == get.progress:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  import_session=$(echo "$param" |  $AWK -F":" '{print $2}')
fi

if [[ $param == get.num:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  databox=$(echo "$param" |  $AWK -F":" '{print $2}')
fi

if [[ $param == get.databox ]]; then
  action=$param
fi

if [[ $param == get.server ]]; then
  action=$param
fi

if [[ $param == get.attr:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  user=$(echo "$param" |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $1}')

  if [[ $user == */* ]]; then
    app=$(echo "$user" | $AWK -F "/" '{print $1}')
    user=$(echo "$user" | $AWK -F "/" '{print $2}')
  fi

  attr_key=$(echo "$param" |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $2}' | $SED "s/}//g")
fi

if [[ $param == get.key:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  databox=$(echo "$param" |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $1}')
  key=$(echo "$param" |  $AWK -F":" '{print $2}' | cut -f 2- -d "{" | $SED "s/{%%space}/ /g" | $SED "s/}//g")
fi

if [[ $param == get.pdls:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  databox=$(echo "$param" |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $1}')
  filter=$(echo "$param" |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $2}' | $SED "s/}//g")
fi

if [[ $param == get.label:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  databox=$(echo "$param" |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $1}')
  label=$(echo "$param" |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $2}' | $SED "s/}//g")
fi

if [[ $param == get.header:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  databox=$(echo "$param" |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $1}')
  type=$(echo "$param" |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $2}' | $SED "s/}//g")
fi

if [[ $param == get.tag:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  target=$(echo "$param" |  $AWK -F":" '{print $2}')
  if [[ $target == *{*} ]]; then
    app=$(echo "$target" | $AWK -F"{" '{print $1}')
    databox=$(echo "$target" |  $AWK -F"{" '{print $2}' | $SED "s/}//g")
  else
   databox=$target
  fi
fi

if [[ $param == get.command ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
fi

if [[ $param == get.statistics:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  target=$(echo "$param" |  $AWK -F":" '{print $2}')
fi

if [[ $param == get.shared_pass:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  app=$(echo "$param" |  $AWK -F":" '{print $2}')
fi

if [[ $param == get.users ]]; then
  action=$param
fi

if [[ $param == get.users:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  app=$(echo "$param" |  $AWK -F":" '{print $2}')
fi

if [[ $param == get.link:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  app=$(echo "$param" |  $AWK -F":" '{print $2}')
fi

if [[ $param == chk.form:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  databox=$(echo "$param" |  $AWK -F":" '{print $2}')
fi

if [[ $param == chk.null:* ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
  databox=$(echo "$param" |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $1}')
  id=$(echo "$param" |  $AWK -F":" '{print $2}' | cut -f 2- -d "{" | $SED "s/}//g")
fi

if [[ $param == get.rand ]]; then
  action=$(echo "$param" | $AWK -F":" '{print $1}')
fi

# return meta data

if [ "$action" = "get.chain" ];then

  if [ -f ${ROOT}/databox/${databox}/hashchain ];then
    cat ${ROOT}/databox/${databox}/hashchain
  else
    echo "error: there is no hash chain so far"
    exit 1
  fi 

fi

if [ "$action" = "get.progress" ];then

  if [ -f ${ROOT}/tmp/log/${import_session}.log ];then
    cat ${ROOT}/tmp/log/${import_session}.log
  else
    echo "error: there is no session log"
    exit 1
  fi 

fi

if [ "$action" = "get.num" ];then
  num_of_data=$(cat ${ROOT}/databox/${databox}/index | wc -l | tr -d " ")
  echo "$num_of_data"
fi

if [ "$action" = "get.databox" ];then
  databox_list=$(ls ${ROOT}/databox | xargs basename -a  2>/dev/null | $SED -z "s/\n/ /g")
  echo "$databox_list"
fi

if [ "$action" = "get.server" ];then
  server=$(cat ${ROOT}/web/base | grep ^server= | $AWK -F "=" '{print $2}' | $SED "s/\"//g")
  if [ "$server" ];then
    echo "$server"
  else
    echo "warn: web server is not defined"
  fi
fi

if [ "$action" = "get.attr" ];then 
  user_id=$(echo ${user} |  $SHASUM | $AWK '{print $1}')
  if [ ! "${attr_key}" ];then
    attr_key=permission
  fi

  if [ ! "$app" ];then
    attr_param=$(grep "^${attr_key}=" ${ROOT}/users/${user_id}/attr 2>/dev/null | $AWK -F "=" '{print $2}')
  else
    attr_param=$(grep "^${attr_key}=" ${ROOT}/users/${app}.${user_id}/attr 2>/dev/null | $AWK -F "=" '{print $2}')
  fi
  echo "$attr_param"
  exit 0
fi


if [ "$action" = "get.key" ];then 
  if [ "$key" = "primary" ];then
    primary_key=$(cat ${ROOT}/databox/${databox}/def/col1 | grep name= | $AWK -F "=" '{print $2}' | $SED "s/\"//g" ) 
    echo "$primary_key"
    exit 0

  elif [ "$key" = "all" ];then
    keys=$(grep "^name=" ${ROOT}/databox/${databox}/def/col*  | sort -V |  $AWK -F"=" '{print $2}' | $SED "s/\"//g" \
    | $SED "s/ //g" | $SED -z "s/\n/ /g")
    echo "$keys"
    exit 0

  else
    label="$key"
    col=$(grep -l "^label=\"${label}\"" ${ROOT}/databox/${databox}/def/col* | xargs basename -a 2>/dev/null)
    if [ "$col" ];then
      . ${ROOT}/databox/${databox}/def/${col}
      echo "$name"
      exit 0 
    fi
  fi
fi

if [ "$action" = "get.pdls" ];then 

  label=$(cat ${ROOT}/databox/${databox}/def/col1 | grep label=  | $AWK -F"=" '{print $2}' | $SED "s/\"//g")
  name=$(cat ${ROOT}/databox/${databox}/def/col1 | grep name=  | $AWK -F"=" '{print $2}' | $SED "s/\"//g")

  if [ "$filter" ];then
    primary_key_values=$(cat ${ROOT}/databox/${databox}/index | grep $filter | $AWK -F "::::::" '{print $3}' | $AWK -F "," '{print $1}') 
  else
    primary_key_values=$(cat ${ROOT}/databox/${databox}/index | $AWK -F "::::::" '{print $3}' | $AWK -F "," '{print $1}') 
  fi

  echo "<li>"
  echo "<label>$label</label>"
  echo "<input type=\"text\" name=\"$name\" value=\"\" autocomplete=\"off\" list=\"pdls\">"
  echo "<datalist id=\"pdls\">"
  echo "$primary_key_values" | $SED "s/^/<option value=\"/g" | $SED "s/$/\">/g" \
  | $SED "s/{%%%%%%%%%%%%%}/#/g"\
  | $SED "s/{%%%%%%%%%%%%}/|/g"\
  | $SED "s/{%%%%%%%%%%%}/\]/g"\
  | $SED "s/{%%%%%%%%%%}/\[/g"\
  | $SED "s/{%%%%%%%%%}/)/g"\
  | $SED "s/{%%%%%%%%}/(/g"\
  | $SED "s/{%%%%%%%}/_/g"\
  | $SED "s/{%%%%%%}/,/g"\
  | $SED "s/{%%%%%}/\//g"\
  | $SED "s/{%%%%}/\&/g"\
  | $SED "s/{%%%}/:/g"
  echo "</dataliset>"
  echo "</li>"
  exit 0
fi

if [ "$action" = "get.label" ];then 

  if [ "$label" = "all" ];then
    labels=$(grep "^label=" ${ROOT}/databox/${databox}/def/col*  | sort -V |  $AWK -F"=" '{print $2}' | $SED "s/\"//g" \
    | $SED -z "s/\n/,/g" | $SED "s/,$//g")
    echo "$labels"
    exit 0
  fi

  if [ "$label" = "primary" ];then 
    label=""
    key=primary
    label=$(grep "^label=" ${ROOT}/databox/${databox}/def/col1 |  $AWK -F"=" '{print $2}' | $SED "s/\"//g")
    echo "$label"
    exit 0
  fi
fi

if [ "$action" = "get.header" ];then 

  if [ "$type" = "csv" ];then
    header=$(grep "^name=" ${ROOT}/databox/${databox}/def/col*  | sort -V |  $AWK -F"=" '{print $2}' | $SED "s/\"//g" \
    | $SED "s/ //g" | $SED -z "s/\n/,/g" | $SED "s/,$//")
    echo "$header"
  fi 

  if [ "$type" = "json" ];then
    header=$(grep "^name=" ${ROOT}/databox/${databox}/def/col*  | sort -V |  $AWK -F"=" '{print $2}' | $SED "s/\"//g" \
    | $SED "s/ //g" | $SED -z "s/\n/,/g" | $SED "s/,$//")
    
    JQ_EXE="echo \$header | $JQ -R 'split(\",\") | {"
    count=0
    for col in $(ls ${ROOT}/databox/${databox}/def/col* 2>/dev/null | sort -V | xargs basename -a 2>/dev/null)
    do
      if [ $count -eq 0 ];then
        JQ_EXE="${JQ_EXE}\"$col\": .[$count]"
      else
        JQ_EXE="${JQ_EXE}, \"$col\": .[$count]"
      fi
      ((count += 1))
    done
    JQ_EXE="${JQ_EXE}}'"
    eval $JQ_EXE
  fi 

fi

if [ "$action" = "get.tag" ];then
  if [ ! "$app" ];then
    ls ${ROOT}/tmp/tag/${databox}/* >/dev/null 2>&1
    if [ $? -eq 0 ];then
      cat ${ROOT}/tmp/tag/${databox}/*
      exit 0
    fi
  else
    ls ${ROOT}/tmp/tag/${app}.${databox}/* >/dev/null 2>&1
    if [ $? -eq 0 ];then
      cat ${ROOT}/tmp/tag/${app}.${databox}/*
      exit 0
    fi
  fi
fi

if [ "$action" = "get.command" ];then
  grep "^ALLOWED_COMMANDS=\"*\"" ${ROOT}/bin/DATA_shell | $AWK -F "=" '{print $2}' | $SED "s/\"//g" | $SED "s/,/ /g"
fi

if [ "$action" = "get.statistics" ];then
  target=$(echo "$target" | $SED "s/{%%%%%%%}/_/g" )

  if [[ $target == ls* ]]; then
    format=$(echo "$target" | $AWK -F"{" '{print $2}' | $SED "s/}//g")
    target=$(echo "$target" | $AWK -F "{" '{print $1}')

    if [ ! "$format" ];then
      format=none
    fi

    if [ "$target" = ls ];then
      list=$(ls ${ROOT}/util/statistics/rawdata | xargs basename -a 2>/dev/null)
      for rawdata in $list
      do
        if [ "$format" = "none" ];then
          echo "- $rawdata :rawdata" | $SED "s/.csv//g"
          graph=$(echo "$rawdata" | $SED "s/.csv/.png/g")
          if [ -f ${ROOT}/util/statistics/graph/${graph} ];then
            echo "+ $graph :graph" | $SED  "s/.png//g"
          fi
        fi

        if [ "$format" = "html_tag" ];then
          html_tag="<a style=\"cursor: pointer\" onclick=\"window.open('./base?%%params&req=stats&target=%%rawdata&type=rawdata',"
          html_tag="$html_tag 'statistics_viewer', 'width=820,height=280')\">%%rawdata :rawdata</a>"
          echo "$html_tag" | $SED "s/%%rawdata/${rawdata}/g" | $SED "s/.csv//g"

          graph=$(echo "$rawdata" | $SED "s/.csv/.png/g")
          if [ -f ${ROOT}/util/statistics/graph/${graph} ];then
            html_tag="<a style=\"cursor: pointer\" onclick=\"window.open('./base?%%params&req=stats&target=%%graph&type=graph',"
            html_tag="$html_tag 'statistics_viewer', 'width=1200,height=820')\">%%graph :graph</a>"
            echo "$html_tag" | $SED "s/%%graph/${graph}/g" | $SED "s/.png//g"
          fi
        fi
      done

    else
    #else means ls with filters

      filters=$(echo "$target" | $AWK -F "ls." '{print $2}' \
      | $SED "s/^/grep /g" | $SED "s/,/ | grep /g")

      if [ ! "$format" ];then
        format=none
      fi

      target=$(echo "$target" | $AWK -F "{" '{print $1}')

      list="ls ${ROOT}/util/statistics/rawdata | $filters | xargs basename -a 2>/dev/null"
      list=$(eval $list)
     
      for rawdata in $list
      do
        if [ "$format" = "none" ];then
          echo "- $rawdata :rawdata" | $SED "s/.csv//g"
          graph=$(echo "$rawdata" | $SED "s/.csv/.png/g")
          if [ -f ${ROOT}/util/statistics/graph/${graph} ];then
            echo "+ $graph :graph" | $SED  "s/.png//g"
          fi
        fi

        if [ "$format" = "html_tag" ];then
          html_tag="<a style=\"cursor: pointer\" onclick=\"window.open('./base?%%params&req=stats&target=%%rawdata&type=rawdata',"
          html_tag="$html_tag 'statistics_viewer', 'width=820,height=280')\">%%rawdata :rawdata</a>"
          echo "$html_tag" | $SED "s/%%rawdata/${rawdata}/g" | $SED "s/.csv//g"

          graph=$(echo "$rawdata" | $SED "s/.csv/.png/g")
          if [ -f ${ROOT}/util/statistics/graph/${graph} ];then
            html_tag="<a style=\"cursor: pointer\" onclick=\"window.open('./base?%%params&req=stats&target=%%graph&type=graph',"
            html_tag="$html_tag 'statistics_viewer', 'width=1200,height=820')\">%%graph :graph</a>"
            echo "$html_tag" | $SED "s/%%graph/${graph}/g" | $SED "s/.png//g"
          fi
        fi
      done
    fi

  else 
  # else means target is specific file

    rawdata_chk=$(echo "$target" | grep {rawdata})
    if [ "$rawdata_chk" ];then
      target=$(echo ${ROOT}/util/statistics/rawdata/${target} | $SED "s/{rawdata}/.csv/g")
      if [ -f $target ];then
        cat $target
      else
        echo "$target is not existing"
        exit 1
      fi
    fi

    graph_chk=$(echo "$target" | grep {graph})
    if [ "$graph_chk" ];then
      target=$(echo ${ROOT}/util/statistics/graph/${target} | $SED "s/{graph}/.png/g")
      if [ -f $target ];then
        dd if=$target 2>/dev/null
      else
        echo "$target is not existing"
        exit 1
      fi
    fi

  fi
fi

if [ "$action" = "get.shared_pass" ];then
  if [ -f ${ROOT}/web/${app}.code ];then
    cat ${ROOT}/web/${app}.code
  else
    echo "error: there is no shared pass code of $app"
  fi
fi

if [ "$action" = "get.users" ];then

  if [ "$app" ];then
    users=$(ls -d ${ROOT}/users/${app}.* 2>/dev/null | xargs basename -a 2>/dev/null)
  else
    users=$(ls -d ${ROOT}/users/* 2>/dev/null | $SED "s/\./%%/g" | grep -v %% | xargs basename -a 2>/dev/null)
  fi

  if [ "$users"  ];then
    for id in $users
    do
      echo "$(cat ${ROOT}/users/${id}/user_name)"
    done
  else
    echo "error: there is no user@${app}"
  fi

fi

if [ "$action" = "get.link" ];then

  # load base
  if [ ! -f ${ROOT}/web/base ];then
    echo "please generate base APP first"
    exit 1
  else
    . ${ROOT}/web/base
  fi


  if [ ! -f ${cgi_dir}/${app} ];then

    subapp=$(echo "$app" | $AWK -F "@" '{print $1}')
    parent_app=$(echo "$app" | $AWK -F "@" '{print $2}')

    if [ ! "$parent_app" ];then

      echo "There is no APP $app, if it's subapp, please describe it as \$subapp@\$parent please try again"
      exit 1

    else

      # redner subapp link
      echo "APP:$app"
      echo "Table: <a href=\"./${parent_app}?%%session&subapp=${subapp}&req=table\">link</a>"
      echo "DATA.new: <a href=\"./${parent_app}?%%session&subapp=${subapp}&req=get&id=new\">link</a>"
      echo "DATA.\$id: <a href=\"./${parent_app}?%%session&subapp=${subapp}&req=get&id=\${id}\">link</a>"

    fi

  else
    # render links
    echo "APP:$app"
    echo "Table: <a href=\"./${app}?%%session&req=table\">link</a>"
    echo "DATA.new: <a href=\"./${app}?%%session&req=get&id=new\">link</a>"
    echo "DATA.\$id: <a href=\"./${app}?%%session&req=get&id=\${id}\">link</a>"
  fi

fi

if [ "$action" = "chk.form" ];then
  data_type_chk=$(grep "type=\"file\"" ${ROOT}/databox/${databox}/def/col*)

  if [ "$data_type_chk" ];then
    echo "multipart"
  else
    echo "urlenc"
  fi

fi

if [ "$action" = "chk.null" ];then
  for col in $(ls ${ROOT}/databox/${databox}/def)
  do
    #load type
    . ${ROOT}/databox/${databox}/def/${col}
    if [ "$type" = "file" ];then
      ls ${ROOT}/databox/${databox}/file/${id} >/dev/null 2>&1
      if [ $? -eq 0 ];then
        echo "$name:1"
      else
        echo "$name:0"
      fi
    else
      if [ ! -f ${ROOT}/databox/${databox}/data/${id}/${name} ];then 
        echo "$name:0" 
      else
        value=$(cat ${ROOT}/databox/${databox}/data/${id}/${name} 2>/dev/null | $SED -z "s/\n//g")
        if [ ! "$value" ];then 
          echo "$name:0"
        else
          echo "$name:1"
        fi
      fi
    fi
  done
fi

if [ "$action" = "get.rand" ];then
  cat ${ROOT}/web/.rand | $SED "s/rand=//g"
fi

if [ ! "$action" ];then
echo "#------------------------------------------------------
# PARAM FOR META
# action(L1).action(L2):target{param}
#----------------------------------------------------------
# get.chain:\$databox
# get.progress:\$import_session
# get.num:\$databox
# get.databox
# get.server
# get.attr:\$user{\$attribute_key}
# get.attr:\${app}/\$user{\$attribute_key}
# get.key:\$databox{primary}
# get.key:\$databox{all}
# get.key:\$databox{\$label}
# get.pdls:\$databox{filter_word}
# get.label:\$databox{all}
# get.header:\$databox{csv}
# get.header:\$databox{json}
# get.tag:\$databox
# get.tag:\$app{\$databox}
# get.command
# get.statistics:ls{html_tag}
# get.statistics:ls.\$filter_word,\$filter_word2{html_tag}
# get.statistics:\$statistics{graph}
# get.statistics:\$statistics{raw_data}
# get.shared_pass:\$app
# get.users
# get.users:\$app
# get.link:\$app
# chk.form:\$databox
# chk.null:\$databox{id}
#----------------------------------------------------------"
fi

exit 0
