{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Small-Shell \"Small-Shell\" is the WEB application generator that can generate open source WEB application and related functions such like DATA store, Job Automation instantly just using shell {bash}. you can customize your applications very easily once it's generated. because it's written in almost only shell including WEB application, it has very few dependencies and super lightweight. it's easy to learn & easy to use. try it and have a fun ! Generate APP You can generate APP and each function just using gen command. please see detail of each functions on \"Shell tour\". | <-> Batch CLI {e-cron} gen command ->>> SHELL APP | <-> WEB UI/API {APP shell} {CLI dialog} {DATA/JOB store} | <-> NoSQL CLI {DATA shell} | <-> Analytics {Pyshell} Project is focusing to democratize IT technology, it's removing sophisticated programing method such like Object Oriented Methodology. basically \"small-shell\" works through dialog or just line up basic unix commands. it can destructure complex concepts and difficulty of understanding of programing. Link to the CODE Features Fundamental features are here, each of them are pursueing to be very simple and lightweight. Common (destructured programing) |- Light (minimized codes), Flexible, Full openess |- Can be integrated with anything, Almost no dependency |- Easy to learn, Easy to use APP shell (WEB application framework) |- Generate WEB Application through dialog |- No cookie but utilize hash token as much as possible |- Use Flex box and Pure HTML |- Use Pure javascript |- Provide WEB API |- Base64 encrypted KEY authentication, No password any more |- Contain WEB srv that written by Node.js |- Markdown portal page for scratch APP DATA shell |- NoSQL but provide unix command based interface |- Provide destructured data store (DataBox) |- Utilize hash chain for data integrity e-cron |- Scheduleing and logging job by extending cron function |- Define & Enable job relationship with exteral hosts |- Provide Data exchange HUB API Best Practices \"small-shell\" is designed for working with Team and Edge Data management with Team Generate NoSQL & Flat DataBox in few STEPS Get & Push datas through Base WEB APP easily Analyze data with Unix commands and python libraries Create Form for external users in few STEPS Manage data and portal in single scratch APP Modify APPs with framework like a MVC model IoT & Edge computing Add jobs to cron through e-cron dialog very easily Manage automated job results adequately Manage automated Job relationship not only local job but also external hosts. Construct Data-exchange platform in few STEPS Educational purpose Use small-shell for understanding basic programing","title":"Home"},{"location":"#generate-app","text":"You can generate APP and each function just using gen command. please see detail of each functions on \"Shell tour\". | <-> Batch CLI {e-cron} gen command ->>> SHELL APP | <-> WEB UI/API {APP shell} {CLI dialog} {DATA/JOB store} | <-> NoSQL CLI {DATA shell} | <-> Analytics {Pyshell} Project is focusing to democratize IT technology, it's removing sophisticated programing method such like Object Oriented Methodology. basically \"small-shell\" works through dialog or just line up basic unix commands. it can destructure complex concepts and difficulty of understanding of programing.","title":"Generate APP"},{"location":"#link-to-the-code","text":"","title":"Link to the CODE"},{"location":"#features","text":"Fundamental features are here, each of them are pursueing to be very simple and lightweight. Common (destructured programing) |- Light (minimized codes), Flexible, Full openess |- Can be integrated with anything, Almost no dependency |- Easy to learn, Easy to use APP shell (WEB application framework) |- Generate WEB Application through dialog |- No cookie but utilize hash token as much as possible |- Use Flex box and Pure HTML |- Use Pure javascript |- Provide WEB API |- Base64 encrypted KEY authentication, No password any more |- Contain WEB srv that written by Node.js |- Markdown portal page for scratch APP DATA shell |- NoSQL but provide unix command based interface |- Provide destructured data store (DataBox) |- Utilize hash chain for data integrity e-cron |- Scheduleing and logging job by extending cron function |- Define & Enable job relationship with exteral hosts |- Provide Data exchange HUB API","title":"Features"},{"location":"#best-practices","text":"\"small-shell\" is designed for working with Team and Edge","title":"Best Practices"},{"location":"#data-management-with-team","text":"Generate NoSQL & Flat DataBox in few STEPS Get & Push datas through Base WEB APP easily Analyze data with Unix commands and python libraries Create Form for external users in few STEPS Manage data and portal in single scratch APP Modify APPs with framework like a MVC model","title":"Data management with Team"},{"location":"#iot-edge-computing","text":"Add jobs to cron through e-cron dialog very easily Manage automated job results adequately Manage automated Job relationship not only local job but also external hosts. Construct Data-exchange platform in few STEPS","title":"IoT &amp; Edge computing"},{"location":"#educational-purpose","text":"Use small-shell for understanding basic programing","title":"Educational purpose"},{"location":"app_shell_form/","text":"Create Form You can create dedicated Form very easily. sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 2 # Dialog will be started, You can define keys which will be inserted to the Form in the dialog. Seceinario This is an example of creating survey Form and analyzing result. Create DataBox for survey Create survey Form for end user Analyze survey result with graph Required Please setup Base APP beorehand refering to Base APP Create DataBox For the first step, need to create survey databox to push data through Form. sudo /usr/local/small-shell/adm/gen -databox Databox Name: survey.box Note For using Form, primary key of the databox must be \"hashid\". please set hashhid in the dialog as following. primary_key(col1): hashid Result of dialog Databox Name:survey.box #primary_key name=\"hashid\" label=\"#ID\" type=\"text\" option=\"required\" #key(col2) name=\"impression\" label=\"Impression of this product\" type=\"radio\" params=\"Good,Average,Bad\" option=\"required\" #key(col3) name=\"comment\" label=\"Comment\" type=\"textarea\" option=\"\" Generate Form Then let's create survey Form for end users sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 2 Form Name: survey Result of dialog. In this example, some keys of survey.box are excluded for end user Form and IP whitelisting is set as \"no\". If you set \"yes\" for IP whitelisting, please define IP list using ops command. IP whitelisting detail is on APP shell tour Form will be generated by following order, please check it. ----------------------------------------------------------------- APP Type: 2.FORM Form Name: survey Target Databox: survey.box Description: This is a internal survey of product A IP_whitelisting: no Included keys: impression,comment Access URL: https://ec2-XX-XX-XX-XX.compute.XXXX.com/survey ----------------------------------------------------------------- Access to the Form As you already checked, access URL is shown in the gen dialog. the URL must be $FQDN/$app e.g.) https://ec2-XX-XX-XX-XX.compute.XXXX.com/survey Check databox via Base APP Data will be pushed to the databox through the survey Form. admin can check survey results thorough Base APP. then you can analyze result on table view or console box. Make snapshot graph You can viruslize survey results to the graph. Note please setup pyshell env beforehand, see detail at pyshell example executed on Apr 3rd 2022 as snapshot. sudo -u small-shell /usr/local/small-shell/util/scripts/countup.sh databox:survey.box \\ key:impression filters:Good,Average,Bad type:pie title:2024-11-28_survey_result frequency:snapshot please input #stats to console box on Base APP. Base APP > Console Box [#stats] Change Form view You can modify html descriptor directly. sudo vi /var/www/descriptor/${Form}_get_new.html.def e.g.) sudo vi /var/www/descriptor/survey_get_new.html.def --code-- <html> <head> <meta charset=\"UTF-8\" /> <title>survey.new</title> <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"> <link rel=\"stylesheet\" href=\"./survey_css\"> </head> <body> <div class=\"container\"> <div class=\"form-box\"> <div class=\"description\"> <h1>#survey</h1> <p>This is a internal survey of product A</p> <hr> <br> </div> <form method=\"post\" action=\"./survey?req=set&id=%%id\" onclick=\"document.charset='utf-8';\"> <ul> %%dataset </ul> <button class=\"button\" type=\"submit\">SUBMIT</button> </form> </div> </div> </body> </html> ------- Change row size for textarea You can change row size by inserting code to ${Form}_new.html.def. e.g) sudo vi /var/www/descriptor/survey_new.html.def --code-- <script> document.getElementById(\"txtara\").rows=\"10\" </script> --------","title":"Create Form"},{"location":"app_shell_form/#create-form","text":"You can create dedicated Form very easily. sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 2 # Dialog will be started, You can define keys which will be inserted to the Form in the dialog.","title":"Create Form"},{"location":"app_shell_form/#seceinario","text":"This is an example of creating survey Form and analyzing result. Create DataBox for survey Create survey Form for end user Analyze survey result with graph","title":"Seceinario"},{"location":"app_shell_form/#required","text":"Please setup Base APP beorehand refering to Base APP","title":"Required"},{"location":"app_shell_form/#create-databox","text":"For the first step, need to create survey databox to push data through Form. sudo /usr/local/small-shell/adm/gen -databox Databox Name: survey.box Note For using Form, primary key of the databox must be \"hashid\". please set hashhid in the dialog as following. primary_key(col1): hashid","title":"Create DataBox"},{"location":"app_shell_form/#result-of-dialog","text":"Databox Name:survey.box #primary_key name=\"hashid\" label=\"#ID\" type=\"text\" option=\"required\" #key(col2) name=\"impression\" label=\"Impression of this product\" type=\"radio\" params=\"Good,Average,Bad\" option=\"required\" #key(col3) name=\"comment\" label=\"Comment\" type=\"textarea\" option=\"\"","title":"Result of dialog"},{"location":"app_shell_form/#generate-form","text":"Then let's create survey Form for end users sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 2 Form Name: survey","title":"Generate Form"},{"location":"app_shell_form/#result-of-dialog_1","text":"In this example, some keys of survey.box are excluded for end user Form and IP whitelisting is set as \"no\". If you set \"yes\" for IP whitelisting, please define IP list using ops command. IP whitelisting detail is on APP shell tour Form will be generated by following order, please check it. ----------------------------------------------------------------- APP Type: 2.FORM Form Name: survey Target Databox: survey.box Description: This is a internal survey of product A IP_whitelisting: no Included keys: impression,comment Access URL: https://ec2-XX-XX-XX-XX.compute.XXXX.com/survey -----------------------------------------------------------------","title":"Result of dialog."},{"location":"app_shell_form/#access-to-the-form","text":"As you already checked, access URL is shown in the gen dialog. the URL must be $FQDN/$app e.g.) https://ec2-XX-XX-XX-XX.compute.XXXX.com/survey","title":"Access to the Form"},{"location":"app_shell_form/#check-databox-via-base-app","text":"Data will be pushed to the databox through the survey Form. admin can check survey results thorough Base APP. then you can analyze result on table view or console box.","title":"Check databox via Base APP"},{"location":"app_shell_form/#make-snapshot-graph","text":"You can viruslize survey results to the graph. Note please setup pyshell env beforehand, see detail at pyshell","title":"Make snapshot graph"},{"location":"app_shell_form/#example-executed-on-apr-3rd-2022-as-snapshot","text":"sudo -u small-shell /usr/local/small-shell/util/scripts/countup.sh databox:survey.box \\ key:impression filters:Good,Average,Bad type:pie title:2024-11-28_survey_result frequency:snapshot please input #stats to console box on Base APP. Base APP > Console Box [#stats]","title":"example executed on Apr 3rd 2022 as snapshot."},{"location":"app_shell_form/#change-form-view","text":"You can modify html descriptor directly. sudo vi /var/www/descriptor/${Form}_get_new.html.def e.g.) sudo vi /var/www/descriptor/survey_get_new.html.def --code-- <html> <head> <meta charset=\"UTF-8\" /> <title>survey.new</title> <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"> <link rel=\"stylesheet\" href=\"./survey_css\"> </head> <body> <div class=\"container\"> <div class=\"form-box\"> <div class=\"description\"> <h1>#survey</h1> <p>This is a internal survey of product A</p> <hr> <br> </div> <form method=\"post\" action=\"./survey?req=set&id=%%id\" onclick=\"document.charset='utf-8';\"> <ul> %%dataset </ul> <button class=\"button\" type=\"submit\">SUBMIT</button> </form> </div> </div> </body> </html> -------","title":"Change Form view"},{"location":"app_shell_form/#change-row-size-for-textarea","text":"You can change row size by inserting code to ${Form}_new.html.def. e.g) sudo vi /var/www/descriptor/survey_new.html.def --code-- <script> document.getElementById(\"txtara\").rows=\"10\" </script> --------","title":"Change row size for textarea"},{"location":"app_shell_scratch/","text":"Create Scratch APP In this tour, you can learn how to make scratch APP and how to edit codes or portal page very quiickly. there are 4 types of Scratch APP as following chart. Type Auth View Data src Code Data Access Shared Pass APP Shared Pass Code Markdown portal,table,form,log specific databox editable Controllable per group Key APP Base64 Encrypted Key Markdown portal,table,form,log specific databox editable Controllable per user Other Any Markdown portal,table,form,log specific databox editable Customize everything No auth APP No Authentication Markdown portal,table,form specific databox editable Read only Required Please setup Base APP beorehand refering to Quick Start Common STEP Each types of scratch APP have common STEP for launching APP, difference is mainly authentication method. Generate DataBox for datastore #gen -databox Generate Scratch APP #gen -app Update portal with Markdown or HTML tag #on BaseAPP Add user #key APP, other Update action scripts #optional Add subAPP #connect additional databox if needed Let's create scratch APP by following above steps. Generate DataBox Please generate databox that will be used for Scratch APP. sudo /usr/local/small-shell/adm/gen -databox # -> dialog will be started Generate APP Let's start to generate scratch APP named as just test with base64 key authentiaction. by the way you can use any other name as app_name. In this sample, we would like to use the name just test but of course you can set any prefer name you want. sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 3 APP Name: test Type of Authentication (1.shared pass | 2.user key | 3.other | 4.none): 2 Primary databox: item.db Note If you don't need to use any databox, please input none or null as primary databox Update portal You can update portal by updating markdown description of $app.UI.md.def on Base APP or edit code directly please check cookbook . default portal image is here. Add user to the APP If you select Key APP, please add user for the APP. then you can get URL that can generate key for each end user. sudo /usr/local/small-shell/adm/ops app:$app add.usr:$usr e.g.) add \"test_user\" user for key APP name \"test\" sudo /usr/local/small-shell/adm/ops app:test add.usr:test_user -------------------------------------------------------------------- Key initializing & generating URL for test_user on test APP is here -------------------------------------------------------------------- https://ec2-XX-XX-XX-XX.us-west-2.compute.XXXX.com/cgi-bin/auth.test?initialize=cd5e7330e5fb92b4999f2a7801da7267c802c4109a7126be47d5049cd7d5c440,6bc0917d9510ae794ab5cb5d1e65834c09ad11fbd3d78db881a656c591d1604a Connect to the APP End user key that's generated above command will be stored to end user browser automatically using localstorage by javascript once connected to above url. And if you set \"yes\" for IP whitelisting for this APP in the dialog, you can set restricted IPs by using ops command. IP whitelisting detail is on APP shell tour Access URL of the APP If you are using default WEB server, your application URL must be $FQDN/$app except \"other\" type APP. URL will be shown in the dialog of gen command. e.g.) APP:test, URL:https://$FQDN/test Re-generate User key If end user lost their key, you can generate URL for re-generating key. sudo /usr/local/small-shell/adm/ops initialize.usr:test app:test Update Pass code If it's Shared Pass code APP, you can update pass code by updating file directly sudo vi /usr/local/small-shell/web/$app.code Update codes (optional) Then APP will be generated to directory that you already defined in Base APP dialog. you can update codes freely. As for small-shell framework please check MVC model Target codes # actionscripts $bin (/var/www/bin) # HTML descriptors $descriptor(/var/www/descriptor) Parameter change ($bin) In this example, accesible key of databox is changed. In the default permission, end user can access all keys of databox from the Scratch APP. e.g) restrict data keys sudo vi /var/www/bin/test_get.sh --code-- # Target databox and keys #keys=all keys=item_name,description -------- HTML descriptor ($descriptor) Draft design of HTML is already generated, and you could customize them freely. sudo vi /var/www/descriptor/test_main.html.def sudo vi /var/www/descriptor/test_table.html.def Use member list If you want to import user list on your APP Form. you can select \"mls\" as data type in the gen dialog of data box creation. mls can import user list of your scratch APP. following is just example. key(col2) name: assignee key(col2) label: Assignee data type (text | select | radio | checkbox | email | num | tel | date | date-time | url | textarea | file | pdls | mls): mls Tagging on Scratch APP You can add search tag to the table by ops command sudo /usr/local/small-shell/adm/ops add.tag:$databox{key{word}} app:$app_name e.g.) sudo /usr/local/small-shell/adm/ops add.tag:tasks{status{on-going}} app:tasks Change user permission User permission could be changed ops command with app option. # change to read only sudo /usr/local/small-shell/adm/ops set.attr:$user{ro} app:$app # change to read / write sudo /usr/local/small-shell/adm/ops set.attr:$user{rw} app:$app You can add any extension information to user attribute. following is exmaple to set attribute to ken as admin for management APP. # user=ken app=management sudo /usr/local/small-shell/adm/ops set.attr:ken{admin=yes} app:management # confirm permission sudo -u small-shell /usr/local/small-shell/bin/meta get.attr:management/ken{admin} >yes update descriptor If you delete or put of actionlink please update get.html.def directly # e.g ) add delete function to test APP # sudo vi /var/www/descriptor/sapp_get.html.def sudo vi /var/www/descriptor/test_get.html.def --code-- <div class=\"action_links\"> <span><p style=\"cursor: pointer\" onclick=\"window.open('./test?%%params&req=log_viewer&id=%%id', 'log_viewer', 'width=820,height=280')\">Show data update history</p></span> <span><p style=\"cursor: pointer\" onclick=\"del_confirmation()\">Delete</p></span> -------- Sub APP Basically scratch APP connect to only 1 databox. and Sub APP is the way to add databox to your scratch APP additionally. In this following exmapmle, databox:inventory.db subapp:inventory will be added to scratch APP that name is test. Note subAPP must be belong to parent APP, please define subapp as $subAPP_name@$parentAPP_name sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 3 APP Name: inventory@test Subapp databox: inventory.db Once subAPP deployed, please check routing and menu that will be updaated automatically. and you can freely modify them. # routing # sudo cat /var/www/cgi-bin/$parent_app sudo cat /var/www/cgi-bin/test # menu # cat /var/www/desciption/common_parts/$parent_app_common_menu cat /var/www/desciption/common_parts/test_common_menu Portal page link will be updated as well. please check on Base APP. Meta link You can generate links that can be used in the APP. please do not delete %%session in the link. then it will be replaced to a dynamic session and pin code. These links could be used in html descriptor of your APP and it can connect table of primary databox of your APP or it can connect action links such like new or get data in the APP. sudo -u small-shell /usr/local/small-shell/bin/meta get.link:$app for subapp sudo -u small-shell /usr/local/small-shell/bin/meta get.link:$subapp@$parent_app Import APP from template Creating APP template is sub project of small-shell. you can import APP template from git sub projects. Team APP This APP template could manage not only Team events, but also tasks, shared drive, bookmarks and inquiries as easy ticketing system. Team APP funcions Function type Description Calendar portal Manage team events in portal page Announcements sub-app Share announcement to the team Tasks sub-app Manage team tasks {assignment,status,deadline,sync_calendar} Inquiries sub-app Manage inquiryes from external users Drive sub-app Provide storage that have optional link to share file to external users Bookmarks sub-app Manage bookmarks Inquiry form Inquiry Form to the Team Link to code is here cd $HOME git clone https://github.com/naruoken/small-shell-apps cd small-shell-apps/team_app #if you already careated events and tasks databoxes, please delete it. #rm -rf /usr/local/small-shell/databox/events #rm -rf /usr/local/small-shell/databox/tasks # Deploy Team APP, shell can createe databox as well sudo ./deploy.sh Add user to Team APP Please add user to the APP, Then you can get key to access team portal. sudo /usr/local/small-shell/adm/ops app:team add.usr:test Access ULR of Team APP There is 2 URL for using Team APP, 1 is for APP user, 1 is external user for inquiry. please try to use. # Team APP https://${FQND}/team # Inquiry Form https://${FQDN}/inquiry Oauth integration If you want to use Oauth, it's recommended to select other type APP. sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 3 app_name: oauth_test Type of Authentication (1.shared pass | 2.user key | 3.other | 4.none): 3 We made sample script that can be integrated with Oauth provider, please get each parameter from Oauth provider beforehand. # input small-shell app name app=\"oauth_test\" echo $app cd $HOME git clone https://github.com/naruoken/small-shell-apps # select provider provider=\"gcp\" #provider=\"okta\" cd small-shell-apps/oauth_sample/authorization_code # UPDATE PARAMA vi ./cgi-bin/${provider}_auth #------------------------------------------------ # target params exchange_token_uri=\"\" user_info_req_uri=\"\" redirect_uri=\"\" client_id=\"\" client_secret=\"\" target_claim=\"\" #------------------------------------------------- # sample input #------------------------------------------------ #exchange_token_uri=\"https://oauth2.googleapis.com/token\" #user_info_req_uri=\"https://www.googleapis.com/oauth2/v1/userinfo?\" #redirect_uri=\"http://XXX/cgi-bin/auth.oauth_test\" #client_id=\"XXX.apps.googleusercontent.com\" #client_secret=\"XXXX\" #target_claim=\"email\" vi ./descriptor/${provider}_oauth_form.html.def #------------------------------------------------ # target params var CLIENT_ID = ''; var REDIRECT_URI = ''; var OAUTH_END_POINT = ''; var SCOPE = ''; var STATE = ''; #------------------------------------------------- # sample input #------------------------------------------------ # var CLIENT_ID = 'XXXX.apps.googleusercontent.com'; # var REDIRECT_URI = 'http://XXXX/cgi-bin/auth.oauth_test'; # var OAUTH_END_POINT = 'https://accounts.google.com/o/oauth2/v2/auth'; # var SCOPE = 'https://www.googleapis.com/auth/userinfo.email'; # var STATE = 'statee'; #------------------------------------------------ # DEPLOY authkey=`grep authkey= /var/www/cgi-bin/auth.$app | sed \"s/authkey=\\\"//g\" | sed \"s/\\\"//g\"` echo $authkey cat ./cgi-bin/${provider}_auth | sed \"s/%%authkey/$authkey/g\" > .auth.$app sudo cp .auth.$app /var/www/cgi-bin/auth.$app cat ./descriptor/${provider}_oauth_form.html.def > .${app}_auth_form.html.def sudo cp .${app}_auth_form.html.def /var/www/descriptor/${app}_auth_form.html.def sudo chmod 755 /var/www/cgi-bin/auth.$app Then you can try to connect APP through Oauth. https://$fqdn/cgi-bin/auth.oauth_test Delete Scratech APP You can delete your scratch APP by using util script as following. usage: sudo /usr/local/small-shell/util/scripts/del_app.sh $app Technical Tips This is a random technical Tips. It could be hint for making your own scratch APP. 1. Get ID & key's value You can get text name using ID and key using \"none\" format @action script (shell) # get name which will be issued DATA_SHELL=\"sudo -u small-shell ${small_shell_path}/bin/DATA_shell session:$session pin:$pin\" book_name=`$DATA_SHELL databox:book.master action:get key:name id:$id format:none | $AWK -F \":\" '{print $2}'` 2. ID search by using Name You can also get ID using 100% matched text @action script (shell) # get book ID Based on the name DATA_SHELL=\"sudo -u small-shell ${small_shell_path}/bin/DATA_shell session:$session pin:$pin\" book_id=`$DATA_SHELL databox:book.master command:show_all[match=name{$book_name}] format:json | jq '.[] | .id'| $SED -s \"s/\\\"//g\"` 3. Json insert to javascript instance In terms of integration with javascript frameworks, we would like to recommend to insert bulk of json datas to javascript directly using %% tag because ajax with small-shell will take 1 or 2 sec for getting data. Json technique (javascript in html def) const events = %%json generator in bin/team_main.sh sudo vi /var/www/bin/team_main.sh --code-- ## generate json $DATA_SHELL databox:$databox command:show_all[filter=sync{yes}] format:json \\ | $SED \"s/{%%%%%%%%%%%%%%%%%}/'/g\"\\ | $SED \"s/{%%%%%%%%%%%%%%%%}/%/g\"\\ | $SED \"s/{%%%%%%%%%%%%%%%}/*/g\"\\ | $SED \"s/{%%%%%%%%%%%%%%}/$/g\"\\ | $SED \"s/{%%%%%%%%%%%%%}/\\#/g\"\\ | $SED \"s/{%%%%%%%%%%%%}/|/g\"\\ | $SED \"s/{%%%%%%%%%%%}/\\]/g\"\\ | $SED \"s/{%%%%%%%%%%}/\\[/g\"\\ | $SED \"s/{%%%%%%%%%}/)/g\"\\ | $SED \"s/{%%%%%%%%}/(/g\"\\ | $SED \"s/{%%%%%%%}/_/g\"\\ | $SED \"s/{%%%%%%}/,/g\"\\ | $SED \"s/{%%%%%}/\\//g\"\\ | $SED \"s/{%%%%}/\\&/g\"\\ | $SED \"s/{%%%}/:/g\" > ../tmp/$session/events ## then, just insert %%json to events cat ../descriptor/team_main.html.def | $SED \"s/^ *</</g\" \\ | $SED \"/%%common_menu/r ../descriptor/common_parts/pintest_common_menu\" \\ | $SED \"s/%%common_menu//g\"\\ | $SED \"s/%%user_name/$user_name/g\" \\ | $SED \"/%%json/r ../tmp/$session/events\"\\ | $SED \"s/%%json//g\"\\ | $SED \"s/%%params/session=$session\\&pin=$pin\\&databox=$databox/g\" -------- 4. Disable portal If your APP will not use portal, please change main request to table by adding these codes. sudo vi /var/www/cgi-bin/$app --code-- if [ \"$req\" = \"main\" ];then req=table fi --------","title":"Create Scratch APP"},{"location":"app_shell_scratch/#create-scratch-app","text":"In this tour, you can learn how to make scratch APP and how to edit codes or portal page very quiickly. there are 4 types of Scratch APP as following chart. Type Auth View Data src Code Data Access Shared Pass APP Shared Pass Code Markdown portal,table,form,log specific databox editable Controllable per group Key APP Base64 Encrypted Key Markdown portal,table,form,log specific databox editable Controllable per user Other Any Markdown portal,table,form,log specific databox editable Customize everything No auth APP No Authentication Markdown portal,table,form specific databox editable Read only","title":"Create Scratch APP"},{"location":"app_shell_scratch/#required","text":"Please setup Base APP beorehand refering to Quick Start","title":"Required"},{"location":"app_shell_scratch/#common-step","text":"Each types of scratch APP have common STEP for launching APP, difference is mainly authentication method. Generate DataBox for datastore #gen -databox Generate Scratch APP #gen -app Update portal with Markdown or HTML tag #on BaseAPP Add user #key APP, other Update action scripts #optional Add subAPP #connect additional databox if needed Let's create scratch APP by following above steps.","title":"Common STEP"},{"location":"app_shell_scratch/#generate-databox","text":"Please generate databox that will be used for Scratch APP. sudo /usr/local/small-shell/adm/gen -databox # -> dialog will be started","title":"Generate DataBox"},{"location":"app_shell_scratch/#generate-app","text":"Let's start to generate scratch APP named as just test with base64 key authentiaction. by the way you can use any other name as app_name. In this sample, we would like to use the name just test but of course you can set any prefer name you want. sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 3 APP Name: test Type of Authentication (1.shared pass | 2.user key | 3.other | 4.none): 2 Primary databox: item.db Note If you don't need to use any databox, please input none or null as primary databox","title":"Generate APP"},{"location":"app_shell_scratch/#update-portal","text":"You can update portal by updating markdown description of $app.UI.md.def on Base APP or edit code directly please check cookbook . default portal image is here.","title":"Update portal"},{"location":"app_shell_scratch/#add-user-to-the-app","text":"If you select Key APP, please add user for the APP. then you can get URL that can generate key for each end user. sudo /usr/local/small-shell/adm/ops app:$app add.usr:$usr e.g.) add \"test_user\" user for key APP name \"test\" sudo /usr/local/small-shell/adm/ops app:test add.usr:test_user -------------------------------------------------------------------- Key initializing & generating URL for test_user on test APP is here -------------------------------------------------------------------- https://ec2-XX-XX-XX-XX.us-west-2.compute.XXXX.com/cgi-bin/auth.test?initialize=cd5e7330e5fb92b4999f2a7801da7267c802c4109a7126be47d5049cd7d5c440,6bc0917d9510ae794ab5cb5d1e65834c09ad11fbd3d78db881a656c591d1604a","title":"Add user to the APP"},{"location":"app_shell_scratch/#connect-to-the-app","text":"End user key that's generated above command will be stored to end user browser automatically using localstorage by javascript once connected to above url. And if you set \"yes\" for IP whitelisting for this APP in the dialog, you can set restricted IPs by using ops command. IP whitelisting detail is on APP shell tour","title":"Connect to the APP"},{"location":"app_shell_scratch/#access-url-of-the-app","text":"If you are using default WEB server, your application URL must be $FQDN/$app except \"other\" type APP. URL will be shown in the dialog of gen command. e.g.) APP:test, URL:https://$FQDN/test","title":"Access URL of the APP"},{"location":"app_shell_scratch/#re-generate-user-key","text":"If end user lost their key, you can generate URL for re-generating key. sudo /usr/local/small-shell/adm/ops initialize.usr:test app:test","title":"Re-generate User key"},{"location":"app_shell_scratch/#update-pass-code","text":"If it's Shared Pass code APP, you can update pass code by updating file directly sudo vi /usr/local/small-shell/web/$app.code","title":"Update Pass code"},{"location":"app_shell_scratch/#update-codes-optional","text":"Then APP will be generated to directory that you already defined in Base APP dialog. you can update codes freely. As for small-shell framework please check MVC model","title":"Update codes (optional)"},{"location":"app_shell_scratch/#target-codes","text":"# actionscripts $bin (/var/www/bin) # HTML descriptors $descriptor(/var/www/descriptor)","title":"Target codes"},{"location":"app_shell_scratch/#parameter-change-bin","text":"In this example, accesible key of databox is changed. In the default permission, end user can access all keys of databox from the Scratch APP. e.g) restrict data keys sudo vi /var/www/bin/test_get.sh --code-- # Target databox and keys #keys=all keys=item_name,description --------","title":"Parameter change ($bin)"},{"location":"app_shell_scratch/#html-descriptor-descriptor","text":"Draft design of HTML is already generated, and you could customize them freely. sudo vi /var/www/descriptor/test_main.html.def sudo vi /var/www/descriptor/test_table.html.def","title":"HTML descriptor ($descriptor)"},{"location":"app_shell_scratch/#use-member-list","text":"If you want to import user list on your APP Form. you can select \"mls\" as data type in the gen dialog of data box creation. mls can import user list of your scratch APP. following is just example. key(col2) name: assignee key(col2) label: Assignee data type (text | select | radio | checkbox | email | num | tel | date | date-time | url | textarea | file | pdls | mls): mls","title":"Use member list"},{"location":"app_shell_scratch/#tagging-on-scratch-app","text":"You can add search tag to the table by ops command sudo /usr/local/small-shell/adm/ops add.tag:$databox{key{word}} app:$app_name e.g.) sudo /usr/local/small-shell/adm/ops add.tag:tasks{status{on-going}} app:tasks","title":"Tagging on Scratch APP"},{"location":"app_shell_scratch/#change-user-permission","text":"User permission could be changed ops command with app option. # change to read only sudo /usr/local/small-shell/adm/ops set.attr:$user{ro} app:$app # change to read / write sudo /usr/local/small-shell/adm/ops set.attr:$user{rw} app:$app You can add any extension information to user attribute. following is exmaple to set attribute to ken as admin for management APP. # user=ken app=management sudo /usr/local/small-shell/adm/ops set.attr:ken{admin=yes} app:management # confirm permission sudo -u small-shell /usr/local/small-shell/bin/meta get.attr:management/ken{admin} >yes","title":"Change user permission"},{"location":"app_shell_scratch/#update-descriptor","text":"If you delete or put of actionlink please update get.html.def directly # e.g ) add delete function to test APP # sudo vi /var/www/descriptor/sapp_get.html.def sudo vi /var/www/descriptor/test_get.html.def --code-- <div class=\"action_links\"> <span><p style=\"cursor: pointer\" onclick=\"window.open('./test?%%params&req=log_viewer&id=%%id', 'log_viewer', 'width=820,height=280')\">Show data update history</p></span> <span><p style=\"cursor: pointer\" onclick=\"del_confirmation()\">Delete</p></span> --------","title":"update descriptor"},{"location":"app_shell_scratch/#sub-app","text":"Basically scratch APP connect to only 1 databox. and Sub APP is the way to add databox to your scratch APP additionally. In this following exmapmle, databox:inventory.db subapp:inventory will be added to scratch APP that name is test. Note subAPP must be belong to parent APP, please define subapp as $subAPP_name@$parentAPP_name sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 3 APP Name: inventory@test Subapp databox: inventory.db Once subAPP deployed, please check routing and menu that will be updaated automatically. and you can freely modify them. # routing # sudo cat /var/www/cgi-bin/$parent_app sudo cat /var/www/cgi-bin/test # menu # cat /var/www/desciption/common_parts/$parent_app_common_menu cat /var/www/desciption/common_parts/test_common_menu Portal page link will be updated as well. please check on Base APP.","title":"Sub APP"},{"location":"app_shell_scratch/#meta-link","text":"You can generate links that can be used in the APP. please do not delete %%session in the link. then it will be replaced to a dynamic session and pin code. These links could be used in html descriptor of your APP and it can connect table of primary databox of your APP or it can connect action links such like new or get data in the APP. sudo -u small-shell /usr/local/small-shell/bin/meta get.link:$app for subapp sudo -u small-shell /usr/local/small-shell/bin/meta get.link:$subapp@$parent_app","title":"Meta link"},{"location":"app_shell_scratch/#import-app-from-template","text":"Creating APP template is sub project of small-shell. you can import APP template from git sub projects.","title":"Import APP from template"},{"location":"app_shell_scratch/#team-app","text":"This APP template could manage not only Team events, but also tasks, shared drive, bookmarks and inquiries as easy ticketing system.","title":"Team APP"},{"location":"app_shell_scratch/#team-app-funcions","text":"Function type Description Calendar portal Manage team events in portal page Announcements sub-app Share announcement to the team Tasks sub-app Manage team tasks {assignment,status,deadline,sync_calendar} Inquiries sub-app Manage inquiryes from external users Drive sub-app Provide storage that have optional link to share file to external users Bookmarks sub-app Manage bookmarks Inquiry form Inquiry Form to the Team","title":"Team APP funcions"},{"location":"app_shell_scratch/#link-to-code-is-here","text":"cd $HOME git clone https://github.com/naruoken/small-shell-apps cd small-shell-apps/team_app #if you already careated events and tasks databoxes, please delete it. #rm -rf /usr/local/small-shell/databox/events #rm -rf /usr/local/small-shell/databox/tasks # Deploy Team APP, shell can createe databox as well sudo ./deploy.sh","title":"Link to code is here"},{"location":"app_shell_scratch/#add-user-to-team-app","text":"Please add user to the APP, Then you can get key to access team portal. sudo /usr/local/small-shell/adm/ops app:team add.usr:test","title":"Add user to Team APP"},{"location":"app_shell_scratch/#access-ulr-of-team-app","text":"There is 2 URL for using Team APP, 1 is for APP user, 1 is external user for inquiry. please try to use. # Team APP https://${FQND}/team # Inquiry Form https://${FQDN}/inquiry","title":"Access ULR of Team APP"},{"location":"app_shell_scratch/#oauth-integration","text":"If you want to use Oauth, it's recommended to select other type APP. sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 3 app_name: oauth_test Type of Authentication (1.shared pass | 2.user key | 3.other | 4.none): 3 We made sample script that can be integrated with Oauth provider, please get each parameter from Oauth provider beforehand. # input small-shell app name app=\"oauth_test\" echo $app cd $HOME git clone https://github.com/naruoken/small-shell-apps # select provider provider=\"gcp\" #provider=\"okta\" cd small-shell-apps/oauth_sample/authorization_code # UPDATE PARAMA vi ./cgi-bin/${provider}_auth #------------------------------------------------ # target params exchange_token_uri=\"\" user_info_req_uri=\"\" redirect_uri=\"\" client_id=\"\" client_secret=\"\" target_claim=\"\" #------------------------------------------------- # sample input #------------------------------------------------ #exchange_token_uri=\"https://oauth2.googleapis.com/token\" #user_info_req_uri=\"https://www.googleapis.com/oauth2/v1/userinfo?\" #redirect_uri=\"http://XXX/cgi-bin/auth.oauth_test\" #client_id=\"XXX.apps.googleusercontent.com\" #client_secret=\"XXXX\" #target_claim=\"email\" vi ./descriptor/${provider}_oauth_form.html.def #------------------------------------------------ # target params var CLIENT_ID = ''; var REDIRECT_URI = ''; var OAUTH_END_POINT = ''; var SCOPE = ''; var STATE = ''; #------------------------------------------------- # sample input #------------------------------------------------ # var CLIENT_ID = 'XXXX.apps.googleusercontent.com'; # var REDIRECT_URI = 'http://XXXX/cgi-bin/auth.oauth_test'; # var OAUTH_END_POINT = 'https://accounts.google.com/o/oauth2/v2/auth'; # var SCOPE = 'https://www.googleapis.com/auth/userinfo.email'; # var STATE = 'statee'; #------------------------------------------------ # DEPLOY authkey=`grep authkey= /var/www/cgi-bin/auth.$app | sed \"s/authkey=\\\"//g\" | sed \"s/\\\"//g\"` echo $authkey cat ./cgi-bin/${provider}_auth | sed \"s/%%authkey/$authkey/g\" > .auth.$app sudo cp .auth.$app /var/www/cgi-bin/auth.$app cat ./descriptor/${provider}_oauth_form.html.def > .${app}_auth_form.html.def sudo cp .${app}_auth_form.html.def /var/www/descriptor/${app}_auth_form.html.def sudo chmod 755 /var/www/cgi-bin/auth.$app Then you can try to connect APP through Oauth. https://$fqdn/cgi-bin/auth.oauth_test","title":"Oauth integration"},{"location":"app_shell_scratch/#delete-scratech-app","text":"You can delete your scratch APP by using util script as following. usage: sudo /usr/local/small-shell/util/scripts/del_app.sh $app","title":"Delete Scratech APP"},{"location":"app_shell_scratch/#technical-tips","text":"This is a random technical Tips. It could be hint for making your own scratch APP.","title":"Technical Tips"},{"location":"app_shell_scratch/#1-get-id-keys-value","text":"You can get text name using ID and key using \"none\" format","title":"1. Get ID &amp; key's value"},{"location":"app_shell_scratch/#action-script-shell","text":"# get name which will be issued DATA_SHELL=\"sudo -u small-shell ${small_shell_path}/bin/DATA_shell session:$session pin:$pin\" book_name=`$DATA_SHELL databox:book.master action:get key:name id:$id format:none | $AWK -F \":\" '{print $2}'`","title":"@action script (shell)"},{"location":"app_shell_scratch/#2-id-search-by-using-name","text":"You can also get ID using 100% matched text","title":"2. ID search by using Name"},{"location":"app_shell_scratch/#action-script-shell_1","text":"# get book ID Based on the name DATA_SHELL=\"sudo -u small-shell ${small_shell_path}/bin/DATA_shell session:$session pin:$pin\" book_id=`$DATA_SHELL databox:book.master command:show_all[match=name{$book_name}] format:json | jq '.[] | .id'| $SED -s \"s/\\\"//g\"`","title":"@action script (shell)"},{"location":"app_shell_scratch/#3-json-insert-to-javascript-instance","text":"In terms of integration with javascript frameworks, we would like to recommend to insert bulk of json datas to javascript directly using %% tag because ajax with small-shell will take 1 or 2 sec for getting data.","title":"3. Json insert to javascript instance"},{"location":"app_shell_scratch/#json-technique-javascript-in-html-def","text":"const events = %%json","title":"Json technique (javascript in html def)"},{"location":"app_shell_scratch/#generator-in-binteam_mainsh","text":"sudo vi /var/www/bin/team_main.sh --code-- ## generate json $DATA_SHELL databox:$databox command:show_all[filter=sync{yes}] format:json \\ | $SED \"s/{%%%%%%%%%%%%%%%%%}/'/g\"\\ | $SED \"s/{%%%%%%%%%%%%%%%%}/%/g\"\\ | $SED \"s/{%%%%%%%%%%%%%%%}/*/g\"\\ | $SED \"s/{%%%%%%%%%%%%%%}/$/g\"\\ | $SED \"s/{%%%%%%%%%%%%%}/\\#/g\"\\ | $SED \"s/{%%%%%%%%%%%%}/|/g\"\\ | $SED \"s/{%%%%%%%%%%%}/\\]/g\"\\ | $SED \"s/{%%%%%%%%%%}/\\[/g\"\\ | $SED \"s/{%%%%%%%%%}/)/g\"\\ | $SED \"s/{%%%%%%%%}/(/g\"\\ | $SED \"s/{%%%%%%%}/_/g\"\\ | $SED \"s/{%%%%%%}/,/g\"\\ | $SED \"s/{%%%%%}/\\//g\"\\ | $SED \"s/{%%%%}/\\&/g\"\\ | $SED \"s/{%%%}/:/g\" > ../tmp/$session/events ## then, just insert %%json to events cat ../descriptor/team_main.html.def | $SED \"s/^ *</</g\" \\ | $SED \"/%%common_menu/r ../descriptor/common_parts/pintest_common_menu\" \\ | $SED \"s/%%common_menu//g\"\\ | $SED \"s/%%user_name/$user_name/g\" \\ | $SED \"/%%json/r ../tmp/$session/events\"\\ | $SED \"s/%%json//g\"\\ | $SED \"s/%%params/session=$session\\&pin=$pin\\&databox=$databox/g\" --------","title":"generator in bin/team_main.sh"},{"location":"app_shell_scratch/#4-disable-portal","text":"If your APP will not use portal, please change main request to table by adding these codes. sudo vi /var/www/cgi-bin/$app --code-- if [ \"$req\" = \"main\" ];then req=table fi --------","title":"4. Disable portal"},{"location":"app_shell_tour/","text":"APP Shell You can generate Web application with standard css design very easily. Basically each types of APP is customizable but Base APP is base layer of each application, so it's recommended to generate scratch APP for editting codes freely without any impact to base layer. as for portal page you can edit it very easily by using both markdown grammar or HTML/CSS framework, please check cookbook Types of small-shell APP Type Authentication View Data src Code Data Access Base APP Base64 encrypted Key table,form,console,log,graph All Databox Basically Uneditable Full & Flat but control rw/ro permission WEB Form No auth WEB form Specific Databox Editable Just push new data through dedicated Form Shared Pass APP Shared Pass Code portal,table,form,log Specific Databox Editable Limitted & controllable Key APP Base64 encrypted Key portal,table,form,log Specific Databox Editable Limitted & controllable Other Any #Oauth other portal,table,form,log Specific Databox Editable Limitted & controllable No auth APP No authentication portal,table,form Specific Databox Editable Basically read only required Please setup OS Env beorehand refering to Quick start , then start dialog by gen command. Generate Base APP Once OS setup has been done, let's tart to generate Base APP through gen dialog. sudo /usr/local/small-shell/adm/gen -app #-> dialog will be started # Dialog ----------------------------------------------------------------- sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 Type of server (1.small-shell WEB srv | 2.other WEB srv): 1 Protocol (http | https): https WEB Server FQDN or IP addr (e.g. 192.168.10.1): ec2-XX-XX-XX-XX.XXXX.com ssl cert path : /root/cert.pem ssl privare key path : /root/private.pem Do you need to use chain certificate? (yes | no): no ----------------------------------------------------------------- small-shell WEB srv small-shell contain default WEB server that is written by javascipt using Node.js. it can be managed by systemctl command. ofcourse you can use your favorite WEB server as well, in that case please select \"other WEB srv\" and input detail to the dialog. we verified that small-shell can be worked without any problem on Apache and Nginx. Define dataset of WEB APP For the first step, it's required to define dataset that will be refered from APP. \"label\" will be shown in the table and Form of APP. you can also define parameters of select, radio or checkbox in the dialog. by the way, there is 2 type of primary key. please check detail on databox feature sudo /usr/local/small-shell/adm/gen -databox This is exmpale of dialog result. Databox will be generated by following order, please check it ----------------------------------------------------------------- Databox Name:inventory.db #primary_key name=\"item_name\" label=\"Item Name\" type=\"text\" option=\"required\" #key(col2) name=\"description\" label=\"Description\" type=\"text\" option=\"\" #key(col3) name=\"category\" label=\"Category\" type=\"select\" params=\"PC,network_device,audio_visual,furniture,other\" option=\"required\" #key(col4) name=\"num\" label=\"Num\" type=\"number\" option=\"required\" ----------------------------------------------------------------- Note \"Data Type\" is same as HTML type attribute and you can change parameter easily. besides there is special type that's defined for small-shell WEB application framework. type: select and radio You can define parameters in the dialog. and change them anytime later. type: pdls \"pdls\" means primary data list. If you want to import primary key values as datalist from other databox, please set type as pdls in the dialog. please see detail pdls type: mls \"mls\" means member list. if you want to import user who already created in small-shell, please use mls. This is image of dataset inserted to the APP. Parameters that is defined in the dialog will be inserted like below. Add / initialize user Following example is adding user name \"test\", \"test\" can initialize and get base64 key by accessing the URL that is generated by ops command. the key will be stored to end user browser automatically using localstorage. sudo /usr/local/small-shell/adm/ops add.usr:test ----------------------------------------------------------------- Key initializing & generating URL for test on Base APP is here ----------------------------------------------------------------- https://ec2-XX-XX-XX-XX.XXXX.com/cgi-bin/auth.base?initialize=*****fce76b37e4e93b7605022da52e6ccc26fd2,4c5a2ae68d20e530b4ce457c71eae42590135268e1fb933a945f7e188678ccf4 Access URL of Base APP As you already checked, access URL is shown in the result of ops add command. if you are using small-shell default WEB server, URL must be $FQDN/base. e.g.) https://ec2-XX-XX-XX-XX.XXXX.com/base Re-generate User key If end user lost their key, you can generate URL for re-generating key. sudo /usr/local/small-shell/adm/ops initialize.usr:test ----------------------------------------------------------------- Key initializing & generating URL for test on Base APP is here ----------------------------------------------------------------- https://ec2-XX-XX-XX-XX.XXXX.com/cgi-bin/auth.base?initialize=*****fce76b37e4e93b7605022da52e6ccc26fd2,4c5a2ae68d20e530b4ce457c71eae42590135268e1fb933a945f7e188678ccf4 Modify dataset You can modify dataset anytime later. Add | Del Column Column can be added or deleted by gen command sudo /usr/local/small-shell/adm/gen -addcol sudo /usr/local/small-shell/adm/gen -delcol Change label Label definition can be modified directly (e.g.) change inventory.db col2 label sudo vi /usr/local/small-shell/databox/inventory.db/def/col2 --code-- name=\"description\" label=\"description\" type=\"text\" option=\"\" -------- Change params of select type or radio Params can be also modified directly (e.g.) change inventory.db col3 sudo vi /usr/local/small-shell/databox/inventory.db/def/col3 --code-- name=\"item_type\" label=\"item_type\" type=\"select\" params=\"PC,network_device,audio_visual,furniture,other\" option=\"required\" -------- Insert data list to Form You can import primary data list from other databox to the Form using \"pdls\". following is an example that can show how you can utilize pdls. type=pdls Import target: inventory.db New databox : request.db <- import item list sudo /usr/local/small-shell/adm/gen -databox # result of dialog ----------------------------------------------------------------- databox_name:order.db #primary_key name=\"hashid\" label=\"hashid\" type=\"text\" option=\"required\" #key(col2) name=\"item\" label=\"item\" type=\"pdls\" pdlsbox=\"inventory.db\" option=\"required\" #key(col3) name=\"num\" label=\"Num of item\" type=\"number\" option=\"required\" ----------------------------------------------------------------- Image of request Form using pdls is as following. +addkvl Besides importing primary key value, you can import 1 other column as well by adding addkvl param manually. following example is adding item_type to the importing value. # edit target coumn, in this example col3 is target. sudo vi /usr/local/small-shell/databox/order.db/def/col2 --code-- name=\"item\" label=\"item\" type=\"pdls\" pdlsbox=\"inventory.db\" option=\"required\" addkvl=\"category\" #<- add by manually -------- Change user permission You can cpontroll user permission. user default permission is \"read/write\" # read write permission sudo /usr/local/small-shell/adm/ops set.attr:$user{rw} # read only permission sudo /usr/local/small-shell/adm/ops set.attr:$user{ro} e.g) # change test user to read only permission sudo /usr/local/small-shell/adm/ops set.attr:test{ro} MVC model You can customize small shell by understanding similar MVC model concept. Basic structure # Directory of small-shell core /usr/local/small-shell/bin |- auth # used for base64 encrypted key auth |- extension_auth # used for Scratch APP user auth |- DATA_shell # CLI tool for accessing data shell |- meta # show meta data /usr/local/small-shell/adm |- ops |- gen #generate CGI, DATA, Automate shells # Directory for APP $cgidir (/var/www/cgi-bin #default) |- base # Base APP controller |- auth.base # Base APP authenticator |- api |- e-cron |- ${app} # scratch APP controller |- auth.${app} # scratch APP authenticator $bin (/var/www/bin) |- action_scripts # work as Model |- parse.sh #it will be used for parsing posted params $descriptor (/var/www/descriptor) |- html_definitions # work as definition of view $app (/var/www/app) |-index.js # small-shell default web server |-log # default server log $tmp (/var/www/tmp) Data flow Following is a data flow of APP shell it will be used as Base APP or Scratch APP URL design Query string will be loaded same name of valiables in the APP https://$[server]/cgi-bin/${app}?req=get&databox=inventory.db&id=1234 .. These query string will be loaded as following value in the APP -> req=get -> databox=inventory.db -> id=1234 Routing in controller # Base APP Routings to the action scripts are defined in the controller script. sudo vi $cgi-bin/base (e.g. /var/www/cgi-bin/base) --code-- #---------------------------- # routing to action scripts #---------------------------- #e.g. get request case \"$req\" in \"get\") ../bin/get.sh databox:$databox id:$id session:$session ;; -------- Action scripts (model) Action scripts will work with folloging STEPS Load parameters from QUERY string Load parameters from POST data Call DATA shell Insert dynamic contents to %%tags Render pure HTML to client Load QUERY string (e.g. $databox,$id,$session) that will be passsed from controller as parameter sudo vi $bin/get.sh (e.g. /var/www/bin/get.sh) --code-- # load query string param @actionscripts for param in `echo $@` do if [[ $param == databox:* ]]; then databox=`echo $param | $AWK -F\":\" '{print $2}'` fi if [[ $param == id:* ]]; then id=`echo $param | $AWK -F\":\" '{print $2}'` fi if [[ $param == session:* ]]; then session=`echo $param | $AWK -F\":\" '{print $2}'` fi done ------- Load POST data that is stored by controller ../tmp/$session/$key (e.g. item_name) sudo vi $bin/get.sh (e.g. /var/www/bin/get.sh) --code-- item_name=`cat ../tmp/$session/item_name` -------- Generate data by calling DATA_shell with html format (e.g. accesing to inventory.db) sudo vi $bin/get.sh (e.g. /var/www/bin/get.sh) --code-- sudo -u small-shell ${small_shell_path}/bin/DATA_shell session:$session pin:$pin databox:inventory.db \\ action:get id:$id keys:all format:html_tag > ../tmp/$session/dataset -------- Render HTML with inserting dynamic contents to %%tags (e.g. dataset{html_tag} from inventory.db) sudo vi $bin/get.sh (e.g. /var/www/bin/get.sh) --code-- cat ../descriptor/get.html.def | $SED \"s/^ *</</g\" \\ | $SED \"/%%dataset/r ../tmp/$session/dataset\" \\ | $SED \"s/%%dataset//g\" -------- html.def (view) Just write down pure HTML. %%tag can be replaced to dynamic contents sudo vi $descriptor/$htmldef (e.g. /var/www/descriptor/get.html.def) --code-- <h2>Data.values</h2> <p><b>#ID </b>%%id</p> </div> <form method=\"post\" action=\"./base?%%params&req=set&id=%%id&post=yes\" onclick=\"document.charset='utf-8';\"> <ul> %%dataset </ul> <button class=\"button\" type=\"submit\">UPDATE</button> </form> -------- Rendered Pure HTML Once action script is executed by accessing the page, pure HTML will be rendered by inserting dynamic contents to %%dataset tag. <h2>Data.values</h2> <p><b>#ID </b>81416a688e358d92b2a9f2ad412cb5fa60cae8e04f611335a14c6dafe2614f1e</p> </div> <form method=\"post\" action=\"./base?session=54c59a2567b0ac722855c801c7008a071b386f7b63ce2d6c138f5e0d94350037&pin=29449&databox=inventory.db&req=set&id=81416a688e358d92b2a9f2ad412cb5fa60cae8e04f611335a14c6dafe2614f1e&post=yes\" onclick=\"document.charset='utf-8';\"> <ul> <li> <label>item_name (Fixed)</label> <p>small egg</p> </li> <li> <label>description</label> <input type=\"text\" name=\"description\" value=\"It's a small world egg\" > </li> <li> <label>stock</label> <input type=\"hidden\" name=\"stock\" value=\"\"> <input type=\"checkbox\" name=\"stock\" value=\"yes\" checked=\"checked\"> </li> <li> <label>item_type</label> <select name=\"item_type\" > <option value=\"other\">other</option> <option value=\"book\">book</option> <option value=\"furniture\">furniture</option> <option value=\"electric\">electric</option> <option value=\"other\">other</option> </select> </li> </ul> <button class=\"button\" type=\"submit\">UPDATE</button> </form> Parse parse.sh will be used for parsing posted data. posted data will be stored to files in output dir. PATH $bin/parse.sh (e.g. /var/www/bin/parse.sh) Usage parse.sh $session $type input ../tmp/$session/input (e.g. /var/www/tmp/$session/input) type urlenc # normal post multipart # multipart/form-data binary # binary post json #json post output Output will be dumped to ../tmp/$session directory # parsed key value ls /var/www/tmp/$session/$key # get key's value cat /var/www/tmp/$session/$key # parsed file ls /var/www/tmp/$session/binary_file/file_name #contain file name ls /var/www/tmp/$session/binary_file/binary.data #binary data Parse usage in the APP # sudo vi $cgidir/base sudo vi /var/www/cgi-bin/base --code-- # dump POST data if [ \"`echo $REQUEST_METHOD | grep -i \"POST\"`\" ];then if [ \"`echo $CONTENT_TYPE | grep \"application/json\"`\" ];then method=json elif [ \"`echo $CONTENT_TYPE | grep \"multipart/form-data\"`\" ];then method=multipart elif [ \"`echo $CONTENT_TYPE | grep \"application/octet-stream\"`\" ];then method=data-binary else method=urlenc fi mkdir ../tmp/$session # dump posted data dd bs=${CONTENT_LENGTH} of=../tmp/$session/input 2>/dev/null ../bin/parse.sh $session $method fi -------- Debug techniques Check error log # small-shell default web sudo tail -f /var/www/log/srvdump.log # ubuntu & apache2 sudo tail -f /var/log/apache2/error_log Posted param and command result check comment out tmp dir removal sudo vi /var/www/bin/set.sh --code-- #if [ \"$session\" ];then # rm -rf ../tmp/$session #fi -------- Then check /var/www/tmp, you can check posted params after post data on tmp dir e.g. $ ls /var/www/tmp b5ee3b232da9615cb7dda3838cc689aea77b323c3623c34c509d541eef9800eb $ cd b5ee3b232da9615cb7dda3838cc689aea77b323c3623c34c509d541eef9800eb $ ls category databox_list issue_link result status check posted param $ cat status available check result $ cat result successfully set 181210f8f9c779c26da1d9b2075bde0127302ee0e3fca38c9a83f5b1dd8e5d3b category info: issue_link value{} is same as original value info: status value{available} is same as original value Exec Command check show exec command by echo \"\", then you can check command and parameters. it can be chcked on browser. sudo vi $bin/$actionscript (e.g. /var/www/bin/set.sh) --code-- # set and get %%result contents sudo -u small-shell ${small_shell_path}/bin/DATA_shell session:$session pin:$pin databox:$databox \\ action:set id:$id keys:$keys input_dir:../tmp/$session format:html_tag > ../tmp/$session/result # add echo command & sleep to show command echo \"sudo -u small-shell ${small_shell_path}/bin/DATA_shell session:$session pin:$pin databox:$databox \\ action:set id:$id keys:$keys input_dir:../tmp/$session format:html_tag > ../tmp/$session/result\" sleep 10 -------- You could find specific command that will be executed by action script (e.g. set.sh), following is an example executing set.sh on Base APP. Exec command with debug mode # Exec command on bash directly authkey=\"XXXX\" please input your authkey sudo -u small-shell bash -x /usr/local/small-shell/bin/DATA_shell authkey:$authkey + \"parameters that shown on the page\" Tagging on Base APP You can add tag to the table. the tag can be used for searching with specific word. Add tag thoroug small-shell command sudo /usr/local/small-shell/adm/ops add.tag:$databox{word} (e.g.) sudo /usr/local/small-shell/adm/ops add.tag:item.db{test} Delete tag on small-shell server sudo /usr/local/small-shell/adm/ops del.tag:$databox{word} (e.g.) sudo /usr/local/small-shell/adm/ops del.tag:item.db{test} This is example of tag of word{test}, If you click the tag, search result will be shown. IP whitelisting You can set IP whitelisting to restrict access to APP. it will be deployed to Base APP automatically. it can be deployed to Form and Scratch APPs, if it's enabled in the gen dialog. sudo /usr/local/small-shell/adm/ops set.IP # vi will be launched ######################################################### # please write down IP num which can be allowed ######################################################### # Exmaple; # specific IP # 192.168.1.10 # Range IPs # 10.10.* Command API You can access command API from external systems. command API priviledge is read only as default. confirm API key sudo cat /usr/local/small-shell/web/base | grep api_authkey confirm API url sudo cat /usr/local/small-shell/web/base | grep commandapi Change permission to rw (optional) if you want to set data from external system, please change permission for api user. sudo /usr/local/small-shell/adm/ops set.attr:api{rw} Access to command API please access command API from external system, you can access the data using curl very easily. From Linux shell with curl api_authkey=\"XXXX\" commandapi=\"https://XXXX/cgi-bin/api\" databox=\"XXXX\" (e.g.) exec \"grep test\" command to index curl -X GET \"${commandapi}?databox=$databox&command=grep_test\" -H \"X-small-shell-authkey:$api_authkey\" (e.g.) get DATA id=\"0283da60063abfb3a87f1aed845d17fe2d9ba8c780b478dc4ae048f5ee97a6d5\" #please input id that you want to get curl -X GET \"${commandapi}?databox=$databox&keys=all&id=$id\" -H \"X-small-shell-authkey:$api_authkey\" (e.g.) push DATA sudo /usr/local/small-shell/adm/ops set.attr:api{rw} id=\"new\" #please input id that you want to set curl -X POST \"${commandapi}?databox=$databox&id=$id\" -H \"X-small-shell-authkey:$api_authkey\" -H \"Content-Type: application/json\" -d '{\"item_name\":\"item1\", \"description\":\"test\"}' From Windows power shell with curl @External system (windwos) $api_authkey=\"XXXX\" #please input authkey that you confirmed $commandapi=\"https://XXXX/cgi-bin/api\" $databox=\"XXXX\" (e.g.) exec grep command to index curl.exe -X GET \"${commandapi}?command=grep_test&databox=$databox\" -H \"X-small-shell-authkey:$api_authkey\" -H \"X-small-shell-databox:$databox\" (e.g.) get DATA $id=\"0283da60063abfb3a87f1aed845d17fe2d9ba8c780b478dc4ae048f5ee97a6d5\" #please input id that you want to get curl.exe -X GET \"${commandapi}?keys=all&id=$id&databox=$databox\" -H \"X-small-shell-authkey:$api_authkey\" -H \"X-small-shell-databox:$databox\" Upgrade SSL cert and key When you upgrade SSL cert and key for small-shell default WEB server, you need to re-generate Base APP by gen command. all service will be down during this upgrade. /usr/local/small-shell/gen -app ----------------------------------------------- Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 ------------------------------------------------ -> dialog will be started Verified environment OS: Ubuntu 2X (recommnded), Debian 1X, macOS Monterey, CentOS 7, RHEL 8 bash: 4.X Web : Node.js 20, 19.X + express 4.X , Apache 2.X , nginx 1.X curl: 7.X # REQUIRED commands Core commands : sha256sum, flock, base64 awk : above 3 that can use \"IGNORECASE = 1;\" option sed : above 4.2.2 that can use \"-z\" option PHP : any version which have PHP url encyption libraries","title":"APP Shell"},{"location":"app_shell_tour/#app-shell","text":"You can generate Web application with standard css design very easily. Basically each types of APP is customizable but Base APP is base layer of each application, so it's recommended to generate scratch APP for editting codes freely without any impact to base layer. as for portal page you can edit it very easily by using both markdown grammar or HTML/CSS framework, please check cookbook","title":"APP Shell"},{"location":"app_shell_tour/#types-of-small-shell-app","text":"Type Authentication View Data src Code Data Access Base APP Base64 encrypted Key table,form,console,log,graph All Databox Basically Uneditable Full & Flat but control rw/ro permission WEB Form No auth WEB form Specific Databox Editable Just push new data through dedicated Form Shared Pass APP Shared Pass Code portal,table,form,log Specific Databox Editable Limitted & controllable Key APP Base64 encrypted Key portal,table,form,log Specific Databox Editable Limitted & controllable Other Any #Oauth other portal,table,form,log Specific Databox Editable Limitted & controllable No auth APP No authentication portal,table,form Specific Databox Editable Basically read only","title":"Types of small-shell APP"},{"location":"app_shell_tour/#required","text":"Please setup OS Env beorehand refering to Quick start , then start dialog by gen command.","title":"required"},{"location":"app_shell_tour/#generate-base-app","text":"Once OS setup has been done, let's tart to generate Base APP through gen dialog. sudo /usr/local/small-shell/adm/gen -app #-> dialog will be started # Dialog ----------------------------------------------------------------- sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 Type of server (1.small-shell WEB srv | 2.other WEB srv): 1 Protocol (http | https): https WEB Server FQDN or IP addr (e.g. 192.168.10.1): ec2-XX-XX-XX-XX.XXXX.com ssl cert path : /root/cert.pem ssl privare key path : /root/private.pem Do you need to use chain certificate? (yes | no): no -----------------------------------------------------------------","title":"Generate Base APP"},{"location":"app_shell_tour/#small-shell-web-srv","text":"small-shell contain default WEB server that is written by javascipt using Node.js. it can be managed by systemctl command. ofcourse you can use your favorite WEB server as well, in that case please select \"other WEB srv\" and input detail to the dialog. we verified that small-shell can be worked without any problem on Apache and Nginx.","title":"small-shell WEB srv"},{"location":"app_shell_tour/#define-dataset-of-web-app","text":"For the first step, it's required to define dataset that will be refered from APP. \"label\" will be shown in the table and Form of APP. you can also define parameters of select, radio or checkbox in the dialog. by the way, there is 2 type of primary key. please check detail on databox feature sudo /usr/local/small-shell/adm/gen -databox This is exmpale of dialog result. Databox will be generated by following order, please check it ----------------------------------------------------------------- Databox Name:inventory.db #primary_key name=\"item_name\" label=\"Item Name\" type=\"text\" option=\"required\" #key(col2) name=\"description\" label=\"Description\" type=\"text\" option=\"\" #key(col3) name=\"category\" label=\"Category\" type=\"select\" params=\"PC,network_device,audio_visual,furniture,other\" option=\"required\" #key(col4) name=\"num\" label=\"Num\" type=\"number\" option=\"required\" ----------------------------------------------------------------- Note \"Data Type\" is same as HTML type attribute and you can change parameter easily. besides there is special type that's defined for small-shell WEB application framework. type: select and radio You can define parameters in the dialog. and change them anytime later. type: pdls \"pdls\" means primary data list. If you want to import primary key values as datalist from other databox, please set type as pdls in the dialog. please see detail pdls type: mls \"mls\" means member list. if you want to import user who already created in small-shell, please use mls. This is image of dataset inserted to the APP. Parameters that is defined in the dialog will be inserted like below.","title":"Define dataset of WEB APP"},{"location":"app_shell_tour/#add-initialize-user","text":"Following example is adding user name \"test\", \"test\" can initialize and get base64 key by accessing the URL that is generated by ops command. the key will be stored to end user browser automatically using localstorage. sudo /usr/local/small-shell/adm/ops add.usr:test ----------------------------------------------------------------- Key initializing & generating URL for test on Base APP is here ----------------------------------------------------------------- https://ec2-XX-XX-XX-XX.XXXX.com/cgi-bin/auth.base?initialize=*****fce76b37e4e93b7605022da52e6ccc26fd2,4c5a2ae68d20e530b4ce457c71eae42590135268e1fb933a945f7e188678ccf4","title":"Add / initialize user"},{"location":"app_shell_tour/#access-url-of-base-app","text":"As you already checked, access URL is shown in the result of ops add command. if you are using small-shell default WEB server, URL must be $FQDN/base. e.g.) https://ec2-XX-XX-XX-XX.XXXX.com/base","title":"Access URL of Base APP"},{"location":"app_shell_tour/#re-generate-user-key","text":"If end user lost their key, you can generate URL for re-generating key. sudo /usr/local/small-shell/adm/ops initialize.usr:test ----------------------------------------------------------------- Key initializing & generating URL for test on Base APP is here ----------------------------------------------------------------- https://ec2-XX-XX-XX-XX.XXXX.com/cgi-bin/auth.base?initialize=*****fce76b37e4e93b7605022da52e6ccc26fd2,4c5a2ae68d20e530b4ce457c71eae42590135268e1fb933a945f7e188678ccf4","title":"Re-generate User key"},{"location":"app_shell_tour/#modify-dataset","text":"You can modify dataset anytime later.","title":"Modify dataset"},{"location":"app_shell_tour/#add-del-column","text":"Column can be added or deleted by gen command sudo /usr/local/small-shell/adm/gen -addcol sudo /usr/local/small-shell/adm/gen -delcol","title":"Add | Del Column"},{"location":"app_shell_tour/#change-label","text":"Label definition can be modified directly (e.g.) change inventory.db col2 label sudo vi /usr/local/small-shell/databox/inventory.db/def/col2 --code-- name=\"description\" label=\"description\" type=\"text\" option=\"\" --------","title":"Change label"},{"location":"app_shell_tour/#change-params-of-select-type-or-radio","text":"Params can be also modified directly (e.g.) change inventory.db col3 sudo vi /usr/local/small-shell/databox/inventory.db/def/col3 --code-- name=\"item_type\" label=\"item_type\" type=\"select\" params=\"PC,network_device,audio_visual,furniture,other\" option=\"required\" --------","title":"Change params of select type or radio"},{"location":"app_shell_tour/#insert-data-list-to-form","text":"You can import primary data list from other databox to the Form using \"pdls\". following is an example that can show how you can utilize pdls.","title":"Insert data list to Form"},{"location":"app_shell_tour/#typepdls","text":"Import target: inventory.db New databox : request.db <- import item list sudo /usr/local/small-shell/adm/gen -databox # result of dialog ----------------------------------------------------------------- databox_name:order.db #primary_key name=\"hashid\" label=\"hashid\" type=\"text\" option=\"required\" #key(col2) name=\"item\" label=\"item\" type=\"pdls\" pdlsbox=\"inventory.db\" option=\"required\" #key(col3) name=\"num\" label=\"Num of item\" type=\"number\" option=\"required\" ----------------------------------------------------------------- Image of request Form using pdls is as following.","title":"type=pdls"},{"location":"app_shell_tour/#addkvl","text":"Besides importing primary key value, you can import 1 other column as well by adding addkvl param manually. following example is adding item_type to the importing value. # edit target coumn, in this example col3 is target. sudo vi /usr/local/small-shell/databox/order.db/def/col2 --code-- name=\"item\" label=\"item\" type=\"pdls\" pdlsbox=\"inventory.db\" option=\"required\" addkvl=\"category\" #<- add by manually --------","title":"+addkvl"},{"location":"app_shell_tour/#change-user-permission","text":"You can cpontroll user permission. user default permission is \"read/write\" # read write permission sudo /usr/local/small-shell/adm/ops set.attr:$user{rw} # read only permission sudo /usr/local/small-shell/adm/ops set.attr:$user{ro} e.g) # change test user to read only permission sudo /usr/local/small-shell/adm/ops set.attr:test{ro}","title":"Change user permission"},{"location":"app_shell_tour/#mvc-model","text":"You can customize small shell by understanding similar MVC model concept.","title":"MVC model"},{"location":"app_shell_tour/#basic-structure","text":"# Directory of small-shell core /usr/local/small-shell/bin |- auth # used for base64 encrypted key auth |- extension_auth # used for Scratch APP user auth |- DATA_shell # CLI tool for accessing data shell |- meta # show meta data /usr/local/small-shell/adm |- ops |- gen #generate CGI, DATA, Automate shells # Directory for APP $cgidir (/var/www/cgi-bin #default) |- base # Base APP controller |- auth.base # Base APP authenticator |- api |- e-cron |- ${app} # scratch APP controller |- auth.${app} # scratch APP authenticator $bin (/var/www/bin) |- action_scripts # work as Model |- parse.sh #it will be used for parsing posted params $descriptor (/var/www/descriptor) |- html_definitions # work as definition of view $app (/var/www/app) |-index.js # small-shell default web server |-log # default server log $tmp (/var/www/tmp)","title":"Basic structure"},{"location":"app_shell_tour/#data-flow","text":"Following is a data flow of APP shell it will be used as Base APP or Scratch APP","title":"Data flow"},{"location":"app_shell_tour/#url-design","text":"Query string will be loaded same name of valiables in the APP https://$[server]/cgi-bin/${app}?req=get&databox=inventory.db&id=1234 .. These query string will be loaded as following value in the APP -> req=get -> databox=inventory.db -> id=1234","title":"URL design"},{"location":"app_shell_tour/#routing-in-controller-base-app","text":"Routings to the action scripts are defined in the controller script. sudo vi $cgi-bin/base (e.g. /var/www/cgi-bin/base) --code-- #---------------------------- # routing to action scripts #---------------------------- #e.g. get request case \"$req\" in \"get\") ../bin/get.sh databox:$databox id:$id session:$session ;; --------","title":"Routing in controller # Base APP"},{"location":"app_shell_tour/#action-scripts-model","text":"Action scripts will work with folloging STEPS Load parameters from QUERY string Load parameters from POST data Call DATA shell Insert dynamic contents to %%tags Render pure HTML to client","title":"Action scripts (model)"},{"location":"app_shell_tour/#load-query-string-eg-databoxidsession-that-will-be-passsed-from-controller-as-parameter","text":"sudo vi $bin/get.sh (e.g. /var/www/bin/get.sh) --code-- # load query string param @actionscripts for param in `echo $@` do if [[ $param == databox:* ]]; then databox=`echo $param | $AWK -F\":\" '{print $2}'` fi if [[ $param == id:* ]]; then id=`echo $param | $AWK -F\":\" '{print $2}'` fi if [[ $param == session:* ]]; then session=`echo $param | $AWK -F\":\" '{print $2}'` fi done -------","title":"Load QUERY string (e.g. $databox,$id,$session) that will be passsed from controller as parameter"},{"location":"app_shell_tour/#load-post-data-that-is-stored-by-controller-tmpsessionkey","text":"(e.g. item_name) sudo vi $bin/get.sh (e.g. /var/www/bin/get.sh) --code-- item_name=`cat ../tmp/$session/item_name` --------","title":"Load POST data that is stored by controller ../tmp/$session/$key"},{"location":"app_shell_tour/#generate-data-by-calling-data_shell-with-html-format-eg-accesing-to-inventorydb","text":"sudo vi $bin/get.sh (e.g. /var/www/bin/get.sh) --code-- sudo -u small-shell ${small_shell_path}/bin/DATA_shell session:$session pin:$pin databox:inventory.db \\ action:get id:$id keys:all format:html_tag > ../tmp/$session/dataset --------","title":"Generate data by calling DATA_shell with html format (e.g. accesing to inventory.db)"},{"location":"app_shell_tour/#render-html-with-inserting-dynamic-contents-to-tags-eg-datasethtml_tag-from-inventorydb","text":"sudo vi $bin/get.sh (e.g. /var/www/bin/get.sh) --code-- cat ../descriptor/get.html.def | $SED \"s/^ *</</g\" \\ | $SED \"/%%dataset/r ../tmp/$session/dataset\" \\ | $SED \"s/%%dataset//g\" --------","title":"Render HTML with inserting dynamic contents to %%tags (e.g. dataset{html_tag} from inventory.db)"},{"location":"app_shell_tour/#htmldef-view","text":"Just write down pure HTML. %%tag can be replaced to dynamic contents sudo vi $descriptor/$htmldef (e.g. /var/www/descriptor/get.html.def) --code-- <h2>Data.values</h2> <p><b>#ID </b>%%id</p> </div> <form method=\"post\" action=\"./base?%%params&req=set&id=%%id&post=yes\" onclick=\"document.charset='utf-8';\"> <ul> %%dataset </ul> <button class=\"button\" type=\"submit\">UPDATE</button> </form> --------","title":"html.def (view)"},{"location":"app_shell_tour/#rendered-pure-html","text":"Once action script is executed by accessing the page, pure HTML will be rendered by inserting dynamic contents to %%dataset tag. <h2>Data.values</h2> <p><b>#ID </b>81416a688e358d92b2a9f2ad412cb5fa60cae8e04f611335a14c6dafe2614f1e</p> </div> <form method=\"post\" action=\"./base?session=54c59a2567b0ac722855c801c7008a071b386f7b63ce2d6c138f5e0d94350037&pin=29449&databox=inventory.db&req=set&id=81416a688e358d92b2a9f2ad412cb5fa60cae8e04f611335a14c6dafe2614f1e&post=yes\" onclick=\"document.charset='utf-8';\"> <ul> <li> <label>item_name (Fixed)</label> <p>small egg</p> </li> <li> <label>description</label> <input type=\"text\" name=\"description\" value=\"It's a small world egg\" > </li> <li> <label>stock</label> <input type=\"hidden\" name=\"stock\" value=\"\"> <input type=\"checkbox\" name=\"stock\" value=\"yes\" checked=\"checked\"> </li> <li> <label>item_type</label> <select name=\"item_type\" > <option value=\"other\">other</option> <option value=\"book\">book</option> <option value=\"furniture\">furniture</option> <option value=\"electric\">electric</option> <option value=\"other\">other</option> </select> </li> </ul> <button class=\"button\" type=\"submit\">UPDATE</button> </form>","title":"Rendered Pure HTML"},{"location":"app_shell_tour/#parse","text":"parse.sh will be used for parsing posted data. posted data will be stored to files in output dir.","title":"Parse"},{"location":"app_shell_tour/#path","text":"$bin/parse.sh (e.g. /var/www/bin/parse.sh)","title":"PATH"},{"location":"app_shell_tour/#usage","text":"parse.sh $session $type","title":"Usage"},{"location":"app_shell_tour/#input","text":"../tmp/$session/input (e.g. /var/www/tmp/$session/input)","title":"input"},{"location":"app_shell_tour/#type","text":"urlenc # normal post multipart # multipart/form-data binary # binary post json #json post","title":"type"},{"location":"app_shell_tour/#output","text":"Output will be dumped to ../tmp/$session directory # parsed key value ls /var/www/tmp/$session/$key # get key's value cat /var/www/tmp/$session/$key # parsed file ls /var/www/tmp/$session/binary_file/file_name #contain file name ls /var/www/tmp/$session/binary_file/binary.data #binary data","title":"output"},{"location":"app_shell_tour/#parse-usage-in-the-app","text":"# sudo vi $cgidir/base sudo vi /var/www/cgi-bin/base --code-- # dump POST data if [ \"`echo $REQUEST_METHOD | grep -i \"POST\"`\" ];then if [ \"`echo $CONTENT_TYPE | grep \"application/json\"`\" ];then method=json elif [ \"`echo $CONTENT_TYPE | grep \"multipart/form-data\"`\" ];then method=multipart elif [ \"`echo $CONTENT_TYPE | grep \"application/octet-stream\"`\" ];then method=data-binary else method=urlenc fi mkdir ../tmp/$session # dump posted data dd bs=${CONTENT_LENGTH} of=../tmp/$session/input 2>/dev/null ../bin/parse.sh $session $method fi --------","title":"Parse usage in the APP"},{"location":"app_shell_tour/#debug-techniques","text":"","title":"Debug techniques"},{"location":"app_shell_tour/#check-error-log","text":"# small-shell default web sudo tail -f /var/www/log/srvdump.log # ubuntu & apache2 sudo tail -f /var/log/apache2/error_log","title":"Check error log"},{"location":"app_shell_tour/#posted-param-and-command-result-check","text":"comment out tmp dir removal sudo vi /var/www/bin/set.sh --code-- #if [ \"$session\" ];then # rm -rf ../tmp/$session #fi -------- Then check /var/www/tmp, you can check posted params after post data on tmp dir e.g. $ ls /var/www/tmp b5ee3b232da9615cb7dda3838cc689aea77b323c3623c34c509d541eef9800eb $ cd b5ee3b232da9615cb7dda3838cc689aea77b323c3623c34c509d541eef9800eb $ ls category databox_list issue_link result status","title":"Posted param and command result check"},{"location":"app_shell_tour/#check-posted-param","text":"$ cat status available","title":"check posted param"},{"location":"app_shell_tour/#check-result","text":"$ cat result successfully set 181210f8f9c779c26da1d9b2075bde0127302ee0e3fca38c9a83f5b1dd8e5d3b category info: issue_link value{} is same as original value info: status value{available} is same as original value","title":"check result"},{"location":"app_shell_tour/#exec-command-check","text":"show exec command by echo \"\", then you can check command and parameters. it can be chcked on browser. sudo vi $bin/$actionscript (e.g. /var/www/bin/set.sh) --code-- # set and get %%result contents sudo -u small-shell ${small_shell_path}/bin/DATA_shell session:$session pin:$pin databox:$databox \\ action:set id:$id keys:$keys input_dir:../tmp/$session format:html_tag > ../tmp/$session/result # add echo command & sleep to show command echo \"sudo -u small-shell ${small_shell_path}/bin/DATA_shell session:$session pin:$pin databox:$databox \\ action:set id:$id keys:$keys input_dir:../tmp/$session format:html_tag > ../tmp/$session/result\" sleep 10 -------- You could find specific command that will be executed by action script (e.g. set.sh), following is an example executing set.sh on Base APP.","title":"Exec Command check"},{"location":"app_shell_tour/#exec-command-with-debug-mode","text":"# Exec command on bash directly authkey=\"XXXX\" please input your authkey sudo -u small-shell bash -x /usr/local/small-shell/bin/DATA_shell authkey:$authkey + \"parameters that shown on the page\"","title":"Exec command with debug mode"},{"location":"app_shell_tour/#tagging-on-base-app","text":"You can add tag to the table. the tag can be used for searching with specific word.","title":"Tagging on Base APP"},{"location":"app_shell_tour/#add-tag-thoroug-small-shell-command","text":"sudo /usr/local/small-shell/adm/ops add.tag:$databox{word} (e.g.) sudo /usr/local/small-shell/adm/ops add.tag:item.db{test}","title":"Add tag thoroug small-shell command"},{"location":"app_shell_tour/#delete-tag-on-small-shell-server","text":"sudo /usr/local/small-shell/adm/ops del.tag:$databox{word} (e.g.) sudo /usr/local/small-shell/adm/ops del.tag:item.db{test} This is example of tag of word{test}, If you click the tag, search result will be shown.","title":"Delete tag on small-shell server"},{"location":"app_shell_tour/#ip-whitelisting","text":"You can set IP whitelisting to restrict access to APP. it will be deployed to Base APP automatically. it can be deployed to Form and Scratch APPs, if it's enabled in the gen dialog. sudo /usr/local/small-shell/adm/ops set.IP # vi will be launched ######################################################### # please write down IP num which can be allowed ######################################################### # Exmaple; # specific IP # 192.168.1.10 # Range IPs # 10.10.*","title":"IP whitelisting"},{"location":"app_shell_tour/#command-api","text":"You can access command API from external systems. command API priviledge is read only as default.","title":"Command API"},{"location":"app_shell_tour/#confirm-api-key","text":"sudo cat /usr/local/small-shell/web/base | grep api_authkey","title":"confirm API key"},{"location":"app_shell_tour/#confirm-api-url","text":"sudo cat /usr/local/small-shell/web/base | grep commandapi","title":"confirm API url"},{"location":"app_shell_tour/#change-permission-to-rw-optional","text":"if you want to set data from external system, please change permission for api user. sudo /usr/local/small-shell/adm/ops set.attr:api{rw}","title":"Change permission to rw (optional)"},{"location":"app_shell_tour/#access-to-command-api","text":"please access command API from external system, you can access the data using curl very easily.","title":"Access to command API"},{"location":"app_shell_tour/#from-linux-shell-with-curl","text":"api_authkey=\"XXXX\" commandapi=\"https://XXXX/cgi-bin/api\" databox=\"XXXX\" (e.g.) exec \"grep test\" command to index curl -X GET \"${commandapi}?databox=$databox&command=grep_test\" -H \"X-small-shell-authkey:$api_authkey\" (e.g.) get DATA id=\"0283da60063abfb3a87f1aed845d17fe2d9ba8c780b478dc4ae048f5ee97a6d5\" #please input id that you want to get curl -X GET \"${commandapi}?databox=$databox&keys=all&id=$id\" -H \"X-small-shell-authkey:$api_authkey\" (e.g.) push DATA sudo /usr/local/small-shell/adm/ops set.attr:api{rw} id=\"new\" #please input id that you want to set curl -X POST \"${commandapi}?databox=$databox&id=$id\" -H \"X-small-shell-authkey:$api_authkey\" -H \"Content-Type: application/json\" -d '{\"item_name\":\"item1\", \"description\":\"test\"}'","title":"From Linux shell with curl"},{"location":"app_shell_tour/#from-windows-power-shell-with-curl","text":"@External system (windwos) $api_authkey=\"XXXX\" #please input authkey that you confirmed $commandapi=\"https://XXXX/cgi-bin/api\" $databox=\"XXXX\" (e.g.) exec grep command to index curl.exe -X GET \"${commandapi}?command=grep_test&databox=$databox\" -H \"X-small-shell-authkey:$api_authkey\" -H \"X-small-shell-databox:$databox\" (e.g.) get DATA $id=\"0283da60063abfb3a87f1aed845d17fe2d9ba8c780b478dc4ae048f5ee97a6d5\" #please input id that you want to get curl.exe -X GET \"${commandapi}?keys=all&id=$id&databox=$databox\" -H \"X-small-shell-authkey:$api_authkey\" -H \"X-small-shell-databox:$databox\"","title":"From Windows power shell with curl"},{"location":"app_shell_tour/#upgrade-ssl-cert-and-key","text":"When you upgrade SSL cert and key for small-shell default WEB server, you need to re-generate Base APP by gen command. all service will be down during this upgrade. /usr/local/small-shell/gen -app ----------------------------------------------- Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 ------------------------------------------------ -> dialog will be started","title":"Upgrade SSL cert and key"},{"location":"app_shell_tour/#verified-environment","text":"OS: Ubuntu 2X (recommnded), Debian 1X, macOS Monterey, CentOS 7, RHEL 8 bash: 4.X Web : Node.js 20, 19.X + express 4.X , Apache 2.X , nginx 1.X curl: 7.X # REQUIRED commands Core commands : sha256sum, flock, base64 awk : above 3 that can use \"IGNORECASE = 1;\" option sed : above 4.2.2 that can use \"-z\" option PHP : any version which have PHP url encyption libraries","title":"Verified environment"},{"location":"auth_shell/","text":"Auth Shell (IAM) Auth shell is designed to be used for key based authentication and session management for WEB APPs. Base 64 key auth Base64 key will be generated with accessing intialize URL. it will contain user_name and randome string. Because key length is long enough, we think it's secure. but please use Base APP with IP whitelisting and other security measure as well if possible. FLow of Standard Auth |--------| |--------| | | ------ BASE64key ----------> | | | client | | Server | | | <------ Session Hash ------- | | | | | | | | ------ Page req {Session} -> | | | | | | | | <------ Link {NEW Sesesion} - | | |--------| |--------| Note Base64 key will be sotred at localstorage on browser using random name per instance in the personal key initializing process. PIN and Session Token Session itself is temporary hash that will be generated using randome PIN (not stored anywhere) and user name. and session file will contain user name, client remote address and user-agent. Besides session hash will be changed when accessing new pages. Fraud access could be eliminated based on enough length of session key. also WEB APP will check change of IP address and user-agent. Basic Authentication (bin/auth) Basic authentication will be done bin/auth script. it will be used by Base APP mainly. # CLI sudo /usr/local/small-shell/bin/auth action:target{param} params # COMMON #----------------------------------------------------------------------- # remote_addr:ip_addr -> IP addreess will be used for audit log and security check # user_agent:HTTP_USER_AGENT -> HTTP_USER_AGENT will be used for security check #----------------------------------------------------------------------- # AUTH REQUEST #----------------------------------------------------------------------- # initialize:user_id{initialize_key} -> get user_name and user_key # key_auth:$base64_enc_key #user_key -> get user_name and session_token with pin #----------------------------------------------------------------------- # SESSION REQUEST #----------------------------------------------------------------------- # session_chk:$session_token -> get user_name and IP addr # session_refresh:$session_token -> get user_name and new session token # session_persist:$session_token -> get user_name and new session token, and make symlink from new session to last session. # data_import_session:$session_token -> get user_name and new session token # logout:$session_token Extension auth Extension auth is used for authentication of scratch APP. # for Scratch App sudo /usr/local/small-shell/bin/extension_auth action:target{param} app:${app} #----------------------------------------------------------------------- # COMMON #----------------------------------------------------------------------- # remote_addr:ip_addr -> IP addreess will be used for audit log and security check # app:$app -> WEB app name for authentication #----------------------------------------------------------------------- # AUTH REQUEST #----------------------------------------------------------------------- # initialize:user_id{initialize_key} -> get user_name and user_key # key_auth:$base64_enc_key #user_key -> get user_name and session_token with pin # force_user:$external_auth_user -> overwrite APP user name, disabled this option as default #----------------------------------------------------------------------- # SESSION REQUEST #----------------------------------------------------------------------- # session_chk:$session_token -> get user_name and remote_addr # session_refresh:$session_token -> get user_name and new session token # session_persist:$session_token -> get user_name and new session token, and make symlink from new session to last session. # data_import_session:$session_token -> get user_name and new session token OPS \"ops\" command can be used for the several types of the operation. sudo /usr/local/small-shell/adm/ops action(L1).action(L2):target{param} commands #----------------------------------- # Show all user #----------------------------------- # ops ls.usr #----------------------------------- # User management for Base APP #----------------------------------- # ops add.usr:$user # ops initialize.usr:$user # ops del.usr:$user #----------------------------------- # User management for Scratch APP #----------------------------------- # ops add.usr:$user app:$app # ops del.usr:$user app:$app # ops initialize.usr:$user app:$app #----------------------------------- # Set or Get permission/attribute to Base APP user #----------------------------------- # ops set.attr:$user{ro} # ops set.attr:$user{rw} # ops set.attr:$user{$attribute_key=$param} # ops get.attr:$user #----------------------------------- # Set or Get permission/attribute to Scratch APP user #----------------------------------- # ops set.attr:$user{ro} app:$app # ops set.attr:$user{rw} app:$app # ops set.attr:$user{$attribute_key=$param} app:$app # ops get.attr:$user app:$app #----------------------------------- # Add tag for Base APP table #----------------------------------- # ops add.tag:$databox{$filter} # ops del.tag:$databox{$filter} #----------------------------------- # Add tag for Scratch APP table #----------------------------------- # ops add.tag:$databox{$filter} app:$app # ops del.tag:$databox{$filter} app:$app #------------------ # IP whitelisting #------------------ # ops set.IP #IP whitelisting Description of OPS command Param Description ls.usr show user list add.usr add user del.usr delete user initialize.usr initialize user key of Base APP, it could generate URL for initialization set.attr:$user{rw}, set.attr:$user{ro} set attribute to the user. rw is read write, ro is read only permission set.attr:$user{$attribute_key=$param} set external attribute to the user if needed get.attr:$user get all attribute of the user add.tag add tag (#search_word) to Base APP table del.tag delet tag (#search_word) from Base APP table app:$app change target from Base APP to Dedicated Scratch APP Add User for Base APP Following example is adding user name \"test\", \"test\" can initialize and get base64 key by accessing the URL that is generated by ops command sudo /usr/local/small-shell/adm/ops add.usr:test test successfully created ----------------------------------------------------------------- Key initializing & generating URL for test on Base APP is here ----------------------------------------------------------------- https://$server/cgi-bin/auth.base?initialize=*****fce76b37e4e93b7605022da52e6ccc26fd2,4c5a2ae68d20e530b4ce457c71eae42590135268e1fb933a945f7e188678ccf4 Add User for scratch APP Following example is adding user name \"test\", \"test\" can initialize and get base64 key by accessing the URL that is generated by ops command sudo /usr/local/small-shell/adm/ops add.usr:test app:${app} test successfully created Initialize url is here, please share this url to end user then he or she can generate a key to access Data box. https://$FAQDN/cgi-bin/auth?initialize=$hashtoken Logging Admin can check access log for audit purpose. audit log dir is here. 90 days log is stored as default. /usr/local/small-shell/users/audit If you want to change the retantion, please update del_log.sh directory. sudo vi /usr/local/small-shell/util/scripts/del_log.sh Change persistence option If you want to change option of persistence. you need to update code directly. target parameter is as following. IP_persistence: If this parameter set as \"yes\" and client IP address is changed, session will be gone. User_agent_persistence: If this parameter set as \"yes\" and client browser is changed, session will be gone. Base APP Need to update base and auth.base $ sudo vi /var/www/base --change option-- IP_persistence=\"no\" User_agent_persistence=\"yes\" ---------------- $ sudo vi /var/www/cgi-bin/auth.base --change option-- IP_persistence=\"no\" User_agent_persistence=\"yes\" ---------------- Scratch APP Need to update $app and auth.$app $ sudo vi /var/www/$app --change option-- IP_persistence=\"no\" User_agent_persistence=\"yes\" ---------------- $ sudo vi /var/www/cgi-bin/auth.$app --change option-- IP_persistence=\"no\" User_agent_persistence=\"yes\" ----------------","title":"Auth"},{"location":"auth_shell/#auth-shell-iam","text":"Auth shell is designed to be used for key based authentication and session management for WEB APPs.","title":"Auth Shell (IAM)"},{"location":"auth_shell/#base-64-key-auth","text":"Base64 key will be generated with accessing intialize URL. it will contain user_name and randome string. Because key length is long enough, we think it's secure. but please use Base APP with IP whitelisting and other security measure as well if possible.","title":"Base 64 key auth"},{"location":"auth_shell/#flow-of-standard-auth","text":"|--------| |--------| | | ------ BASE64key ----------> | | | client | | Server | | | <------ Session Hash ------- | | | | | | | | ------ Page req {Session} -> | | | | | | | | <------ Link {NEW Sesesion} - | | |--------| |--------| Note Base64 key will be sotred at localstorage on browser using random name per instance in the personal key initializing process.","title":"FLow of Standard Auth"},{"location":"auth_shell/#pin-and-session-token","text":"Session itself is temporary hash that will be generated using randome PIN (not stored anywhere) and user name. and session file will contain user name, client remote address and user-agent. Besides session hash will be changed when accessing new pages. Fraud access could be eliminated based on enough length of session key. also WEB APP will check change of IP address and user-agent.","title":"PIN and Session Token"},{"location":"auth_shell/#basic-authentication-binauth","text":"Basic authentication will be done bin/auth script. it will be used by Base APP mainly. # CLI sudo /usr/local/small-shell/bin/auth action:target{param}","title":"Basic Authentication (bin/auth)"},{"location":"auth_shell/#params","text":"# COMMON #----------------------------------------------------------------------- # remote_addr:ip_addr -> IP addreess will be used for audit log and security check # user_agent:HTTP_USER_AGENT -> HTTP_USER_AGENT will be used for security check #----------------------------------------------------------------------- # AUTH REQUEST #----------------------------------------------------------------------- # initialize:user_id{initialize_key} -> get user_name and user_key # key_auth:$base64_enc_key #user_key -> get user_name and session_token with pin #----------------------------------------------------------------------- # SESSION REQUEST #----------------------------------------------------------------------- # session_chk:$session_token -> get user_name and IP addr # session_refresh:$session_token -> get user_name and new session token # session_persist:$session_token -> get user_name and new session token, and make symlink from new session to last session. # data_import_session:$session_token -> get user_name and new session token # logout:$session_token","title":"params"},{"location":"auth_shell/#extension-auth","text":"Extension auth is used for authentication of scratch APP. # for Scratch App sudo /usr/local/small-shell/bin/extension_auth action:target{param} app:${app} #----------------------------------------------------------------------- # COMMON #----------------------------------------------------------------------- # remote_addr:ip_addr -> IP addreess will be used for audit log and security check # app:$app -> WEB app name for authentication #----------------------------------------------------------------------- # AUTH REQUEST #----------------------------------------------------------------------- # initialize:user_id{initialize_key} -> get user_name and user_key # key_auth:$base64_enc_key #user_key -> get user_name and session_token with pin # force_user:$external_auth_user -> overwrite APP user name, disabled this option as default #----------------------------------------------------------------------- # SESSION REQUEST #----------------------------------------------------------------------- # session_chk:$session_token -> get user_name and remote_addr # session_refresh:$session_token -> get user_name and new session token # session_persist:$session_token -> get user_name and new session token, and make symlink from new session to last session. # data_import_session:$session_token -> get user_name and new session token","title":"Extension auth"},{"location":"auth_shell/#ops","text":"\"ops\" command can be used for the several types of the operation. sudo /usr/local/small-shell/adm/ops action(L1).action(L2):target{param}","title":"OPS"},{"location":"auth_shell/#commands","text":"#----------------------------------- # Show all user #----------------------------------- # ops ls.usr #----------------------------------- # User management for Base APP #----------------------------------- # ops add.usr:$user # ops initialize.usr:$user # ops del.usr:$user #----------------------------------- # User management for Scratch APP #----------------------------------- # ops add.usr:$user app:$app # ops del.usr:$user app:$app # ops initialize.usr:$user app:$app #----------------------------------- # Set or Get permission/attribute to Base APP user #----------------------------------- # ops set.attr:$user{ro} # ops set.attr:$user{rw} # ops set.attr:$user{$attribute_key=$param} # ops get.attr:$user #----------------------------------- # Set or Get permission/attribute to Scratch APP user #----------------------------------- # ops set.attr:$user{ro} app:$app # ops set.attr:$user{rw} app:$app # ops set.attr:$user{$attribute_key=$param} app:$app # ops get.attr:$user app:$app #----------------------------------- # Add tag for Base APP table #----------------------------------- # ops add.tag:$databox{$filter} # ops del.tag:$databox{$filter} #----------------------------------- # Add tag for Scratch APP table #----------------------------------- # ops add.tag:$databox{$filter} app:$app # ops del.tag:$databox{$filter} app:$app #------------------ # IP whitelisting #------------------ # ops set.IP #IP whitelisting","title":"commands"},{"location":"auth_shell/#description-of-ops-command","text":"Param Description ls.usr show user list add.usr add user del.usr delete user initialize.usr initialize user key of Base APP, it could generate URL for initialization set.attr:$user{rw}, set.attr:$user{ro} set attribute to the user. rw is read write, ro is read only permission set.attr:$user{$attribute_key=$param} set external attribute to the user if needed get.attr:$user get all attribute of the user add.tag add tag (#search_word) to Base APP table del.tag delet tag (#search_word) from Base APP table app:$app change target from Base APP to Dedicated Scratch APP","title":"Description of OPS command"},{"location":"auth_shell/#add-user-for-base-app","text":"Following example is adding user name \"test\", \"test\" can initialize and get base64 key by accessing the URL that is generated by ops command sudo /usr/local/small-shell/adm/ops add.usr:test test successfully created ----------------------------------------------------------------- Key initializing & generating URL for test on Base APP is here ----------------------------------------------------------------- https://$server/cgi-bin/auth.base?initialize=*****fce76b37e4e93b7605022da52e6ccc26fd2,4c5a2ae68d20e530b4ce457c71eae42590135268e1fb933a945f7e188678ccf4","title":"Add User for Base APP"},{"location":"auth_shell/#add-user-for-scratch-app","text":"Following example is adding user name \"test\", \"test\" can initialize and get base64 key by accessing the URL that is generated by ops command sudo /usr/local/small-shell/adm/ops add.usr:test app:${app} test successfully created Initialize url is here, please share this url to end user then he or she can generate a key to access Data box. https://$FAQDN/cgi-bin/auth?initialize=$hashtoken","title":"Add User for scratch APP"},{"location":"auth_shell/#logging","text":"Admin can check access log for audit purpose. audit log dir is here. 90 days log is stored as default. /usr/local/small-shell/users/audit If you want to change the retantion, please update del_log.sh directory. sudo vi /usr/local/small-shell/util/scripts/del_log.sh","title":"Logging"},{"location":"auth_shell/#change-persistence-option","text":"If you want to change option of persistence. you need to update code directly. target parameter is as following. IP_persistence: If this parameter set as \"yes\" and client IP address is changed, session will be gone. User_agent_persistence: If this parameter set as \"yes\" and client browser is changed, session will be gone.","title":"Change persistence option"},{"location":"auth_shell/#base-app","text":"Need to update base and auth.base $ sudo vi /var/www/base --change option-- IP_persistence=\"no\" User_agent_persistence=\"yes\" ---------------- $ sudo vi /var/www/cgi-bin/auth.base --change option-- IP_persistence=\"no\" User_agent_persistence=\"yes\" ----------------","title":"Base APP"},{"location":"auth_shell/#scratch-app","text":"Need to update $app and auth.$app $ sudo vi /var/www/$app --change option-- IP_persistence=\"no\" User_agent_persistence=\"yes\" ---------------- $ sudo vi /var/www/cgi-bin/auth.$app --change option-- IP_persistence=\"no\" User_agent_persistence=\"yes\" ----------------","title":"Scratch APP"},{"location":"automation_tour/","text":"Extended cron small-shell can provide Job automation & data Exchagne function by extending cron function (e-cron). you can define job relationship between several hosts. you can also exchange DATA between several hosts. sudo /usr/local/small-shell/adm/gen -job Type of job (1.job automation | 2.file exchange) : 1 --Define schedule-- Month [ any | 1-12 ]: Date [ any | 1-31 ]: Hour [ any | 0-23 ]: Min [ any | 0-59 ]: Week [ any | mon - sun ]: Exec command or batch script: XXXX Required It's required to complete OS Env setup and installation of small-shell, see detail at Quickstart . Features e-cron has following features. Add job entry to cron through dialog Provide CLI status check tool Prevent double start of same job Logging job result and command dump Make relationship between jobs or hosts using messaing function Provide dataExchange platform between small-shell hosts Basic concept Basically e-cron extends cron function by providing utility scripts. and wrapper script will work as job management framework. following ideas are basic functions of e-cron. Dialog gen dialog -> generate cron entry Diagram cron -> wrapper.sh -> script #exec CLI <-> wrapper.sh <- script #result dir Please upload script on following directory. /usr/local/small-shell/util/scripts Add Job through e-cron This is an example of adding job through e-cron. also you can learn how to confirm reulst of the Job and dumped output of the Job or command. sample job sudo -u small-shell vi /usr/local/small-shell/util/scripts/job1.sh --code-- #!/bin/bash echo \"`date` Hello\" >> /usr/local/small-shell/util/scripts/log/hello.log exit 0 -------- sudo -u small-shell chmod 755 /usr/local/small-shell/util/scripts/job1.sh Automate Stand alone Job You can generate job by gen command. sudo /usr/local/small-shell/adm/gen -job # -> dialog will be started Following is an example of making job that will execuete script. it's just an examplem, you can execute any unix commands or any scripts. Dialog Job Name: job1 Type of job (1.job automation | 2.file exchange) : 1 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: any Hour [ any | 0-23 ]: any Min [ any | 0-59 ]: 1 Week [ any | mon - sun ]: any Exec command or batch script: job1.sh enabel/disable Job sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.$job sudo -u small-shell /usr/local/small-shell/bin/e-cron disable.$job (e.g.) sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.job1.sh confirm job definition sudo -u small-shell /usr/local/small-shell/bin/e-cron cat.job1.sh > JOB: job1 def:/usr/local/small-shell/util/e-cron/def/job1.def -------------SCHEDULE---------------- min: 1 hour: any date: any month: any week: any -------------DEFINITION---------------- exec_command=\"/home/ubuntu/job1.sh\" input_message=\"\" output_message=\"\" hubapi=\"\" authkey=\"\" confirm job list sudo -u small-shell /usr/local/small-shell/bin/e-cron ls -------------------------------------------------------------- job definition: /usr/local/small-shell/util/e-cron/def -------------------------------------------------------------- del_session.enabled del_util_log.enabled job1.enabled Exec job manually sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job1 confirm job result sudo -u small-shell /usr/local/small-shell/bin/e-cron stats -------------------------------------------------------- LATEST STATUS OF JOB -------------------------------------------------------- 2021-04-12 12:15:01 ls_tmp successfully completed cat /usr/local/small-shell/util/scripts/log/hello.log Mon Jan 3 04:10:23 UTC 2022 Hello confirm job log There are 2 types of the log. job_log is execution history, job_command_dump record output from script or command. ls /usr/local/small-shell/util/e-cron/log/joblog/*job1* /usr/local/small-shell/util/e-cron/log/joblog/job1_command_dump_20220103 /usr/local/small-shell/util/e-cron/log/joblog/job1_log_20220103 change Job setting sudo /usr/local/small-shell/adm/gen -job > then input existing job name in the dialog Job relation ship in same host If you want to define job relationship in same same host, please modify job definition directly. This is an exmaple of job relationship. messae wil be exchanged in the host. job1.success@host1 --> message (done.1) --> job2@host1 #if message is raedy, kicked ! Once message is grabed, message will be cleared sample job job1.sh sudo -u small-shell vi /usr/local/small-shell/util/scripts/job1.sh --code-- #!/bin/bash echo \"`date` Hello\" >> /usr/local/small-shell/util/scripts/log/hello.log exit 0 -------- sudo -u small-shell chmod 755 /usr/local/small-shell/util/scripts/job1.sh job2.sh sudo -u small-shell vi /usr/local/small-shell/util/scripts/job2.sh --code-- #!/bin/bash echo \"`date` World\" >> /usr/local/small-shell/util/scripts/log/world.log exit 0 -------- sudo -u small-shell chmod 755 /usr/local/small-shell/util/scripts/job2.sh Add job to small-shell and set message sudo /usr/local/small-shell/adm/gen -job #-> please create job1 on small-shell sudo -u small-shell vi /usr/local/small-shell/util/e-cron/def/job1.def ----------------------------------------------------------- SCHEDULE:1 * * * * exec_command=\"/usr/local/small-shell/util/scripts/job1.sh\" input_message=\"\" output_message=\"done.1\" hubapi=\"\" authkey=\"\" ----------------------------------------------------------- sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.job1 sudo /usr/local/small-shell/adm/gen -job #-> please create job2 on small-shell sudo -u small-shell vi /usr/local/small-shell/util/e-cron/def/job2.def ----------------------------------------------------------- SCHEDULE:2 * * * * exec_command=\"/usr/local/small-shell/util/scripts/job2.sh\" input_message=\"done.1\" output_message=\"\" hubapi=\"\" authkey=\"\" ----------------------------------------------------------- sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.job2 Exec job Then let's try to execute jobs. if you execute job2 first, job will not be started because message is not set by job1. # execute manually sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job2 #-> job will not be started. please exit Ctrl + C sudo -u small-shell /usr/local/small-shell/bin/e-cron stats.job2 -------------------------------------------------------- LATEST STATUS OF JOB filter: job2 -------------------------------------------------------- 2022-01-03 04:34:53 job2 INFO input_message_done.1_was_not_set # re-execute manually sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job1 sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job2 # confirm result sudo -u small-shell /usr/local/small-shell/bin/e-cron stats.job -------------------------------------------------------- LATEST STATUS OF JOB filter: job -------------------------------------------------------- 2022-01-03 04:38:38 job1 INFO ouput_message_done.1_pushed 2022-01-03 04:38:38 job1 successfully completed 2022-01-03 04:38:47 job2 successfully completed cat /usr/local/small-shell/util/scripts/log/hello.log Mon Jan 3 04:10:23 UTC 2022 Hello Mon Jan 3 04:38:38 UTC 2022 Hello cat /usr/local/small-shell/util/scripts/log/world.log Mon Jan 3 04:38:47 UTC 2022 World Job relationship between hosts If you will define relation ship between serveral hosts, you need to generate Base APP first on HUB server. #see APP shell tour for further details for Base APP. Once API HUB is ready, you can define job relationship using message. ----------------------------------------------- | API Server #MessageExchange | ----------------------------------------------- | GET/PUSH message #http/https protocol ----------------------------------------------- | Edge servers {hostsA,B,C,D} automated jobs | # jobs will be kicked once get message ----------------------------------------------- confirm base information at API HUB server @hub sudo cat /usr/local/small-shell/web/base | grep hubapi hubapi=\"http://ec2-**-**-**-**.com/cgi-bin/e-cron\" sudo cat /usr/local/small-shell/web/base | grep auth api_authkey=\"YXBpOmE2ODcyODI2MGZlOGRmOTEzZjNlMmUyYjM2YzlmZD****\" Update job definition at each hosts In this exmaple, hostB job2 will be kicked, once got message from hostA job1 through API HUB. job1.success@hostA ---> message (done.1) --> job2@hostB #if message is raedy, kicked sample job job1.sh@hostA sudo -u small-shell vi /usr/local/small-shell/util/scripts/job1.sh --code-- #!/bin/bash echo \"`date` Hello\" >> /usr/local/small-shell/util/scripts/log/hello.log exit 0 -------- sudo -u small-shell chmod 755 /usr/local/small-shell/util/scripts/job1.sh job2.sh@hostB sudo -u small-shell vi /usr/local/small-shell/util/scripts/job2.sh --code-- #!/bin/bash echo \"`date` World\" >> /usr/local/small-shell/util/scripts/log/world.log exit 0 -------- sudo -u small-shell chmod 755 /usr/local/small-shell/util/scripts/job2.sh Add job to small-shell and set message @hostA sudo /usr/local/small-shell/adm/gen -job #-> please create job2 sudo vi /usr/local/small-shell/util/e-cron/def/job1.def ----------------------------------------------------------- SCHEDULE:1 * * * * exec_command=\"/usr/local/small-shell/util/scripts/job1.sh\" input_message=\"\" output_message=\"done.1\" #modify hubapi=\"https://ec2-**-**-**-**.com/cgi-bin/e-cron\" #modify api_authkey=\"YXBpOmQ1NmZmYzEwZDI4NDVlN2EyZGFjZjcwYTRhOGRjM2QzMWM1YWE1NDQK\" #modify ----------------------------------------------------------- sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.job1 #-> please enable ls_tmp job acordingly @hostB sudo /usr/local/small-shell/adm/gen -job #-> please create job2 sudo vi /usr/local/small-shell/util/e-cron/def/job2.def ----------------------------------------------------------- CHEDULE:2 * * * * exec_command=\"/usr/local/small-shell/util/scripts/job2.sh\" input_message=\"done.1\" output_message=\"\" hubapi=\"https://ec2-**-**-**-**.com/cgi-bin/e-cron\" #modify authkey=\"YXBpOmQ1NmZmYzEwZDI4NDVlN2EyZGFjZjcwYTRhOGRjM2QzMWM1YWE1NDQK\" #modify ----------------------------------------------------------- sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.job2 #-> please enable ls_tmp2 job acordingly Execute manually and confirm result Then let's try to execute jobs. if you execute job2@hostB first, job will not be started because message is not set by job1. @hostB sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job2 #-> job will not be started more than 1 minutes. then please exit Ctrl + C sudo -u small-shell /usr/local/small-shell/bin/e-cron stat.job2 -------------------------------------------------------- LATEST STATUS OF JOB filter: job2 2022-01-07 14:18:12 job2 INFO input_message_done.1_was_not_set @hostA sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job1 @hostB sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job2 sudo -u small-shell /usr/local/small-shell/bin/e-cron stat -------------------------------------------------------- LATEST STATUS OF JOB filter: job2 -------------------------------------------------------- 2022-01-07 14:19:12 job2 successfully completed DATA (file) exchange e-cron can be dataExchange platform between several hosets . dataExchange also needs Base APP, please genenerate it on HUB server beforehand. #see APP shell tour for further details. Once API HUB is ready, you can push or get the data through the HUB. --------------------------------- | API Server #DataExchange | HUB dir: /usr/local/small-shell/util/e-cron/que/file --------------------------------- | | (http/https) | Edge servers {hostsA,B,C,D} # push or get files through HUB confirm base information at API HUB server @hub sudo cat /usr/local/small-shell/web/base | grep hubapi hubapi=\"https://ec2-**-**-**-**.com/cgi-bin/e-cron\" sudo cat /usr/local/small-shell/web/base | grep auth api_authkey=\"YXBpOmE2ODcyODI2MGZlOGRmOTEzZjNlMmUyYjM2YzlmZD****\" DataExchange Job This is exmpale of exchange dummy file from host1 to host2 through HUB API. # data_push@hostA ---> dummy file ---> data_get@hostB ! file will not be cleared even if it's synced to other hosts Job for pushing file This is exmaple of generating job that will push dummy.log to HUB API server. sudo /usr/local/small-shell/adm/gen -job # -> diarlog will be started generate file exchange job Note Please use \"*\" to file name if you want to upload or download several files at one. e.g.) access.log* @hostA # generate job sudo /usr/local/small-shell/adm/gen -job Job Name: data_push Type of job (1.job automation | 2.file exchange) : 2 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: 1 Hour [ any | 0-23 ]: 1 Min [ any | 0-59 ]: 0 Week [ any | mon - sun ]: any Type of file exchange (push | get): push local directory: /tmp file_name: dummy* HUB API URL: https://ec2-**-**-**-**.com/cgi-bin/e-cron API authkey: YXBpOmE2ODcyODI2MGZlOGRmOTEzZjNlMmUyYjM2YzlmZD**** # enable job sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.data_push @hostB # generate job sudo /usr/local/small-shell/adm/gen -job Job Name: data_get Type of job (1.job automation | 2.file exchange) : 2 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: 1 Hour [ any | 0-23 ]: 0 Min [ any | 0-59 ]: 2 Week [ any | mon - sun ]: any Type of file exchange (push | get): get local directory: /tmp file_name: dummy* HUB API URL: https://ec2-**-**-**-**.com/cgi-bin/e-cron API authkey: YXBpOmE2ODcyODI2MGZlOGRmOTEzZjNlMmUyYjM2YzlmZD**** # enable job sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.data_get Execute manually Create dummy file @hostA # create dummy file echo \"dummy\" > /tmp/dummy1 echo \"dummy\" > /tmp/dummy2 echo \"dummy\" > /tmp/dummy3 Push data to HUB # push manually sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.data_push dummy #data is synced to Confirm file at HUB server @hub ls /usr/local/small-shell/util/e-cron/que/file/ dummy1 dummy2 dummy3 Get data from HUB # get manually @hostB sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.data_get ls /tmp/dummy* dummy1 dummy2 dummy3 #data is synced to local dir Note Once it's downloaded, file will be gone. General queing You can pass parameters using general que to the script that will be executed by e-cron. This function is useful for such like sending mails. queing dir dir: /usr/local/small-shell/util/que/common function Script can load parameters that is in the que file. For examaple mailque contain subjects, mailto, mailfrom, contents. push -> que: mail -> mail[ subject=\"XXX\", mailto=\"XXX\", mailfrom=\"XXX\", contetns=\"XXX\" ].randomID script <- wrapper {que: mail} <- mail[ subject=\"XXX\", mailto=\"XXX\", mailfrom=\"XXX\", contetns=\"XXX\" ].randomID.load Push mail que # send mail que to e-cron batch session=\"`date +%s`.$RANDOM\" mkdir /tmp/$session echo \"subject=\\\"test1\\\"\" > /tmp/$session/mail echo \"mailto=\\\"to@***.com\\\"\" >> /tmp/$session/mail echo \"mailfrom=\\\"from@***.com\\\"\" >> /tmp/$session/mail echo \"contents=\\\"test1\\\"\" >> /tmp/$session/mail echo \"subject=\\\"test2\\\"\" > /tmp/$session/mail echo \"mailto=\\\"to@***.com\\\"\" >> /tmp/$session/mail echo \"mailfrom=\\\"from@***.com\\\"\" >> /tmp/$session/mail echo \"contents=\\\"test2\\\"\" >> /tmp/$session/mail sudo -u small-shell /usr/local/small-shell/bin/e-cron push.que:/tmp/$session/mail #->>pushed successfully rm -rf /tmp/$session Note Plese setup MTA and mail command beforehand by yourself. Create mail batch sudo vi /usr/local/small-shell/util/scripts/send_mail --code-- #!/bin/bash # load params from que mailto=\"$1\" mailfrom=\"$2\" subject=\"$3\" contents=\"$4\" # send mail echo \"$contents\" | mail -s \"$subject\" -r $mailfrom $mailto ------- Add batch to e-cron automation chowm small-shell:small-shell /usr/local/small-shell/util/scripts/send_mail chmod 755 /usr/local/small-shell/util/scripts/send_mail # ADD AUTOMATION JOB sudo /usr/local/small-shell/adm/gen -job #-> diaglog start job name: mailq Type of job (1.job automation | 2.file exchange) : 1 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: any Hour [ any | 0-23 ]: any Min [ any | 0-59 ]: any Week [ any | mon - sun ]: any Exec command or batch script: send_mail \"$mailto\" \"$mailfrom\" \"$subject\" \"$contents\" #-> dialog end # update def sudo vi /usr/local/small-shell/util/e-cron/def/mailq.def --code-- SCHEDULE:* * * * * exec_command=\"/usr/local/small-shell/util/scripts/send_mail \\\"$mailto\\\" \\\"$mailfrom\\\" \\\"$subject\\\" \\\"$contents\\\"\" input_message=\"\" output_message=\"\" hubapi=\"\" authkey=\"\" # add manually que=\"mail\" -------- enable job sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.mailq Check log tail -f /usr/local/small-shell/util/e-cron/log/joblog/mailq_command_dump_20210918 2021-09-18 01:28:01 /usr/local/small-shell/util/scripts/send_mail \"to@***.com\" \"from@***.com\" \"test1\" \"test1\" executed 2021-09-18 01:28:01 /usr/local/small-shell/util/scripts/send_mail \"to@***.com\" \"from@***.com\" \"test2\" \"test2\" executed bin/e-cron e-cron must be executed as small-shell permission sudo -u small-shell /usr/local/small-shell/bin/e-cron param description usage cat.$job show job definition e-cron cat.jobA stat show job status e-cron stat stat.$filter show filtered job status e-cron stat.ERROR ls show job list e-cron ls enable.$job enable job e-cron enable.jobA disable.$job disable job e-cron disable.jobA exec.$job execute job manually e-cron exec.jobA clear.$job clear job status e-cron clear.jobA Util scripts for e-cron Util scripts are provided on following directory. ls /usr/local/small-shell/util/scripts Usage is written in the shell header. please check more command. bat_import.sh # import datasets as batch job del_datasets.sh # delete datasets as batch job del_log.sh # delete log of e-cron del_job.sh # delete job of e-cron del_session.sh # delete session of DATA shell del_statistics.sh # delete statistics of pyshell countup.sh # please see detail at pyshell tour sumup.sh # please see detail at pyshell tour Verified environment API server OS: Utuntu 2X (recommnded), Debian 1X, macOS Monterey, CentOS 7, RHEL 8 bash: 4.X curl: 7.X IoT Edge OS: raspberrypi 4.X","title":"E-cron (Automate & dataExchange)"},{"location":"automation_tour/#extended-cron","text":"small-shell can provide Job automation & data Exchagne function by extending cron function (e-cron). you can define job relationship between several hosts. you can also exchange DATA between several hosts. sudo /usr/local/small-shell/adm/gen -job Type of job (1.job automation | 2.file exchange) : 1 --Define schedule-- Month [ any | 1-12 ]: Date [ any | 1-31 ]: Hour [ any | 0-23 ]: Min [ any | 0-59 ]: Week [ any | mon - sun ]: Exec command or batch script: XXXX","title":"Extended cron"},{"location":"automation_tour/#required","text":"It's required to complete OS Env setup and installation of small-shell, see detail at Quickstart .","title":"Required"},{"location":"automation_tour/#features","text":"e-cron has following features. Add job entry to cron through dialog Provide CLI status check tool Prevent double start of same job Logging job result and command dump Make relationship between jobs or hosts using messaing function Provide dataExchange platform between small-shell hosts","title":"Features"},{"location":"automation_tour/#basic-concept","text":"Basically e-cron extends cron function by providing utility scripts. and wrapper script will work as job management framework. following ideas are basic functions of e-cron.","title":"Basic concept"},{"location":"automation_tour/#dialog","text":"gen dialog -> generate cron entry","title":"Dialog"},{"location":"automation_tour/#diagram","text":"cron -> wrapper.sh -> script #exec CLI <-> wrapper.sh <- script #result","title":"Diagram"},{"location":"automation_tour/#dir","text":"Please upload script on following directory. /usr/local/small-shell/util/scripts","title":"dir"},{"location":"automation_tour/#add-job-through-e-cron","text":"This is an example of adding job through e-cron. also you can learn how to confirm reulst of the Job and dumped output of the Job or command.","title":"Add Job through e-cron"},{"location":"automation_tour/#sample-job","text":"sudo -u small-shell vi /usr/local/small-shell/util/scripts/job1.sh --code-- #!/bin/bash echo \"`date` Hello\" >> /usr/local/small-shell/util/scripts/log/hello.log exit 0 -------- sudo -u small-shell chmod 755 /usr/local/small-shell/util/scripts/job1.sh","title":"sample job"},{"location":"automation_tour/#automate-stand-alone-job","text":"You can generate job by gen command. sudo /usr/local/small-shell/adm/gen -job # -> dialog will be started Following is an example of making job that will execuete script. it's just an examplem, you can execute any unix commands or any scripts.","title":"Automate Stand alone Job"},{"location":"automation_tour/#dialog_1","text":"Job Name: job1 Type of job (1.job automation | 2.file exchange) : 1 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: any Hour [ any | 0-23 ]: any Min [ any | 0-59 ]: 1 Week [ any | mon - sun ]: any Exec command or batch script: job1.sh","title":"Dialog"},{"location":"automation_tour/#enabeldisable-job","text":"sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.$job sudo -u small-shell /usr/local/small-shell/bin/e-cron disable.$job (e.g.) sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.job1.sh","title":"enabel/disable Job"},{"location":"automation_tour/#confirm-job-definition","text":"sudo -u small-shell /usr/local/small-shell/bin/e-cron cat.job1.sh > JOB: job1 def:/usr/local/small-shell/util/e-cron/def/job1.def -------------SCHEDULE---------------- min: 1 hour: any date: any month: any week: any -------------DEFINITION---------------- exec_command=\"/home/ubuntu/job1.sh\" input_message=\"\" output_message=\"\" hubapi=\"\" authkey=\"\"","title":"confirm job definition"},{"location":"automation_tour/#confirm-job-list","text":"sudo -u small-shell /usr/local/small-shell/bin/e-cron ls -------------------------------------------------------------- job definition: /usr/local/small-shell/util/e-cron/def -------------------------------------------------------------- del_session.enabled del_util_log.enabled job1.enabled","title":"confirm job list"},{"location":"automation_tour/#exec-job-manually","text":"sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job1","title":"Exec job manually"},{"location":"automation_tour/#confirm-job-result","text":"sudo -u small-shell /usr/local/small-shell/bin/e-cron stats -------------------------------------------------------- LATEST STATUS OF JOB -------------------------------------------------------- 2021-04-12 12:15:01 ls_tmp successfully completed cat /usr/local/small-shell/util/scripts/log/hello.log Mon Jan 3 04:10:23 UTC 2022 Hello","title":"confirm job result"},{"location":"automation_tour/#confirm-job-log","text":"There are 2 types of the log. job_log is execution history, job_command_dump record output from script or command. ls /usr/local/small-shell/util/e-cron/log/joblog/*job1* /usr/local/small-shell/util/e-cron/log/joblog/job1_command_dump_20220103 /usr/local/small-shell/util/e-cron/log/joblog/job1_log_20220103","title":"confirm job log"},{"location":"automation_tour/#change-job-setting","text":"sudo /usr/local/small-shell/adm/gen -job > then input existing job name in the dialog","title":"change Job setting"},{"location":"automation_tour/#job-relation-ship-in-same-host","text":"If you want to define job relationship in same same host, please modify job definition directly. This is an exmaple of job relationship. messae wil be exchanged in the host. job1.success@host1 --> message (done.1) --> job2@host1 #if message is raedy, kicked ! Once message is grabed, message will be cleared","title":"Job relation ship in same host"},{"location":"automation_tour/#sample-job_1","text":"","title":"sample job"},{"location":"automation_tour/#job1sh","text":"sudo -u small-shell vi /usr/local/small-shell/util/scripts/job1.sh --code-- #!/bin/bash echo \"`date` Hello\" >> /usr/local/small-shell/util/scripts/log/hello.log exit 0 -------- sudo -u small-shell chmod 755 /usr/local/small-shell/util/scripts/job1.sh","title":"job1.sh"},{"location":"automation_tour/#job2sh","text":"sudo -u small-shell vi /usr/local/small-shell/util/scripts/job2.sh --code-- #!/bin/bash echo \"`date` World\" >> /usr/local/small-shell/util/scripts/log/world.log exit 0 -------- sudo -u small-shell chmod 755 /usr/local/small-shell/util/scripts/job2.sh","title":"job2.sh"},{"location":"automation_tour/#add-job-to-small-shell-and-set-message","text":"sudo /usr/local/small-shell/adm/gen -job #-> please create job1 on small-shell sudo -u small-shell vi /usr/local/small-shell/util/e-cron/def/job1.def ----------------------------------------------------------- SCHEDULE:1 * * * * exec_command=\"/usr/local/small-shell/util/scripts/job1.sh\" input_message=\"\" output_message=\"done.1\" hubapi=\"\" authkey=\"\" ----------------------------------------------------------- sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.job1 sudo /usr/local/small-shell/adm/gen -job #-> please create job2 on small-shell sudo -u small-shell vi /usr/local/small-shell/util/e-cron/def/job2.def ----------------------------------------------------------- SCHEDULE:2 * * * * exec_command=\"/usr/local/small-shell/util/scripts/job2.sh\" input_message=\"done.1\" output_message=\"\" hubapi=\"\" authkey=\"\" ----------------------------------------------------------- sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.job2","title":"Add job to small-shell and set message"},{"location":"automation_tour/#exec-job","text":"Then let's try to execute jobs. if you execute job2 first, job will not be started because message is not set by job1. # execute manually sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job2 #-> job will not be started. please exit Ctrl + C sudo -u small-shell /usr/local/small-shell/bin/e-cron stats.job2 -------------------------------------------------------- LATEST STATUS OF JOB filter: job2 -------------------------------------------------------- 2022-01-03 04:34:53 job2 INFO input_message_done.1_was_not_set # re-execute manually sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job1 sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job2 # confirm result sudo -u small-shell /usr/local/small-shell/bin/e-cron stats.job -------------------------------------------------------- LATEST STATUS OF JOB filter: job -------------------------------------------------------- 2022-01-03 04:38:38 job1 INFO ouput_message_done.1_pushed 2022-01-03 04:38:38 job1 successfully completed 2022-01-03 04:38:47 job2 successfully completed cat /usr/local/small-shell/util/scripts/log/hello.log Mon Jan 3 04:10:23 UTC 2022 Hello Mon Jan 3 04:38:38 UTC 2022 Hello cat /usr/local/small-shell/util/scripts/log/world.log Mon Jan 3 04:38:47 UTC 2022 World","title":"Exec job"},{"location":"automation_tour/#job-relationship-between-hosts","text":"If you will define relation ship between serveral hosts, you need to generate Base APP first on HUB server. #see APP shell tour for further details for Base APP. Once API HUB is ready, you can define job relationship using message. ----------------------------------------------- | API Server #MessageExchange | ----------------------------------------------- | GET/PUSH message #http/https protocol ----------------------------------------------- | Edge servers {hostsA,B,C,D} automated jobs | # jobs will be kicked once get message -----------------------------------------------","title":"Job relationship between hosts"},{"location":"automation_tour/#confirm-base-information-at-api-hub-server","text":"","title":"confirm base information at API HUB server"},{"location":"automation_tour/#hub","text":"sudo cat /usr/local/small-shell/web/base | grep hubapi hubapi=\"http://ec2-**-**-**-**.com/cgi-bin/e-cron\" sudo cat /usr/local/small-shell/web/base | grep auth api_authkey=\"YXBpOmE2ODcyODI2MGZlOGRmOTEzZjNlMmUyYjM2YzlmZD****\"","title":"@hub"},{"location":"automation_tour/#update-job-definition-at-each-hosts","text":"In this exmaple, hostB job2 will be kicked, once got message from hostA job1 through API HUB. job1.success@hostA ---> message (done.1) --> job2@hostB #if message is raedy, kicked","title":"Update job definition at each hosts"},{"location":"automation_tour/#sample-job_2","text":"","title":"sample job"},{"location":"automation_tour/#job1shhosta","text":"sudo -u small-shell vi /usr/local/small-shell/util/scripts/job1.sh --code-- #!/bin/bash echo \"`date` Hello\" >> /usr/local/small-shell/util/scripts/log/hello.log exit 0 -------- sudo -u small-shell chmod 755 /usr/local/small-shell/util/scripts/job1.sh","title":"job1.sh@hostA"},{"location":"automation_tour/#job2shhostb","text":"sudo -u small-shell vi /usr/local/small-shell/util/scripts/job2.sh --code-- #!/bin/bash echo \"`date` World\" >> /usr/local/small-shell/util/scripts/log/world.log exit 0 -------- sudo -u small-shell chmod 755 /usr/local/small-shell/util/scripts/job2.sh","title":"job2.sh@hostB"},{"location":"automation_tour/#add-job-to-small-shell-and-set-message_1","text":"@hostA sudo /usr/local/small-shell/adm/gen -job #-> please create job2 sudo vi /usr/local/small-shell/util/e-cron/def/job1.def ----------------------------------------------------------- SCHEDULE:1 * * * * exec_command=\"/usr/local/small-shell/util/scripts/job1.sh\" input_message=\"\" output_message=\"done.1\" #modify hubapi=\"https://ec2-**-**-**-**.com/cgi-bin/e-cron\" #modify api_authkey=\"YXBpOmQ1NmZmYzEwZDI4NDVlN2EyZGFjZjcwYTRhOGRjM2QzMWM1YWE1NDQK\" #modify ----------------------------------------------------------- sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.job1 #-> please enable ls_tmp job acordingly @hostB sudo /usr/local/small-shell/adm/gen -job #-> please create job2 sudo vi /usr/local/small-shell/util/e-cron/def/job2.def ----------------------------------------------------------- CHEDULE:2 * * * * exec_command=\"/usr/local/small-shell/util/scripts/job2.sh\" input_message=\"done.1\" output_message=\"\" hubapi=\"https://ec2-**-**-**-**.com/cgi-bin/e-cron\" #modify authkey=\"YXBpOmQ1NmZmYzEwZDI4NDVlN2EyZGFjZjcwYTRhOGRjM2QzMWM1YWE1NDQK\" #modify ----------------------------------------------------------- sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.job2 #-> please enable ls_tmp2 job acordingly","title":"Add job to small-shell and set message"},{"location":"automation_tour/#execute-manually-and-confirm-result","text":"Then let's try to execute jobs. if you execute job2@hostB first, job will not be started because message is not set by job1. @hostB sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job2 #-> job will not be started more than 1 minutes. then please exit Ctrl + C sudo -u small-shell /usr/local/small-shell/bin/e-cron stat.job2 -------------------------------------------------------- LATEST STATUS OF JOB filter: job2 2022-01-07 14:18:12 job2 INFO input_message_done.1_was_not_set @hostA sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job1 @hostB sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.job2 sudo -u small-shell /usr/local/small-shell/bin/e-cron stat -------------------------------------------------------- LATEST STATUS OF JOB filter: job2 -------------------------------------------------------- 2022-01-07 14:19:12 job2 successfully completed","title":"Execute manually and confirm result"},{"location":"automation_tour/#data-file-exchange","text":"e-cron can be dataExchange platform between several hosets . dataExchange also needs Base APP, please genenerate it on HUB server beforehand. #see APP shell tour for further details. Once API HUB is ready, you can push or get the data through the HUB. --------------------------------- | API Server #DataExchange | HUB dir: /usr/local/small-shell/util/e-cron/que/file --------------------------------- | | (http/https) | Edge servers {hostsA,B,C,D} # push or get files through HUB","title":"DATA (file) exchange"},{"location":"automation_tour/#confirm-base-information-at-api-hub-server_1","text":"","title":"confirm base information at API HUB server"},{"location":"automation_tour/#hub_1","text":"sudo cat /usr/local/small-shell/web/base | grep hubapi hubapi=\"https://ec2-**-**-**-**.com/cgi-bin/e-cron\" sudo cat /usr/local/small-shell/web/base | grep auth api_authkey=\"YXBpOmE2ODcyODI2MGZlOGRmOTEzZjNlMmUyYjM2YzlmZD****\"","title":"@hub"},{"location":"automation_tour/#dataexchange-job","text":"This is exmpale of exchange dummy file from host1 to host2 through HUB API. # data_push@hostA ---> dummy file ---> data_get@hostB ! file will not be cleared even if it's synced to other hosts","title":"DataExchange Job"},{"location":"automation_tour/#job-for-pushing-file","text":"This is exmaple of generating job that will push dummy.log to HUB API server. sudo /usr/local/small-shell/adm/gen -job # -> diarlog will be started","title":"Job for pushing file"},{"location":"automation_tour/#generate-file-exchange-job","text":"Note Please use \"*\" to file name if you want to upload or download several files at one. e.g.) access.log* @hostA # generate job sudo /usr/local/small-shell/adm/gen -job Job Name: data_push Type of job (1.job automation | 2.file exchange) : 2 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: 1 Hour [ any | 0-23 ]: 1 Min [ any | 0-59 ]: 0 Week [ any | mon - sun ]: any Type of file exchange (push | get): push local directory: /tmp file_name: dummy* HUB API URL: https://ec2-**-**-**-**.com/cgi-bin/e-cron API authkey: YXBpOmE2ODcyODI2MGZlOGRmOTEzZjNlMmUyYjM2YzlmZD**** # enable job sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.data_push @hostB # generate job sudo /usr/local/small-shell/adm/gen -job Job Name: data_get Type of job (1.job automation | 2.file exchange) : 2 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: 1 Hour [ any | 0-23 ]: 0 Min [ any | 0-59 ]: 2 Week [ any | mon - sun ]: any Type of file exchange (push | get): get local directory: /tmp file_name: dummy* HUB API URL: https://ec2-**-**-**-**.com/cgi-bin/e-cron API authkey: YXBpOmE2ODcyODI2MGZlOGRmOTEzZjNlMmUyYjM2YzlmZD**** # enable job sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.data_get","title":"generate file exchange job"},{"location":"automation_tour/#execute-manually","text":"","title":"Execute manually"},{"location":"automation_tour/#create-dummy-file","text":"@hostA # create dummy file echo \"dummy\" > /tmp/dummy1 echo \"dummy\" > /tmp/dummy2 echo \"dummy\" > /tmp/dummy3","title":"Create dummy file"},{"location":"automation_tour/#push-data-to-hub","text":"# push manually sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.data_push dummy #data is synced to","title":"Push data to HUB"},{"location":"automation_tour/#confirm-file-at-hub-server","text":"@hub ls /usr/local/small-shell/util/e-cron/que/file/ dummy1 dummy2 dummy3","title":"Confirm file at HUB server"},{"location":"automation_tour/#get-data-from-hub","text":"# get manually @hostB sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.data_get ls /tmp/dummy* dummy1 dummy2 dummy3 #data is synced to local dir Note Once it's downloaded, file will be gone.","title":"Get data from HUB"},{"location":"automation_tour/#general-queing","text":"You can pass parameters using general que to the script that will be executed by e-cron. This function is useful for such like sending mails.","title":"General queing"},{"location":"automation_tour/#queing-dir","text":"dir: /usr/local/small-shell/util/que/common","title":"queing dir"},{"location":"automation_tour/#function","text":"Script can load parameters that is in the que file. For examaple mailque contain subjects, mailto, mailfrom, contents. push -> que: mail -> mail[ subject=\"XXX\", mailto=\"XXX\", mailfrom=\"XXX\", contetns=\"XXX\" ].randomID script <- wrapper {que: mail} <- mail[ subject=\"XXX\", mailto=\"XXX\", mailfrom=\"XXX\", contetns=\"XXX\" ].randomID.load","title":"function"},{"location":"automation_tour/#push-mail-que","text":"# send mail que to e-cron batch session=\"`date +%s`.$RANDOM\" mkdir /tmp/$session echo \"subject=\\\"test1\\\"\" > /tmp/$session/mail echo \"mailto=\\\"to@***.com\\\"\" >> /tmp/$session/mail echo \"mailfrom=\\\"from@***.com\\\"\" >> /tmp/$session/mail echo \"contents=\\\"test1\\\"\" >> /tmp/$session/mail echo \"subject=\\\"test2\\\"\" > /tmp/$session/mail echo \"mailto=\\\"to@***.com\\\"\" >> /tmp/$session/mail echo \"mailfrom=\\\"from@***.com\\\"\" >> /tmp/$session/mail echo \"contents=\\\"test2\\\"\" >> /tmp/$session/mail sudo -u small-shell /usr/local/small-shell/bin/e-cron push.que:/tmp/$session/mail #->>pushed successfully rm -rf /tmp/$session Note Plese setup MTA and mail command beforehand by yourself.","title":"Push mail que"},{"location":"automation_tour/#create-mail-batch","text":"sudo vi /usr/local/small-shell/util/scripts/send_mail --code-- #!/bin/bash # load params from que mailto=\"$1\" mailfrom=\"$2\" subject=\"$3\" contents=\"$4\" # send mail echo \"$contents\" | mail -s \"$subject\" -r $mailfrom $mailto -------","title":"Create mail batch"},{"location":"automation_tour/#add-batch-to-e-cron-automation","text":"chowm small-shell:small-shell /usr/local/small-shell/util/scripts/send_mail chmod 755 /usr/local/small-shell/util/scripts/send_mail # ADD AUTOMATION JOB sudo /usr/local/small-shell/adm/gen -job #-> diaglog start job name: mailq Type of job (1.job automation | 2.file exchange) : 1 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: any Hour [ any | 0-23 ]: any Min [ any | 0-59 ]: any Week [ any | mon - sun ]: any Exec command or batch script: send_mail \"$mailto\" \"$mailfrom\" \"$subject\" \"$contents\" #-> dialog end # update def sudo vi /usr/local/small-shell/util/e-cron/def/mailq.def --code-- SCHEDULE:* * * * * exec_command=\"/usr/local/small-shell/util/scripts/send_mail \\\"$mailto\\\" \\\"$mailfrom\\\" \\\"$subject\\\" \\\"$contents\\\"\" input_message=\"\" output_message=\"\" hubapi=\"\" authkey=\"\" # add manually que=\"mail\" --------","title":"Add batch to e-cron automation"},{"location":"automation_tour/#enable-job","text":"sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.mailq","title":"enable job"},{"location":"automation_tour/#check-log","text":"tail -f /usr/local/small-shell/util/e-cron/log/joblog/mailq_command_dump_20210918 2021-09-18 01:28:01 /usr/local/small-shell/util/scripts/send_mail \"to@***.com\" \"from@***.com\" \"test1\" \"test1\" executed 2021-09-18 01:28:01 /usr/local/small-shell/util/scripts/send_mail \"to@***.com\" \"from@***.com\" \"test2\" \"test2\" executed","title":"Check log"},{"location":"automation_tour/#bine-cron","text":"e-cron must be executed as small-shell permission sudo -u small-shell /usr/local/small-shell/bin/e-cron param description usage cat.$job show job definition e-cron cat.jobA stat show job status e-cron stat stat.$filter show filtered job status e-cron stat.ERROR ls show job list e-cron ls enable.$job enable job e-cron enable.jobA disable.$job disable job e-cron disable.jobA exec.$job execute job manually e-cron exec.jobA clear.$job clear job status e-cron clear.jobA","title":"bin/e-cron"},{"location":"automation_tour/#util-scripts-for-e-cron","text":"Util scripts are provided on following directory. ls /usr/local/small-shell/util/scripts Usage is written in the shell header. please check more command. bat_import.sh # import datasets as batch job del_datasets.sh # delete datasets as batch job del_log.sh # delete log of e-cron del_job.sh # delete job of e-cron del_session.sh # delete session of DATA shell del_statistics.sh # delete statistics of pyshell countup.sh # please see detail at pyshell tour sumup.sh # please see detail at pyshell tour","title":"Util scripts for e-cron"},{"location":"automation_tour/#verified-environment","text":"API server OS: Utuntu 2X (recommnded), Debian 1X, macOS Monterey, CentOS 7, RHEL 8 bash: 4.X curl: 7.X IoT Edge OS: raspberrypi 4.X","title":"Verified environment"},{"location":"cook_book/","text":"Cook book In this course, you can learn how utilize APPs { Base APP, Scratch APP, Form } and also you can check utilitise such like ssl cert deployment automation, replication, backup and so on. Cook prototype APP In this prototype APP construction work, these APPs in following chart will be created. Name Type Databox User Purpose - Base APP ALL Admin Manage ALL data as admin #need key authentication book_search Scratch APP book.master End user Allow limitted access to the master data location_search Sub APP of book_search book.res End user Allow limitted access to the resource and location data booking_req Form request.db End user Provide request Form to end user Here is sample code of above APPs. it will be explained step by step in this section. Create Databox 3 databoxes will be used for the prototype APP. \"book.master\" will be master data of book information, \"book.res\" is resource information including location information each resource, and \"request.db\" is databox for putting request from end user. # db relation book.master <-reference- book.res <--reference-- request.db # detail 1. book.master { name: text, isbn: num, author: text, category: select, desciption: textarea, available: checkbox} 2. book.res { hashid, name: pdls(book.master), location: select, status: select} 3. request.db { hashid, requester: text, email: email, book_name: text, status: select, book_resource: pdls(book.res), message: textarea } Import databox Import databox, using db.def cd $HOME git clone https://github.com/21it-org/21it.git cd 21it/templates/cookbook/def sudo /usr/local/small-shell/util/scripts/bat_gen.sh ./book_master.def sudo /usr/local/small-shell/util/scripts/bat_gen.sh ./book_res.def sudo /usr/local/small-shell/util/scripts/bat_gen.sh ./request.db.def Launch Base APP Launch Base APP by refering to Quick start $ sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 #-> Dialog will be started, for making Base APP Create scratch APP Once databoxes and Base APP is created, let's move on to create APPs. Create Main APP $ sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 3 APP Name: book_search Type of Authentication (1.shared pass | 2.user key | 3.other | 4.none): 4 Primary databox: book.master Add sub APP Add databox to Main APP by utilizing sub APP. this sub APP is used for searching book resource and location. $ sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 3 APP Name: location_search@book_search Subapp databox: book.res Cook APP Once APPs are generated, let's modify them 1 by 1. you can check sample code as reference update portal Portal page of book_search can be editted by both markdown grammer and legacy HTML tag, detail is in Cook portal page section. you can also update menu of book_search on the Base APP. Insert code to description In this prototype APP, very simple description is written on the portal as below. it's using both HTML tag and markdown. <h1>This is book search APP. you can search and request book for lending on this APP.</h1> STEP1: Search book from table STEP2: Request from book page, then you can get your request link STEP3: Message will be updated once admin check your request on your link, then you can get the book when you come to office <a href=\"./book_search?req=table\"><button class=\"button\">Search</button></a> Updated portal is here. Add logics to the APP In this example, adding following functions to book_search APP Add link from master data to resource table Filter table to show only available data Restrict key Add link from resource data to master data Add link from master data to resource table Meta command can generate link that can be used in html.def. # generate link of location_search(subapp) $ sudo -u small-shell /usr/local/small-shell/bin/meta get.link:location_search@book_search APP:location_search@book_search Table: <a href=\"./book_search?%%session&subapp=location_search&req=table\">link</a> DATA.new: <a href=\"./book_search?%%session&subapp=location_search&req=get&id=new\">link</a> DATA.$id: <a href=\"./book_search?%%session&subapp=location_search&req=get&id=$id\">link</a> then copy and paste to action link field with adding \"table_command=%%book_name\" for filtering table with book name. $ sudo vi /var/www/descriptor/book_search_get_ro.html.def --code-- <div class=\"action_links\"> <!-- add following line --> <span><a href=\"./book_search?%%session&subapp=location_search&req=table&table_command=%%book_name\"><p>location table</p></a></span> </div> -------- To insert %%book_name in above action link, need to add these logics to get action. Note If you insert sed or awk in codes, it's recommended to used $SED and $AWK value. the parameter is defined at /usr/local/small-shlel/global.conf $ sudo vi /var/www/bin/book_search_get.sh # block1 { get ID book_namd }, adding to next line of DATA_SHELL setting --block1 code-- DATA_SHELL=\"${small_shell_path}/bin/DATA_shell session:$session pin:$pin app:book_search\" # add block1 book_name=`$DATA_SHELL databox:book.master action:get key:name id:$id format:none | $AWK -F \":\" '{print $2}'` --------------- # update render HTML logic as block 2 --block2 code-- # render HTML cat ../descriptor/${view} | $SED \"s/^ *</</g\" \\ | $SED \"/%%common_menu/r ../descriptor/common_parts/book_search_common_menu\" \\ | $SED \"/%%common_menu/d\" \\ | $SED \"/%%dataset/r ../tmp/$session/dataset\" \\ | $SED \"s/%%dataset//g\"\\ | $SED \"/%%history/r ../tmp/$session/history\" \\ | $SED \"s/%%history//g\"\\ | $SED \"s/%%id/$id/g\" \\ | $SED \"s/%%book_name/$book_name/g\" \\ | $SED \"s/%%pdls/session=$session\\&pin=$pin\\&req=get/g\" \\ | $SED \"s/%%session/session=$session\\&pin=$pin/g\" \\ | $SED \"s/%%params/session=$session\\&pin=$pin/g\" --------------- Filter table to show only available data that is available To show only available book, add \"match\" option to show_all command. Following example is replacing show_all command at once using sed command. # get backup cp /var/www/bin/book_search_table.sh /var/tmp/book_search_table.sh.org # replace at once cat /var/www/bin/book_search_table.sh | sed \"s/command:show_all/command:show_all[match=available{yes}]/g\" > /var/tmp/new_book_search_table.sh # check difference diff /var/www/bin/book_search_table.sh /var/tmp/new_book_search_table.sh # overwrite sudo mv /var/tmp/new_book_search_table.sh /var/www/bin/book_search_table.sh sudo chmod 755 /var/www/bin/book_search_table.sh sudo chown small-shell:small-shell /var/www/bin/book_search_table.sh Then let's modify line calculation logic as well. $ sudo vi /var/www/bin/book_search_table.sh # comment out original line #line_num=`$META get.num:$databox` # insert new line line_num=`$DATA_SHELL databox:$databox command:show_all[match=available{yes}][sort=${sort_option},${sort_col}] format:none | wc -l | tr -d \" \"` Restrict key To restrict accessable key, change \"all\" to specific keys. $ sudo vi /var/www/bin/location_search_get.sh # -> change keys from \"all\" to specific keys. keys=\"hashid,name,location\" $ sudo vi /var/www/bin/location_search_table.sh # -> change keys from \"all\" to specific keys. keys=\"hashid,name,location\" Add link from resource data to master data To connecing APPs each other, execute meta command again. # generate link of book_search(parent app) $ sudo -u small-shell /usr/local/small-shell/bin/meta get.link:book_search APP:book_search Table: <a href=\"./book_search?%%session&req=table\">link</a> DATA.new: <a href=\"./book_search?%%session&req=get&id=new\">link</a> DATA.$id: <a href=\"./book_search?%%session&req=get&id=$id\">link</a> then copy and past the link to action_link field. $ sudo vi /var/www/descriptor/location_search_get_ro.html.def --code-- <div class=\"action_links\"> <!-- add following line --> <span><a href=\"./book_search?%%session&req=get&id=%%book_id\"><p>Master data</p></a></span> </div> -------- To insert %%book_id to action_link, let's modify render logics to get action. $ sudo vi /var/www/bin/location_search_get.sh --code-- # render HTML resource_id=$id book_name=`$DATA_SHELL databox:book.res action:get key:name id:$id format:none | $AWK -F \":\" '{print $2}'` book_id=`$DATA_SHELL databox:book.master command:show_all[match=name{$book_name}] format:json | jq '.[] | .id'| $SED -s \"s/\\\"//g\"` cat ../descriptor/${view} | $SED \"s/^ *</</g\" \\ | $SED \"/%%common_menu/r ../descriptor/common_parts/book_search_common_menu\" \\ | $SED \"/%%common_menu/d\" \\ | $SED \"/%%dataset/r ../tmp/$session/dataset\" \\ | $SED \"s/%%dataset//g\"\\ | $SED \"/%%history/r ../tmp/$session/history\" \\ | $SED \"s/%%history//g\"\\ | $SED \"s/%%id/$id/g\" \\ | $SED \"s/%%book_id/$book_id/g\" \\ | $SED \"s/%%pdls/session=$session\\&pin=$pin\\&req=get/g\" \\ | $SED \"s/%%session/session=$session\\&pin=$pin/g\" \\ | $SED \"s/%%params/subapp=location_search\\&session=$session\\&pin=$pin/g\" -------- Generate form Form for requesting book exmpale is as following. $ sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 2 result of dialog APP Type: 2.FORM Form Name: booking_req Target Databox: request.db Description: This is request Form for booking library IP_whitelisting: no Included keys: requester,email,book_name Access URL: https://**-**-**/booking_req Cook Form Once Form APP is generated, let's add these additional functioncs to the code. Insert book name using QUERY STRING Booking 1 resource which is available and searchable in book.master Change status of other databoxes, #book.master #book.res update controller Controller can load any query string in the URL and it can pass the parameter to action script. in this example, controller will pass book_name additionally to get.sh $ sudo vi /var/www/cgi-bin/booking_req --code-- # comment out original line #/var/www/bin/booking_req_get.sh session:$session pin:$pin id:$id remote_addr:${remote_addr};; # insert new line /var/www/bin/booking_req_get.sh session:$session pin:$pin id:$id remote_addr:${remote_addr} book_name:${book_name} ;; -------- update get logic of action script For the next, update action script to insert book name. $ sudo vi /var/www/bin/booking_req_get.sh # block1 logic next line of id param loading. --code-- if [[ $param == id:* ]]; then id=`echo $param | $AWK -F\":\" '{print $2}'` fi # add block1 if [[ $param == book_name:* ]]; then book_name=`echo $param | $AWK -F\":\" '{print $2}'` fi -------- # block2, modify gen new logic. in this example, original line is comment out and new line is inserted --code-- # gen reqd/write form #new # comment out original line #$DATA_SHELL databox:request.db action:get id:$id keys:requester,email,book_name format:html_tag > /var/www/tmp/$session/dataset # insert line new lines $DATA_SHELL databox:request.db action:get id:$id keys:requester,email,book_name format:html_tag > ../tmp/$session/dataset.0.1 cat ../tmp/$session/dataset.0.1 \\ | $SED \"s/name=\\\"book_name\\\" value=\\\"\\\"/name=\\\"book_name\\\" value=\\\"$book_name\\\"/g\" > ../tmp/$session/dataset -------- Add reserve button for book_search APP Add reserve button that will link to booking_req Form with book_name. the Query string in the URL will be handled by Form controller. $ sudo vi /var/www/descriptor/book_search_get_ro.html.def --code-- <a href=\"./booking_req?book_name=%%book_name\"><button class=\"button\">Reserve</button></a> -------- Once you click Reserve button, request Form must contain book information as following. Finalize APP Update Set logic of request Form Basially \"set logic\" of request Form will update only request.db. but in this example, \"set logic\" will update book.res data as well to prevent double booking. 1st step is just comment out original logic. $ sudo vi /var/www/bin/booking_req_set.sh --code-- # push datas to databox #$DATA_SHELL databox:request.db action:set id:$id keys:$keys input_dir:/var/www/tmp/$session > /var/www/tmp/$session/result # result check #updated_id=`cat /var/www/tmp/$session/result | grep \"^successfully set\" | $AWK -F \"id:\" '{print $2}' | $SED '/^$/d' | sort | uniq` -------- 2nd step is to insert new lines right after original logic that was comment out. $ sudo vi /var/www/bin/booking_req_set.sh --code-- # load book resource book_name=`cat ../tmp/$session/book_name` resource_id=`$DATA_SHELL databox:book.res command:show_all[match=name{$book_name}][filter=status{on{%%%%%%%}the{%%%%%%%}shelve}] format:json \\ | jq '.[] | .id'| $SED -s \"s/\\\"//g\" | head -1` if [ \"$resource_id\" ];then # push datas to databox echo \"$resource_id\" > ../tmp/$session/book_resource_id echo \"requested\" > ../tmp/$session/status keys=\"book_resource_id,status,$keys\" $DATA_SHELL databox:request.db action:set id:new keys:$keys input_dir:../tmp/$session > ../tmp/$session/result # result check updated_id=`cat ../tmp/$session/result | grep \"^successfully set\" | $AWK -F \"id:\" '{print $2}' | $SED '/^$/d' | sort | uniq` avail_num=`$DATA_SHELL databox:book.res command:show_all[match=name{$book_name}][filter=status{on{%%%%%%%}the{%%%%%%%}shelve}] format:none | wc -l` if [ \"$updated_id\" -a $avail_num -ge 1 ];then # update staus of resource.db $DATA_SHELL databox:book.res action:set id:$resource_id key:status value:reserved >> ../tmp/$session/result # update status of book.master (( avail_num -= 1 )) if [ $avail_num -eq 0 ];then book_master_id=`$DATA_SHELL databox:book.master command:show_all[match=name{$book_name}] format:json | jq '.[] | .id'| $SED -s \"s/\\\"//g\"` $DATA_SHELL databox:book.master action:set id:$book_master_id key:available value:- >> ../tmp/$session/result fi fi fi -------- Add status and message to end user page Originally Form contained only these fields { requester,email,book_name} but end user msut want to know the booking status. so lets show these messages. before adding logic request $ sudo vi /var/www/bin/booking_req_get.sh --code-- # gen read only contents # comment out original lines #$DATA_SHELL databox:request.db action:get id:$id keys:requester,email,book_name format:none > /var/www/tmp/$session/dataset.0.1 #cat /var/www/tmp/$session/dataset.0.1 | $SED \"s/^/<li><label>/g\" | $SED \"s/:/<\\/label><pre>/1\" | $SED \"s/$/<\\/pre><\\/li>/g\" \\ #| $SED \"s/<pre><\\/pre>/<pre>-<\\/pre>/g\" | $SED \"s/_%%enter_/\\n/g\" > /var/www/tmp/$session/dataset # insert new lines $DATA_SHELL databox:request.db action:get id:$id keys:requester,email,book_name,status,message format:none | grep -v hashid > ../tmp/$session/dataset.0.1 cat ../tmp/$session/dataset.0.1 | $SED \"s/^/<li><label>/g\" | $SED \"s/:/<\\/label><pre>/g\" | $SED \"s/$/<\\/pre><\\/li>/g\" \\ | $SED \"s/<pre><\\/pre>/<pre>-<\\/pre>/g\" | $SED \"s/_%%enter_/\\n/g\" > ../tmp/$session/dataset -------- updated image Cook Job for the APP In thie example, create job for updating available status. this job will be effective in the case that book was returned to shelve but admin missed to set available on book.master even if admin updated book.res status to on the shelve. job will check inconsistency between book.master and correct it accordingly. Create batch script You can use small-shell basic parameters and sys user's key if you put script to util/scripts dir. by the way sys user is default user that will be created automatically when execute gen command. sudo vi /usr/local/small-shell/util/scripts/status_update.sh copy and paste these codes. this script will work as e-cron job. By the way underbar is meta charactor of small-shell. you need to use {%%%%%%%} instead. I mean on{%%%%%%%}the{%%%%%%%}shelve} will be translated to on_the_shelve. for more detail, please check meta charactor #!/bin/bash #------------------------------------------------------------- # This is the script for update status of book.master #------------------------------------------------------------- # global.conf load SCRIPT_DIR=`dirname $0` . ${SCRIPT_DIR}/../../global.conf # load authkey . ${SCRIPT_DIR}/.authkey WHOAMI=`whoami` if [ ! \"$WHOAMI\" = \"small-shell\" ];then echo \"error: user must be small-shell\" exit 1 fi # dump non available books $ROOT/bin/DATA_shell authkey:$authkey databox:book.master command:show_all[keys=id,name][match=available{-}] format:csv \\ > ${SCRIPT_DIR}/tmp/book_master_dump.tmp # check latest resource status count=1 while read line do if [ $count -gt 1 ];then book_id=`echo $line | $AWK -F \",\" '{print $1}'` book_name=`echo $line | $AWK -F \",\" '{print $2}'` # check on_the_shelve book check_shelv=`$ROOT/bin/DATA_shell authkey:$authkey databox:book.res \\ command:show_all[match=name{$book_name}][filter=status{on{%%%%%%%}the{%%%%%%%}shelve}] format:none` if [ \"$check_shelv\" ];then # update available status $ROOT/bin/DATA_shell authkey:$authkey databox:book.master action:set id:$book_id key:available value:yes echo \"$ROOT/bin/DATA_shell authkey:$authkey databox:book.master action:set id:$book_id key:available value:yes\" fi fi ((count += 1)) done < ${SCRIPT_DIR}/tmp/book_master_dump.tmp exit 0 Change permission and ower of the script sudo cdmod 755 /usr/local/small-shell/util/scripts/status_update.sh sudo chown small-shell:small-shell /usr/local/small-shell/util/scripts/status_update.sh Change system user permission from read only to read/write Before executing the job, please change sys user permission from ro to rw. sudo /usr/local/small-shell/adm/ops set.attr:sys{rw} Push job to small-shell Once script are created, make e-cron job as following. as for detail e-cron, please check here tour. sudo /usr/local/small-shell/adm/gen -job Dialog will be started. Job Name: book_master_status_update Type of job (1.job automation | 2.file exchange) : 1 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: any Hour [ any | 0-23 ]: 1 Min [ any | 0-59 ]: 0 Week [ any | mon - sun ]: any Exec command or batch script: status_update.sh Enable job sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.book_master_status_update Job check # check list $ sudo -u small-shell /usr/local/small-shell/bin/e-cron ls -------------------------------------------------------------- job definition: /usr/local/small-shell/util/e-cron/def -------------------------------------------------------------- book_master_status_update.enabled del_session.enabled del_util_log.enabled # exec manually $ sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.book_master_status_update book_master_status_update successfully completed # check status $ sudo -u small-shell /usr/local/small-shell/bin/e-cron stat -------------------------------------------------------- LATEST STATUS OF JOB -------------------------------------------------------- 2022-03-20 00:05:01 del_util_log successfully completed 2022-03-20 02:45:41 book_master_status_update successfully completed 2022-03-20 02:46:01 del_session successfully completed Once job is implemented, your prototype APP deployment is completed. please use it and have a fun! Set notification mail In this section, you can learn how to add notification mail to inquiry Form of Team APP . you can add same code to any Form APP. Note please set MTA such like postfix beforehand Let's add code to inquiry_set.sh # install mail comamnd sudo apt install mailutils then please add these codes just before session removal logic. sudo vi /var/www/bin/inquiry_set.sh # ---start insert code ---- notification_addr=\"to_addr@XXXX.com\" sender_addr=\"from_addr@XXXX.com\" . ${small_shell_path}/web/base echo \"inquiry url is here ${base_url}team?subapp=inquiries&req=get&id=$updated_id\" | mail -s \"New inquiry added through Form\" -aFrom:${sender_addr} ${notification_addr} # ---end of inserted code -- if [ \"$session\" ];then rm -rf /var/www/tmp/$session fi Then you can get notification mail from inquiry APP when end user submit inquiry through Form. you can insert above code to any set action script of Form APPs or Scratch APPs. Design recipe In this section, you can learn how you can change design of portal page of your APP. let's create main page with no authentication and no databox for making the easiest example. of course any type of authentication can be selected and any databox can be attached. $ sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 3 app_name: static_site Type of Authentication (1.shared pass | 2.user key | 3.other | 4.none): 4 primary databox: none Cook portal page Let's start to cook portal page. you can edit the page by 2 way. 1 is edit the page on Base APP {$APP_UI.md.def} web UI. Update $app.UI.md.def on Base APP You can update portal page using both markdown and legach HTML. please check the markdown grammer here if needed. also you can update \"menu\" \"logo\" and \"footer\" on the same admin page. Field Language Description Description Markdown or HTML Main contents of portal page, you can use both HTML and Markdown YAML for navbar-right-header YAML Define links in even button menu of navbar right side YAML for navbar-left-links YAML Define links of navbar left side Logo HTML Insert logo to the portal page Footer Text Define footer Use images.db You can upload logo or images to images.db. and then you can get link of img tag that can be utilized on description or logo field on $app.UI.md.def page. HTML/CSS Grammar Another way of updating portal is just editting hml.def directly {$APP_main.html.def} sudo vi /var/www/descriptor/static_site_main.html.def Note Please update under \"main\" class, then you can use light css framework Update left header You can modify links and logo to the left header, in this example link to Docs is added. ! please upload image file to /var/www/html <div class=\"left-header\"> <a href=\"https://github.com\"><img src=\"../GitHub-Mark-32px.png\"></a> <a href=\"https://small-shell.org\"><h2>Docs</h2></a> </div> Implement flex-table For implementing table, you must use some classes. table must be contain \"flext-table\" class. and header should have \"flex-table-header\" class. <div class=\"flex-table\"> <ul> <li class=\"flex-table-header\"> <p>column1</p> <p>column2</p> <p>column3</p> <p>column4</p> </li> <li> <p>data1.column1</p> <p>data1.column2</p> <p>data1.column3</p> <p>data1.column4</p> </li> </ul> </div> Add internal page link to the left navi In this example, page will have 3 section including table section. <div class=\"left-nav\"> <a href=\"#section1\"><p>section1</p></a> <a href=\"#section2\"><p>section2</p></a> <a href=\"#section3><p>section3p></a> </div> Use button Button must have \"button\" class. <button class=\"button\">Sample button</button> Use image In this example, we would like to use GitHub logo for image. please upload logo to \"/var/www/html\" that's static site dir. then write down the path to the HTML page. <a href=\"https://github.com\"><img src=\"../GitHub-Mark-32px.png\"></a> Update even menu In this example, links in right header menu will be external links and mail addr. sudo vi /var/www/descriptor/common_parts/static_site_common_menu <li><a href=\"\">LINK 1</a></li> <li><a href=\"\">LINK 2</a></li> <li><a href=\"mailto:address\">MAIL</a></li> or If you don't need to use right header, just delete right header definition on $APP_main.html.def sudo vi /var/www/descriptor/static_site_main.html.def right header definition on main.html.def <div class=\"right-header\"> <button class=\"even-btn-menu\">=</button> <nav> <ul> %%common_menu </ul> </nav> </div> Add footer Please use footer class for making footer. <div class=\"footer\"> <p>powered by small-shell.org</p> </div> Implement form If you want to implement form, it's recommended to use class=\"app-form\" , please check following example. <div class=\"app-form\"> <h1>#new</h1> <form method=\"post\" action=\"\" onclick=\"document.charset='utf-8';\"> <ul> <li> <label>name</label> <input type=\"text\" name=\"name\" value=\"\" required> </li> <li> <label>description</label> <input type=\"text\" name=\"description\" value=\"\" > </li> </ul> </div> Change color You can change color by updating $APP.css.def sudo vi /var/www/descriptor/static_site.css.def #----------------classes---------------# # Change header color .flex-header # Change right menu charactor .right-header a # Change right menu background and border color .right-header nav .right-header nav.open-menu # Change right header button (=) .right-header .even-btn-menu # Change button .main button # Change table header of main .main .flex-table-header #----------------------------------------# Distribute APP as static site You can export main page as static site. sudo /usr/local/small-shell/util/scripts/dist.sh $APP $EXPORT_DIR Automate SSL cert deployment In this cook, you can learn how to automate cert deployment by using Let's Encrypt as ssl certificate provider. please install certbot first. Install certbot # install snapd if its not installed sudo apt install snapd sudo systemctl start snapd sudo systemctl enable snapd # install certbot sudo snap install core sudo snap refresh core sudo snap install --classic certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot Note A record of the domain must be set on DNS server beforehand. and it must be global IP that can be reachable from Let's encrypt server Generate Base APP Base APP that will use small-shell WEB srv should be launched as http server not https so far. FQDN must be same as A record that you set beforehand on your DNS server. $ sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 Type of server (1.small-shell WEB srv | 2.other WEB srv): 1 protocol (http | https): http WEB Server FQDN or IP addr (e.g. 192.168.10.1): $FQDN Import job and deploy ssl certificate Once you install certbot and launched Base APP, please kick configure.sh and deploy.sh. then dialog will be started. please answer your mail address that is reqiured to publish certificate by Let's Encrypt cd $HOME git clone https://github.com/naruoken/small-shell-apps cd ./small-shell-apps/ssl_auto chmod 755 *.sh sudo ./configure.sh sudo ./deploy.sh dialog Following is exmaple of dialog. small-shell root (/usr/local/small-shell): Saving debug log to /var/log/letsencrypt/letsencrypt.log Enter email address (used for urgent renewal and security notices) (Enter 'c' to cancel): ****@***.com - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Please read the Terms of Service at https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf. You must agree in order to register with the ACME server. Do you agree? - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - (Y)es/(N)o:Y - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Would you be willing, once your first certificate is successfully issued, to share your email address with the Electronic Frontier Foundation, a founding partner of the Let's Encrypt project and the non-profit organization that develops Certbot? We'd like to send you email about our work encrypting the web, EFF news, campaigns, and ways to support digital freedom. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - (Y)es/(N)o: Y Account registered. Requesting a certificate for ***.com If everything is no problem, https will be enabled automatically by deploy.sh. Add Sudoer You must add following setting on sudoers to execute SSL refresh job regularly. $ sudo visudo # add following to bottom of the file, if there is no small-shell entry small-shell ALL=(ALL:ALL) NOPASSWD: /usr/local/small-shell/adm/*, /usr/local/small-shell/util/scripts/* Check job Once deploy is completed, ssl job that will refresh ssl cert will be on e-cron. $ sudo -u small-shell /usr/local/small-shell/bin/e-cron ls | grep ssl ssl_auto.enabled If it's enabled SSL implementation is completed. Make replica for load balancing Small-Shell WEB APPs and databoxes can be synced to replica hosts and it can be put under load balancer. load balander must be setup beforehand on cloud env or physical env. Requirement of load balancing Please be aware that load balancer must ensure session persistence. And load balancing logic must be just TCP port proxy (not terminate SSL/TLS) because write request will go to real server FQDN of master server directly. it's recommended to use wild card certificate or automated certificate. implement procedure of automated certificate will be explained later step. Read Req > Load Balancer # ensure session persistence TCP port forwarding | - Master host #response on 80,443 port |- Replica hosts #response on 80,443 port Write Req > Load Balancer # ensure session persistence TCP port forwarding | - Master host #response on 80,443 port |- Replica hosts > it will be redirected to real server FQDN of master host Setup environment Before build replica, you need to setup Base APP using small-shell WEB srv on both master and replica server. when input server FQDN, please input real server FQDN (I mean not load balancing address) and protocol should be http so far not https if you will use ssl auto script later. @master sudo apt install lsyncd sudo mkdir /etc/lsyncd sudo apt install nginx sudo /usr/local/small-shell/adm/gen -databox # need to create dsataStore first sudo /usr/local/small-shell/adm/gen -app #Base APP (required), Scratch APP (optional) @replica sudo apt install rsync sudo apt install nginx sudo /usr/local/small-shell/adm/gen -app #Base APP (required) Get key Then let's get key to communicate between master and replica. \"show.pub\" option will show the key. please copy the key. it must be paste next STEP. When you execute mkrep.sh with the option first time, PATH of the key will be confirmed. it must be /home/small-shell/.ssh/id_rsa. @master @replica sudo /usr/local/small-shell/util/scripts/mkrep.sh show.pub Generating public/private rsa key pair. Enter file in which to save the key (/home/small-shell/.ssh/id_rsa): <Enter> Build Replication Once key is ready, replication can be built by \"reg\" option. you must answer the dialog and paste public key that you get beorehand. @master sudo /usr/local/small-shell/util/scripts/mkrep.sh reg.replica > dialog will be started @replica sudo /usr/local/small-shell/util/scripts/mkrep.sh reg.master > dialog will be started Automated deployment of SSL cert for load balancing To enable https, it's recommended to use ssl auto script as following step. please check details of automation setting on Deploy auto SSL cetificate . @master # install snapd if its not installed sudo apt install snapd sudo systemctl start snapd sudo systemctl enable snapd # install certbot sudo snap install core sudo snap refresh core sudo snap install --classic certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot # deploy ssl atuo cd $HOME git clone https://github.com/naruoken/small-shell-apps cd ./small-shell-apps/ssl_auto chmod 755 *.sh sudo ./configure.sh sudo ./deploy.sh @replica cd $HOME git clone https://github.com/naruoken/small-shell-apps cd ./small-shell-apps/ssl_auto chmod 755 *.sh sudo ./configure.sh sudo ./deploy.sh If everything is no problem, https will be enabled automatically by deploy.sh. by the way configure.sh will set up reverse proxy using nginx package for flexible certification management in clustering environment. small-shell default web srv port will be changed to 8080 port. Create users for APPs Once replication and SSL is ready, please create users for APPs. sudo /usr/local/small-shell/adm/ops add.usr:$user #Base APP sudo /usr/local/small-shell/adm/ops add.usr:$user app:$app #Scratch APP Add new APP or rebuild replication. If you will add new APP after starting replication or rebuild replication for adding new host, please remove all replication setting with purge option. @master @replica_hosts sudo /usr/local/small-shell/util/scripts/mkrep.sh purge sudo /usr/local/small-shell/util/scripts/mkrep.sh show.pub @master sudo /usr/local/small-shell/adm/gen -app #create new APP sudo /usr/local/small-shell/util/scripts/mkrep.sh reg.replica @replica_hosts sudo /usr/local/small-shell/util/scripts/mkrep.sh reg.master Backup & Restore example In this cook, 1 production node will send backup to backuo node through e-cron HUB API | prod node | -- | backup node #e-cron HUB| Usage of bkup and rstr sudo /usr/local/small-shell/adm/bkup $dir sudo /usr/local/small-shell/adm/rstr $dir Operation at backup node It's required to Launch Base APP and check e-cron URL and key @backup_node sudo /usr/local/small-shell/adm/gen -app cat /usr/local/small-shell/web/base | grep hubapi cat /usr/local/small-shell/web/base | grep api_authkey Operation at production node Once e-cron HUB is ready,define backup & sync job on pdocution node. bkup command will backup every data of small-shell including user info, databox{data,log}, APP, Job... and sudo privilede is required for executing bkup command. please add sudoers beforehand. @production_node $ sudo visudo # add folowing line, if there is no small-shell entry small-shell ALL=(ALL:ALL) NOPASSWD: /usr/local/small-shell/adm/*, /usr/local/small-shell/util/scripts/* # define backup job $ sudo /usr/local/small-shell/adm/gen -job Job Name: backup Type of job (1.job automation | 2.file exchange) : 1 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: any Hour [ any | 0-23 ]: 0 Min [ any | 0-59 ]: 1 Week [ any | mon - sun ]: any Exec command or batch script: sudo /usr/local/small-shell/adm/bkup /var/tmp # define push job, please confirm URL and authkey at backup node beforehand $ sudo /usr/local/small-shell/adm/gen -job Type of job (1.job automation | 2.file exchange) : 2 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: any Hour [ any | 0-23 ]: 1 Min [ any | 0-59 ]: 0 Week [ any | mon - sun ]: any Type of file exchange (push | get): push local directory: /var/tmp file_name: *tar.xz HUB API URL: $hubapi API authkey: $api_authkey Backup file If bkup/push job works fine, there is backup files on que/file directry on backup node @backup_node ls /usr/local/small-shell/util/e-cron/que/file $server.core.tar.xz $server.ssh.tar.xz $server.www.tar.xz Restore For restoring backup file, please install small-shell from git and launch Base APP first. and rstr command option must be directory where backup files are copied from backup node. @restore_node sudo /usr/local/small-shell/adm/rstr $dir Dictionary (create lang pack) You can create language pack for WEB APP using following template. cd $HOME git clone https://github.com/naruoken/small-shell-apps cd small-shell-apps/dictionary/template Usage of keywords file \"keywords\" file will be used for translating words to your language. please update them. by the way {%%%%%%} is a separator that is used instead of conma. # at small-shell-apps/dictionary/template vi keywords ----- ########################################################## # usage: original_word{%%%%%%}translated_word ########################################################## ScratchAPP:APP Portal{%%%%%%} ScratchAPP:Table{%%%%%%} ScratchAPP:Log Out{%%%%%%} Your Key is successfully generated.{%%%%%%} ---- Deployment Once keywords file is updated, deploy it by using deploy.sh # at small-shell-apps/dictionary/template ./deploy.sh Log analyzer You can import job for analyzing log of small-shell web from github. Link to code is here cd $HOME git clone https://github.com/naruoken/small-shell-apps cd small-shell-apps/ssw_log_analyzer # Deploy job sudo ./deploy.sh confirm imported job If deploy.sh executed without any error, 1 databox {web_analyer} and 3 job will be imported. log analyzer sudo -u small-shell /usr/local/small-shell/bin/e-cron cat.ssw_log_analyzer > JOB: ssw_log_analyzer def:/usr/local/small-shell/util/e-cron/def/ssw_log_analyzer.def -------------SCHEDULE---------------- min: 1 hour: 0 date: any month: any week: any -------------DEFINITION---------------- exec_command=\"/usr/local/small-shell/util/scripts/ssw_log_analyzer.sh\" input_message=\"\" output_message=\"analyzer.done\" hubapi=\"\" api_authkey=\"\" statistics sudo -u small-shell /usr/local/small-shell/bin/e-cron cat.ssw_statistics > JOB: ssw_statistics def:/usr/local/small-shell/util/e-cron/def/ssw_statistics.def -------------SCHEDULE---------------- min: 10 hour: 0 date: any month: any week: any -------------DEFINITION---------------- exec_command=\"/usr/local/small-shell/util/scripts/ssw_statistics.sh\" input_message=\"analyzer.done\" output_message=\"\" hubapi=\"\" api_authkey=\"\" Confirm result Job will push the result to the databox named as web_annalyzer. Log analytics target is srvdump.log.1 it means 1 day ago log. you can check the graph on console. using #stats command.","title":"Cook Book"},{"location":"cook_book/#cook-book","text":"In this course, you can learn how utilize APPs { Base APP, Scratch APP, Form } and also you can check utilitise such like ssl cert deployment automation, replication, backup and so on.","title":"Cook book"},{"location":"cook_book/#cook-prototype-app","text":"In this prototype APP construction work, these APPs in following chart will be created. Name Type Databox User Purpose - Base APP ALL Admin Manage ALL data as admin #need key authentication book_search Scratch APP book.master End user Allow limitted access to the master data location_search Sub APP of book_search book.res End user Allow limitted access to the resource and location data booking_req Form request.db End user Provide request Form to end user Here is sample code of above APPs. it will be explained step by step in this section.","title":"Cook prototype APP"},{"location":"cook_book/#create-databox","text":"3 databoxes will be used for the prototype APP. \"book.master\" will be master data of book information, \"book.res\" is resource information including location information each resource, and \"request.db\" is databox for putting request from end user. # db relation book.master <-reference- book.res <--reference-- request.db # detail 1. book.master { name: text, isbn: num, author: text, category: select, desciption: textarea, available: checkbox} 2. book.res { hashid, name: pdls(book.master), location: select, status: select} 3. request.db { hashid, requester: text, email: email, book_name: text, status: select, book_resource: pdls(book.res), message: textarea }","title":"Create Databox"},{"location":"cook_book/#import-databox","text":"Import databox, using db.def cd $HOME git clone https://github.com/21it-org/21it.git cd 21it/templates/cookbook/def sudo /usr/local/small-shell/util/scripts/bat_gen.sh ./book_master.def sudo /usr/local/small-shell/util/scripts/bat_gen.sh ./book_res.def sudo /usr/local/small-shell/util/scripts/bat_gen.sh ./request.db.def","title":"Import databox"},{"location":"cook_book/#launch-base-app","text":"Launch Base APP by refering to Quick start $ sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 #-> Dialog will be started, for making Base APP","title":"Launch Base APP"},{"location":"cook_book/#create-scratch-app","text":"Once databoxes and Base APP is created, let's move on to create APPs.","title":"Create scratch APP"},{"location":"cook_book/#create-main-app","text":"$ sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 3 APP Name: book_search Type of Authentication (1.shared pass | 2.user key | 3.other | 4.none): 4 Primary databox: book.master","title":"Create Main APP"},{"location":"cook_book/#add-sub-app","text":"Add databox to Main APP by utilizing sub APP. this sub APP is used for searching book resource and location. $ sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 3 APP Name: location_search@book_search Subapp databox: book.res","title":"Add sub APP"},{"location":"cook_book/#cook-app","text":"Once APPs are generated, let's modify them 1 by 1. you can check sample code as reference","title":"Cook APP"},{"location":"cook_book/#update-portal","text":"Portal page of book_search can be editted by both markdown grammer and legacy HTML tag, detail is in Cook portal page section. you can also update menu of book_search on the Base APP.","title":"update portal"},{"location":"cook_book/#insert-code-to-description","text":"In this prototype APP, very simple description is written on the portal as below. it's using both HTML tag and markdown. <h1>This is book search APP. you can search and request book for lending on this APP.</h1> STEP1: Search book from table STEP2: Request from book page, then you can get your request link STEP3: Message will be updated once admin check your request on your link, then you can get the book when you come to office <a href=\"./book_search?req=table\"><button class=\"button\">Search</button></a> Updated portal is here.","title":"Insert code to description"},{"location":"cook_book/#add-logics-to-the-app","text":"In this example, adding following functions to book_search APP Add link from master data to resource table Filter table to show only available data Restrict key Add link from resource data to master data","title":"Add logics to the APP"},{"location":"cook_book/#add-link-from-master-data-to-resource-table","text":"Meta command can generate link that can be used in html.def. # generate link of location_search(subapp) $ sudo -u small-shell /usr/local/small-shell/bin/meta get.link:location_search@book_search APP:location_search@book_search Table: <a href=\"./book_search?%%session&subapp=location_search&req=table\">link</a> DATA.new: <a href=\"./book_search?%%session&subapp=location_search&req=get&id=new\">link</a> DATA.$id: <a href=\"./book_search?%%session&subapp=location_search&req=get&id=$id\">link</a> then copy and paste to action link field with adding \"table_command=%%book_name\" for filtering table with book name. $ sudo vi /var/www/descriptor/book_search_get_ro.html.def --code-- <div class=\"action_links\"> <!-- add following line --> <span><a href=\"./book_search?%%session&subapp=location_search&req=table&table_command=%%book_name\"><p>location table</p></a></span> </div> -------- To insert %%book_name in above action link, need to add these logics to get action. Note If you insert sed or awk in codes, it's recommended to used $SED and $AWK value. the parameter is defined at /usr/local/small-shlel/global.conf $ sudo vi /var/www/bin/book_search_get.sh # block1 { get ID book_namd }, adding to next line of DATA_SHELL setting --block1 code-- DATA_SHELL=\"${small_shell_path}/bin/DATA_shell session:$session pin:$pin app:book_search\" # add block1 book_name=`$DATA_SHELL databox:book.master action:get key:name id:$id format:none | $AWK -F \":\" '{print $2}'` --------------- # update render HTML logic as block 2 --block2 code-- # render HTML cat ../descriptor/${view} | $SED \"s/^ *</</g\" \\ | $SED \"/%%common_menu/r ../descriptor/common_parts/book_search_common_menu\" \\ | $SED \"/%%common_menu/d\" \\ | $SED \"/%%dataset/r ../tmp/$session/dataset\" \\ | $SED \"s/%%dataset//g\"\\ | $SED \"/%%history/r ../tmp/$session/history\" \\ | $SED \"s/%%history//g\"\\ | $SED \"s/%%id/$id/g\" \\ | $SED \"s/%%book_name/$book_name/g\" \\ | $SED \"s/%%pdls/session=$session\\&pin=$pin\\&req=get/g\" \\ | $SED \"s/%%session/session=$session\\&pin=$pin/g\" \\ | $SED \"s/%%params/session=$session\\&pin=$pin/g\" ---------------","title":"Add link from master data to resource table"},{"location":"cook_book/#filter-table-to-show-only-available-data-that-is-available","text":"To show only available book, add \"match\" option to show_all command. Following example is replacing show_all command at once using sed command. # get backup cp /var/www/bin/book_search_table.sh /var/tmp/book_search_table.sh.org # replace at once cat /var/www/bin/book_search_table.sh | sed \"s/command:show_all/command:show_all[match=available{yes}]/g\" > /var/tmp/new_book_search_table.sh # check difference diff /var/www/bin/book_search_table.sh /var/tmp/new_book_search_table.sh # overwrite sudo mv /var/tmp/new_book_search_table.sh /var/www/bin/book_search_table.sh sudo chmod 755 /var/www/bin/book_search_table.sh sudo chown small-shell:small-shell /var/www/bin/book_search_table.sh Then let's modify line calculation logic as well. $ sudo vi /var/www/bin/book_search_table.sh # comment out original line #line_num=`$META get.num:$databox` # insert new line line_num=`$DATA_SHELL databox:$databox command:show_all[match=available{yes}][sort=${sort_option},${sort_col}] format:none | wc -l | tr -d \" \"`","title":"Filter table to show only available data that is available"},{"location":"cook_book/#restrict-key","text":"To restrict accessable key, change \"all\" to specific keys. $ sudo vi /var/www/bin/location_search_get.sh # -> change keys from \"all\" to specific keys. keys=\"hashid,name,location\" $ sudo vi /var/www/bin/location_search_table.sh # -> change keys from \"all\" to specific keys. keys=\"hashid,name,location\"","title":"Restrict key"},{"location":"cook_book/#add-link-from-resource-data-to-master-data","text":"To connecing APPs each other, execute meta command again. # generate link of book_search(parent app) $ sudo -u small-shell /usr/local/small-shell/bin/meta get.link:book_search APP:book_search Table: <a href=\"./book_search?%%session&req=table\">link</a> DATA.new: <a href=\"./book_search?%%session&req=get&id=new\">link</a> DATA.$id: <a href=\"./book_search?%%session&req=get&id=$id\">link</a> then copy and past the link to action_link field. $ sudo vi /var/www/descriptor/location_search_get_ro.html.def --code-- <div class=\"action_links\"> <!-- add following line --> <span><a href=\"./book_search?%%session&req=get&id=%%book_id\"><p>Master data</p></a></span> </div> -------- To insert %%book_id to action_link, let's modify render logics to get action. $ sudo vi /var/www/bin/location_search_get.sh --code-- # render HTML resource_id=$id book_name=`$DATA_SHELL databox:book.res action:get key:name id:$id format:none | $AWK -F \":\" '{print $2}'` book_id=`$DATA_SHELL databox:book.master command:show_all[match=name{$book_name}] format:json | jq '.[] | .id'| $SED -s \"s/\\\"//g\"` cat ../descriptor/${view} | $SED \"s/^ *</</g\" \\ | $SED \"/%%common_menu/r ../descriptor/common_parts/book_search_common_menu\" \\ | $SED \"/%%common_menu/d\" \\ | $SED \"/%%dataset/r ../tmp/$session/dataset\" \\ | $SED \"s/%%dataset//g\"\\ | $SED \"/%%history/r ../tmp/$session/history\" \\ | $SED \"s/%%history//g\"\\ | $SED \"s/%%id/$id/g\" \\ | $SED \"s/%%book_id/$book_id/g\" \\ | $SED \"s/%%pdls/session=$session\\&pin=$pin\\&req=get/g\" \\ | $SED \"s/%%session/session=$session\\&pin=$pin/g\" \\ | $SED \"s/%%params/subapp=location_search\\&session=$session\\&pin=$pin/g\" --------","title":"Add link from resource data to master data"},{"location":"cook_book/#generate-form","text":"Form for requesting book exmpale is as following. $ sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 2","title":"Generate form"},{"location":"cook_book/#result-of-dialog","text":"APP Type: 2.FORM Form Name: booking_req Target Databox: request.db Description: This is request Form for booking library IP_whitelisting: no Included keys: requester,email,book_name Access URL: https://**-**-**/booking_req","title":"result of dialog"},{"location":"cook_book/#cook-form","text":"Once Form APP is generated, let's add these additional functioncs to the code. Insert book name using QUERY STRING Booking 1 resource which is available and searchable in book.master Change status of other databoxes, #book.master #book.res","title":"Cook Form"},{"location":"cook_book/#update-controller","text":"Controller can load any query string in the URL and it can pass the parameter to action script. in this example, controller will pass book_name additionally to get.sh $ sudo vi /var/www/cgi-bin/booking_req --code-- # comment out original line #/var/www/bin/booking_req_get.sh session:$session pin:$pin id:$id remote_addr:${remote_addr};; # insert new line /var/www/bin/booking_req_get.sh session:$session pin:$pin id:$id remote_addr:${remote_addr} book_name:${book_name} ;; --------","title":"update controller"},{"location":"cook_book/#update-get-logic-of-action-script","text":"For the next, update action script to insert book name. $ sudo vi /var/www/bin/booking_req_get.sh # block1 logic next line of id param loading. --code-- if [[ $param == id:* ]]; then id=`echo $param | $AWK -F\":\" '{print $2}'` fi # add block1 if [[ $param == book_name:* ]]; then book_name=`echo $param | $AWK -F\":\" '{print $2}'` fi -------- # block2, modify gen new logic. in this example, original line is comment out and new line is inserted --code-- # gen reqd/write form #new # comment out original line #$DATA_SHELL databox:request.db action:get id:$id keys:requester,email,book_name format:html_tag > /var/www/tmp/$session/dataset # insert line new lines $DATA_SHELL databox:request.db action:get id:$id keys:requester,email,book_name format:html_tag > ../tmp/$session/dataset.0.1 cat ../tmp/$session/dataset.0.1 \\ | $SED \"s/name=\\\"book_name\\\" value=\\\"\\\"/name=\\\"book_name\\\" value=\\\"$book_name\\\"/g\" > ../tmp/$session/dataset --------","title":"update get logic of action script"},{"location":"cook_book/#add-reserve-button-for-book_search-app","text":"Add reserve button that will link to booking_req Form with book_name. the Query string in the URL will be handled by Form controller. $ sudo vi /var/www/descriptor/book_search_get_ro.html.def --code-- <a href=\"./booking_req?book_name=%%book_name\"><button class=\"button\">Reserve</button></a> -------- Once you click Reserve button, request Form must contain book information as following.","title":"Add reserve button for book_search APP"},{"location":"cook_book/#finalize-app","text":"","title":"Finalize APP"},{"location":"cook_book/#update-set-logic-of-request-form","text":"Basially \"set logic\" of request Form will update only request.db. but in this example, \"set logic\" will update book.res data as well to prevent double booking. 1st step is just comment out original logic. $ sudo vi /var/www/bin/booking_req_set.sh --code-- # push datas to databox #$DATA_SHELL databox:request.db action:set id:$id keys:$keys input_dir:/var/www/tmp/$session > /var/www/tmp/$session/result # result check #updated_id=`cat /var/www/tmp/$session/result | grep \"^successfully set\" | $AWK -F \"id:\" '{print $2}' | $SED '/^$/d' | sort | uniq` -------- 2nd step is to insert new lines right after original logic that was comment out. $ sudo vi /var/www/bin/booking_req_set.sh --code-- # load book resource book_name=`cat ../tmp/$session/book_name` resource_id=`$DATA_SHELL databox:book.res command:show_all[match=name{$book_name}][filter=status{on{%%%%%%%}the{%%%%%%%}shelve}] format:json \\ | jq '.[] | .id'| $SED -s \"s/\\\"//g\" | head -1` if [ \"$resource_id\" ];then # push datas to databox echo \"$resource_id\" > ../tmp/$session/book_resource_id echo \"requested\" > ../tmp/$session/status keys=\"book_resource_id,status,$keys\" $DATA_SHELL databox:request.db action:set id:new keys:$keys input_dir:../tmp/$session > ../tmp/$session/result # result check updated_id=`cat ../tmp/$session/result | grep \"^successfully set\" | $AWK -F \"id:\" '{print $2}' | $SED '/^$/d' | sort | uniq` avail_num=`$DATA_SHELL databox:book.res command:show_all[match=name{$book_name}][filter=status{on{%%%%%%%}the{%%%%%%%}shelve}] format:none | wc -l` if [ \"$updated_id\" -a $avail_num -ge 1 ];then # update staus of resource.db $DATA_SHELL databox:book.res action:set id:$resource_id key:status value:reserved >> ../tmp/$session/result # update status of book.master (( avail_num -= 1 )) if [ $avail_num -eq 0 ];then book_master_id=`$DATA_SHELL databox:book.master command:show_all[match=name{$book_name}] format:json | jq '.[] | .id'| $SED -s \"s/\\\"//g\"` $DATA_SHELL databox:book.master action:set id:$book_master_id key:available value:- >> ../tmp/$session/result fi fi fi --------","title":"Update Set logic of request Form"},{"location":"cook_book/#add-status-and-message-to-end-user-page","text":"Originally Form contained only these fields { requester,email,book_name} but end user msut want to know the booking status. so lets show these messages.","title":"Add status and message to end user page"},{"location":"cook_book/#before-adding-logic-request","text":"$ sudo vi /var/www/bin/booking_req_get.sh --code-- # gen read only contents # comment out original lines #$DATA_SHELL databox:request.db action:get id:$id keys:requester,email,book_name format:none > /var/www/tmp/$session/dataset.0.1 #cat /var/www/tmp/$session/dataset.0.1 | $SED \"s/^/<li><label>/g\" | $SED \"s/:/<\\/label><pre>/1\" | $SED \"s/$/<\\/pre><\\/li>/g\" \\ #| $SED \"s/<pre><\\/pre>/<pre>-<\\/pre>/g\" | $SED \"s/_%%enter_/\\n/g\" > /var/www/tmp/$session/dataset # insert new lines $DATA_SHELL databox:request.db action:get id:$id keys:requester,email,book_name,status,message format:none | grep -v hashid > ../tmp/$session/dataset.0.1 cat ../tmp/$session/dataset.0.1 | $SED \"s/^/<li><label>/g\" | $SED \"s/:/<\\/label><pre>/g\" | $SED \"s/$/<\\/pre><\\/li>/g\" \\ | $SED \"s/<pre><\\/pre>/<pre>-<\\/pre>/g\" | $SED \"s/_%%enter_/\\n/g\" > ../tmp/$session/dataset --------","title":"before adding logic request"},{"location":"cook_book/#updated-image","text":"","title":"updated image"},{"location":"cook_book/#cook-job-for-the-app","text":"In thie example, create job for updating available status. this job will be effective in the case that book was returned to shelve but admin missed to set available on book.master even if admin updated book.res status to on the shelve. job will check inconsistency between book.master and correct it accordingly.","title":"Cook Job for the APP"},{"location":"cook_book/#create-batch-script","text":"You can use small-shell basic parameters and sys user's key if you put script to util/scripts dir. by the way sys user is default user that will be created automatically when execute gen command. sudo vi /usr/local/small-shell/util/scripts/status_update.sh copy and paste these codes. this script will work as e-cron job. By the way underbar is meta charactor of small-shell. you need to use {%%%%%%%} instead. I mean on{%%%%%%%}the{%%%%%%%}shelve} will be translated to on_the_shelve. for more detail, please check meta charactor #!/bin/bash #------------------------------------------------------------- # This is the script for update status of book.master #------------------------------------------------------------- # global.conf load SCRIPT_DIR=`dirname $0` . ${SCRIPT_DIR}/../../global.conf # load authkey . ${SCRIPT_DIR}/.authkey WHOAMI=`whoami` if [ ! \"$WHOAMI\" = \"small-shell\" ];then echo \"error: user must be small-shell\" exit 1 fi # dump non available books $ROOT/bin/DATA_shell authkey:$authkey databox:book.master command:show_all[keys=id,name][match=available{-}] format:csv \\ > ${SCRIPT_DIR}/tmp/book_master_dump.tmp # check latest resource status count=1 while read line do if [ $count -gt 1 ];then book_id=`echo $line | $AWK -F \",\" '{print $1}'` book_name=`echo $line | $AWK -F \",\" '{print $2}'` # check on_the_shelve book check_shelv=`$ROOT/bin/DATA_shell authkey:$authkey databox:book.res \\ command:show_all[match=name{$book_name}][filter=status{on{%%%%%%%}the{%%%%%%%}shelve}] format:none` if [ \"$check_shelv\" ];then # update available status $ROOT/bin/DATA_shell authkey:$authkey databox:book.master action:set id:$book_id key:available value:yes echo \"$ROOT/bin/DATA_shell authkey:$authkey databox:book.master action:set id:$book_id key:available value:yes\" fi fi ((count += 1)) done < ${SCRIPT_DIR}/tmp/book_master_dump.tmp exit 0","title":"Create batch script"},{"location":"cook_book/#change-permission-and-ower-of-the-script","text":"sudo cdmod 755 /usr/local/small-shell/util/scripts/status_update.sh sudo chown small-shell:small-shell /usr/local/small-shell/util/scripts/status_update.sh","title":"Change permission and ower of the script"},{"location":"cook_book/#change-system-user-permission-from-read-only-to-readwrite","text":"Before executing the job, please change sys user permission from ro to rw. sudo /usr/local/small-shell/adm/ops set.attr:sys{rw}","title":"Change system user permission from read only to read/write"},{"location":"cook_book/#push-job-to-small-shell","text":"Once script are created, make e-cron job as following. as for detail e-cron, please check here tour. sudo /usr/local/small-shell/adm/gen -job Dialog will be started. Job Name: book_master_status_update Type of job (1.job automation | 2.file exchange) : 1 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: any Hour [ any | 0-23 ]: 1 Min [ any | 0-59 ]: 0 Week [ any | mon - sun ]: any Exec command or batch script: status_update.sh","title":"Push job to small-shell"},{"location":"cook_book/#enable-job","text":"sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.book_master_status_update","title":"Enable job"},{"location":"cook_book/#job-check","text":"# check list $ sudo -u small-shell /usr/local/small-shell/bin/e-cron ls -------------------------------------------------------------- job definition: /usr/local/small-shell/util/e-cron/def -------------------------------------------------------------- book_master_status_update.enabled del_session.enabled del_util_log.enabled # exec manually $ sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.book_master_status_update book_master_status_update successfully completed # check status $ sudo -u small-shell /usr/local/small-shell/bin/e-cron stat -------------------------------------------------------- LATEST STATUS OF JOB -------------------------------------------------------- 2022-03-20 00:05:01 del_util_log successfully completed 2022-03-20 02:45:41 book_master_status_update successfully completed 2022-03-20 02:46:01 del_session successfully completed Once job is implemented, your prototype APP deployment is completed. please use it and have a fun!","title":"Job check"},{"location":"cook_book/#set-notification-mail","text":"In this section, you can learn how to add notification mail to inquiry Form of Team APP . you can add same code to any Form APP. Note please set MTA such like postfix beforehand Let's add code to inquiry_set.sh # install mail comamnd sudo apt install mailutils then please add these codes just before session removal logic. sudo vi /var/www/bin/inquiry_set.sh # ---start insert code ---- notification_addr=\"to_addr@XXXX.com\" sender_addr=\"from_addr@XXXX.com\" . ${small_shell_path}/web/base echo \"inquiry url is here ${base_url}team?subapp=inquiries&req=get&id=$updated_id\" | mail -s \"New inquiry added through Form\" -aFrom:${sender_addr} ${notification_addr} # ---end of inserted code -- if [ \"$session\" ];then rm -rf /var/www/tmp/$session fi Then you can get notification mail from inquiry APP when end user submit inquiry through Form. you can insert above code to any set action script of Form APPs or Scratch APPs.","title":"Set notification mail"},{"location":"cook_book/#design-recipe","text":"In this section, you can learn how you can change design of portal page of your APP. let's create main page with no authentication and no databox for making the easiest example. of course any type of authentication can be selected and any databox can be attached. $ sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 3 app_name: static_site Type of Authentication (1.shared pass | 2.user key | 3.other | 4.none): 4 primary databox: none","title":"Design recipe"},{"location":"cook_book/#cook-portal-page","text":"Let's start to cook portal page. you can edit the page by 2 way. 1 is edit the page on Base APP {$APP_UI.md.def} web UI.","title":"Cook portal page"},{"location":"cook_book/#update-appuimddef-on-base-app","text":"You can update portal page using both markdown and legach HTML. please check the markdown grammer here if needed. also you can update \"menu\" \"logo\" and \"footer\" on the same admin page. Field Language Description Description Markdown or HTML Main contents of portal page, you can use both HTML and Markdown YAML for navbar-right-header YAML Define links in even button menu of navbar right side YAML for navbar-left-links YAML Define links of navbar left side Logo HTML Insert logo to the portal page Footer Text Define footer","title":"Update $app.UI.md.def on Base APP"},{"location":"cook_book/#use-imagesdb","text":"You can upload logo or images to images.db. and then you can get link of img tag that can be utilized on description or logo field on $app.UI.md.def page.","title":"Use images.db"},{"location":"cook_book/#htmlcss-grammar","text":"Another way of updating portal is just editting hml.def directly {$APP_main.html.def} sudo vi /var/www/descriptor/static_site_main.html.def Note Please update under \"main\" class, then you can use light css framework","title":"HTML/CSS Grammar"},{"location":"cook_book/#update-left-header","text":"You can modify links and logo to the left header, in this example link to Docs is added. ! please upload image file to /var/www/html <div class=\"left-header\"> <a href=\"https://github.com\"><img src=\"../GitHub-Mark-32px.png\"></a> <a href=\"https://small-shell.org\"><h2>Docs</h2></a> </div>","title":"Update left header"},{"location":"cook_book/#implement-flex-table","text":"For implementing table, you must use some classes. table must be contain \"flext-table\" class. and header should have \"flex-table-header\" class. <div class=\"flex-table\"> <ul> <li class=\"flex-table-header\"> <p>column1</p> <p>column2</p> <p>column3</p> <p>column4</p> </li> <li> <p>data1.column1</p> <p>data1.column2</p> <p>data1.column3</p> <p>data1.column4</p> </li> </ul> </div>","title":"Implement flex-table"},{"location":"cook_book/#add-internal-page-link-to-the-left-navi","text":"In this example, page will have 3 section including table section. <div class=\"left-nav\"> <a href=\"#section1\"><p>section1</p></a> <a href=\"#section2\"><p>section2</p></a> <a href=\"#section3><p>section3p></a> </div>","title":"Add internal page link to the left navi"},{"location":"cook_book/#use-button","text":"Button must have \"button\" class. <button class=\"button\">Sample button</button>","title":"Use button"},{"location":"cook_book/#use-image","text":"In this example, we would like to use GitHub logo for image. please upload logo to \"/var/www/html\" that's static site dir. then write down the path to the HTML page. <a href=\"https://github.com\"><img src=\"../GitHub-Mark-32px.png\"></a>","title":"Use image"},{"location":"cook_book/#update-even-menu","text":"In this example, links in right header menu will be external links and mail addr. sudo vi /var/www/descriptor/common_parts/static_site_common_menu <li><a href=\"\">LINK 1</a></li> <li><a href=\"\">LINK 2</a></li> <li><a href=\"mailto:address\">MAIL</a></li> or If you don't need to use right header, just delete right header definition on $APP_main.html.def sudo vi /var/www/descriptor/static_site_main.html.def","title":"Update even menu"},{"location":"cook_book/#right-header-definition-on-mainhtmldef","text":"<div class=\"right-header\"> <button class=\"even-btn-menu\">=</button> <nav> <ul> %%common_menu </ul> </nav> </div>","title":"right header definition on main.html.def"},{"location":"cook_book/#add-footer","text":"Please use footer class for making footer. <div class=\"footer\"> <p>powered by small-shell.org</p> </div>","title":"Add footer"},{"location":"cook_book/#implement-form","text":"If you want to implement form, it's recommended to use class=\"app-form\" , please check following example. <div class=\"app-form\"> <h1>#new</h1> <form method=\"post\" action=\"\" onclick=\"document.charset='utf-8';\"> <ul> <li> <label>name</label> <input type=\"text\" name=\"name\" value=\"\" required> </li> <li> <label>description</label> <input type=\"text\" name=\"description\" value=\"\" > </li> </ul> </div>","title":"Implement form"},{"location":"cook_book/#change-color","text":"You can change color by updating $APP.css.def sudo vi /var/www/descriptor/static_site.css.def #----------------classes---------------# # Change header color .flex-header # Change right menu charactor .right-header a # Change right menu background and border color .right-header nav .right-header nav.open-menu # Change right header button (=) .right-header .even-btn-menu # Change button .main button # Change table header of main .main .flex-table-header #----------------------------------------#","title":"Change color"},{"location":"cook_book/#distribute-app-as-static-site","text":"You can export main page as static site. sudo /usr/local/small-shell/util/scripts/dist.sh $APP $EXPORT_DIR","title":"Distribute APP as static site"},{"location":"cook_book/#automate-ssl-cert-deployment","text":"In this cook, you can learn how to automate cert deployment by using Let's Encrypt as ssl certificate provider. please install certbot first.","title":"Automate SSL cert deployment"},{"location":"cook_book/#install-certbot","text":"# install snapd if its not installed sudo apt install snapd sudo systemctl start snapd sudo systemctl enable snapd # install certbot sudo snap install core sudo snap refresh core sudo snap install --classic certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot Note A record of the domain must be set on DNS server beforehand. and it must be global IP that can be reachable from Let's encrypt server","title":"Install certbot"},{"location":"cook_book/#generate-base-app","text":"Base APP that will use small-shell WEB srv should be launched as http server not https so far. FQDN must be same as A record that you set beforehand on your DNS server. $ sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 Type of server (1.small-shell WEB srv | 2.other WEB srv): 1 protocol (http | https): http WEB Server FQDN or IP addr (e.g. 192.168.10.1): $FQDN","title":"Generate Base APP"},{"location":"cook_book/#import-job-and-deploy-ssl-certificate","text":"Once you install certbot and launched Base APP, please kick configure.sh and deploy.sh. then dialog will be started. please answer your mail address that is reqiured to publish certificate by Let's Encrypt cd $HOME git clone https://github.com/naruoken/small-shell-apps cd ./small-shell-apps/ssl_auto chmod 755 *.sh sudo ./configure.sh sudo ./deploy.sh","title":"Import job and deploy ssl certificate"},{"location":"cook_book/#dialog","text":"Following is exmaple of dialog. small-shell root (/usr/local/small-shell): Saving debug log to /var/log/letsencrypt/letsencrypt.log Enter email address (used for urgent renewal and security notices) (Enter 'c' to cancel): ****@***.com - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Please read the Terms of Service at https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf. You must agree in order to register with the ACME server. Do you agree? - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - (Y)es/(N)o:Y - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Would you be willing, once your first certificate is successfully issued, to share your email address with the Electronic Frontier Foundation, a founding partner of the Let's Encrypt project and the non-profit organization that develops Certbot? We'd like to send you email about our work encrypting the web, EFF news, campaigns, and ways to support digital freedom. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - (Y)es/(N)o: Y Account registered. Requesting a certificate for ***.com If everything is no problem, https will be enabled automatically by deploy.sh.","title":"dialog"},{"location":"cook_book/#add-sudoer","text":"You must add following setting on sudoers to execute SSL refresh job regularly. $ sudo visudo # add following to bottom of the file, if there is no small-shell entry small-shell ALL=(ALL:ALL) NOPASSWD: /usr/local/small-shell/adm/*, /usr/local/small-shell/util/scripts/*","title":"Add Sudoer"},{"location":"cook_book/#check-job","text":"Once deploy is completed, ssl job that will refresh ssl cert will be on e-cron. $ sudo -u small-shell /usr/local/small-shell/bin/e-cron ls | grep ssl ssl_auto.enabled If it's enabled SSL implementation is completed.","title":"Check job"},{"location":"cook_book/#make-replica-for-load-balancing","text":"Small-Shell WEB APPs and databoxes can be synced to replica hosts and it can be put under load balancer. load balander must be setup beforehand on cloud env or physical env.","title":"Make replica for load balancing"},{"location":"cook_book/#requirement-of-load-balancing","text":"Please be aware that load balancer must ensure session persistence. And load balancing logic must be just TCP port proxy (not terminate SSL/TLS) because write request will go to real server FQDN of master server directly. it's recommended to use wild card certificate or automated certificate. implement procedure of automated certificate will be explained later step. Read Req > Load Balancer # ensure session persistence TCP port forwarding | - Master host #response on 80,443 port |- Replica hosts #response on 80,443 port Write Req > Load Balancer # ensure session persistence TCP port forwarding | - Master host #response on 80,443 port |- Replica hosts > it will be redirected to real server FQDN of master host","title":"Requirement of load balancing"},{"location":"cook_book/#setup-environment","text":"Before build replica, you need to setup Base APP using small-shell WEB srv on both master and replica server. when input server FQDN, please input real server FQDN (I mean not load balancing address) and protocol should be http so far not https if you will use ssl auto script later. @master sudo apt install lsyncd sudo mkdir /etc/lsyncd sudo apt install nginx sudo /usr/local/small-shell/adm/gen -databox # need to create dsataStore first sudo /usr/local/small-shell/adm/gen -app #Base APP (required), Scratch APP (optional) @replica sudo apt install rsync sudo apt install nginx sudo /usr/local/small-shell/adm/gen -app #Base APP (required)","title":"Setup environment"},{"location":"cook_book/#get-key","text":"Then let's get key to communicate between master and replica. \"show.pub\" option will show the key. please copy the key. it must be paste next STEP. When you execute mkrep.sh with the option first time, PATH of the key will be confirmed. it must be /home/small-shell/.ssh/id_rsa. @master @replica sudo /usr/local/small-shell/util/scripts/mkrep.sh show.pub Generating public/private rsa key pair. Enter file in which to save the key (/home/small-shell/.ssh/id_rsa): <Enter>","title":"Get key"},{"location":"cook_book/#build-replication","text":"Once key is ready, replication can be built by \"reg\" option. you must answer the dialog and paste public key that you get beorehand. @master sudo /usr/local/small-shell/util/scripts/mkrep.sh reg.replica > dialog will be started @replica sudo /usr/local/small-shell/util/scripts/mkrep.sh reg.master > dialog will be started","title":"Build Replication"},{"location":"cook_book/#automated-deployment-of-ssl-cert-for-load-balancing","text":"To enable https, it's recommended to use ssl auto script as following step. please check details of automation setting on Deploy auto SSL cetificate . @master # install snapd if its not installed sudo apt install snapd sudo systemctl start snapd sudo systemctl enable snapd # install certbot sudo snap install core sudo snap refresh core sudo snap install --classic certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot # deploy ssl atuo cd $HOME git clone https://github.com/naruoken/small-shell-apps cd ./small-shell-apps/ssl_auto chmod 755 *.sh sudo ./configure.sh sudo ./deploy.sh @replica cd $HOME git clone https://github.com/naruoken/small-shell-apps cd ./small-shell-apps/ssl_auto chmod 755 *.sh sudo ./configure.sh sudo ./deploy.sh If everything is no problem, https will be enabled automatically by deploy.sh. by the way configure.sh will set up reverse proxy using nginx package for flexible certification management in clustering environment. small-shell default web srv port will be changed to 8080 port.","title":"Automated deployment of SSL cert for load balancing"},{"location":"cook_book/#create-users-for-apps","text":"Once replication and SSL is ready, please create users for APPs. sudo /usr/local/small-shell/adm/ops add.usr:$user #Base APP sudo /usr/local/small-shell/adm/ops add.usr:$user app:$app #Scratch APP","title":"Create users for APPs"},{"location":"cook_book/#add-new-app-or-rebuild-replication","text":"If you will add new APP after starting replication or rebuild replication for adding new host, please remove all replication setting with purge option. @master @replica_hosts sudo /usr/local/small-shell/util/scripts/mkrep.sh purge sudo /usr/local/small-shell/util/scripts/mkrep.sh show.pub @master sudo /usr/local/small-shell/adm/gen -app #create new APP sudo /usr/local/small-shell/util/scripts/mkrep.sh reg.replica @replica_hosts sudo /usr/local/small-shell/util/scripts/mkrep.sh reg.master","title":"Add new APP or rebuild replication."},{"location":"cook_book/#backup-restore-example","text":"In this cook, 1 production node will send backup to backuo node through e-cron HUB API | prod node | -- | backup node #e-cron HUB|","title":"Backup &amp; Restore example"},{"location":"cook_book/#usage-of-bkup-and-rstr","text":"sudo /usr/local/small-shell/adm/bkup $dir sudo /usr/local/small-shell/adm/rstr $dir","title":"Usage of bkup and rstr"},{"location":"cook_book/#operation-at-backup-node","text":"It's required to Launch Base APP and check e-cron URL and key @backup_node sudo /usr/local/small-shell/adm/gen -app cat /usr/local/small-shell/web/base | grep hubapi cat /usr/local/small-shell/web/base | grep api_authkey","title":"Operation at backup node"},{"location":"cook_book/#operation-at-production-node","text":"Once e-cron HUB is ready,define backup & sync job on pdocution node. bkup command will backup every data of small-shell including user info, databox{data,log}, APP, Job... and sudo privilede is required for executing bkup command. please add sudoers beforehand. @production_node $ sudo visudo # add folowing line, if there is no small-shell entry small-shell ALL=(ALL:ALL) NOPASSWD: /usr/local/small-shell/adm/*, /usr/local/small-shell/util/scripts/* # define backup job $ sudo /usr/local/small-shell/adm/gen -job Job Name: backup Type of job (1.job automation | 2.file exchange) : 1 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: any Hour [ any | 0-23 ]: 0 Min [ any | 0-59 ]: 1 Week [ any | mon - sun ]: any Exec command or batch script: sudo /usr/local/small-shell/adm/bkup /var/tmp # define push job, please confirm URL and authkey at backup node beforehand $ sudo /usr/local/small-shell/adm/gen -job Type of job (1.job automation | 2.file exchange) : 2 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: any Hour [ any | 0-23 ]: 1 Min [ any | 0-59 ]: 0 Week [ any | mon - sun ]: any Type of file exchange (push | get): push local directory: /var/tmp file_name: *tar.xz HUB API URL: $hubapi API authkey: $api_authkey","title":"Operation at production node"},{"location":"cook_book/#backup-file","text":"If bkup/push job works fine, there is backup files on que/file directry on backup node @backup_node ls /usr/local/small-shell/util/e-cron/que/file $server.core.tar.xz $server.ssh.tar.xz $server.www.tar.xz","title":"Backup file"},{"location":"cook_book/#restore","text":"For restoring backup file, please install small-shell from git and launch Base APP first. and rstr command option must be directory where backup files are copied from backup node. @restore_node sudo /usr/local/small-shell/adm/rstr $dir","title":"Restore"},{"location":"cook_book/#dictionary-create-lang-pack","text":"You can create language pack for WEB APP using following template. cd $HOME git clone https://github.com/naruoken/small-shell-apps cd small-shell-apps/dictionary/template","title":"Dictionary (create lang pack)"},{"location":"cook_book/#usage-of-keywords-file","text":"\"keywords\" file will be used for translating words to your language. please update them. by the way {%%%%%%} is a separator that is used instead of conma. # at small-shell-apps/dictionary/template vi keywords ----- ########################################################## # usage: original_word{%%%%%%}translated_word ########################################################## ScratchAPP:APP Portal{%%%%%%} ScratchAPP:Table{%%%%%%} ScratchAPP:Log Out{%%%%%%} Your Key is successfully generated.{%%%%%%} ----","title":"Usage of keywords file"},{"location":"cook_book/#deployment","text":"Once keywords file is updated, deploy it by using deploy.sh # at small-shell-apps/dictionary/template ./deploy.sh","title":"Deployment"},{"location":"cook_book/#log-analyzer","text":"You can import job for analyzing log of small-shell web from github.","title":"Log analyzer"},{"location":"cook_book/#link-to-code-is-here","text":"cd $HOME git clone https://github.com/naruoken/small-shell-apps cd small-shell-apps/ssw_log_analyzer # Deploy job sudo ./deploy.sh","title":"Link to code is here"},{"location":"cook_book/#confirm-imported-job","text":"If deploy.sh executed without any error, 1 databox {web_analyer} and 3 job will be imported.","title":"confirm imported job"},{"location":"cook_book/#log-analyzer_1","text":"sudo -u small-shell /usr/local/small-shell/bin/e-cron cat.ssw_log_analyzer > JOB: ssw_log_analyzer def:/usr/local/small-shell/util/e-cron/def/ssw_log_analyzer.def -------------SCHEDULE---------------- min: 1 hour: 0 date: any month: any week: any -------------DEFINITION---------------- exec_command=\"/usr/local/small-shell/util/scripts/ssw_log_analyzer.sh\" input_message=\"\" output_message=\"analyzer.done\" hubapi=\"\" api_authkey=\"\"","title":"log analyzer"},{"location":"cook_book/#statistics","text":"sudo -u small-shell /usr/local/small-shell/bin/e-cron cat.ssw_statistics > JOB: ssw_statistics def:/usr/local/small-shell/util/e-cron/def/ssw_statistics.def -------------SCHEDULE---------------- min: 10 hour: 0 date: any month: any week: any -------------DEFINITION---------------- exec_command=\"/usr/local/small-shell/util/scripts/ssw_statistics.sh\" input_message=\"analyzer.done\" output_message=\"\" hubapi=\"\" api_authkey=\"\"","title":"statistics"},{"location":"cook_book/#confirm-result","text":"Job will push the result to the databox named as web_annalyzer. Log analytics target is srvdump.log.1 it means 1 day ago log. you can check the graph on console. using #stats command.","title":"Confirm result"},{"location":"data_shell_tour/","text":"DATA Shell \"DATA shell\" manage \"databox\" that is mainly designed to be used by WEB APP of APP shell. DATA shell is interface of manage databox and it can ensure data integrity utilizing hash chain. Key value store Data will be saved in databox as key value type of data sets like this. view of databox will be table type on WEB APP. # DataboxA --------------------------------------------------------------------------------------------- dataset1:{ primary_key(col1):value, key(col2):value, key(col3):value, ... key(colX):value } dataset2:{ primary_key(col1):value, key(col2):value, key(col3):value, ... key(colX):value } dataset3:{ primary_key(col1):value, key(col2):value, key(col3):value, ... key(colX):value } dataset4:{ primary_key(col1):value, key(col2):value, key(col3):value, ... key(colX):value } .. datasetX:{ primary_key(col1):value, key(col2):value, key(col3):value, ... key(colX):value } ---------------------------------------------------------------------------------------------- Feature small-shell databox could have both feature of relational database and key value storage. if you want to use databox as master database, please set specific name to primary key. if it's just used as flat data store, please set hashid to primary key. see detail as below. Pattern1 Generate Databox as master database Use databox as master database. in this example, item_name is set as specific primary key name. sudo /usr/local/small-shell/adm/gen -databox Databox Name: item.db primary_key(col1): item_name primary_key label: Item Name Add more column to the databox? (yes | no): yes key(col2) name: description key(col2) label: Description Data Type (text | select | radio | checkbox | email | num | tel | date | date-time | url | textarea | file | pdls | mls): text Pattern2 Generate Databox as flat box If you want to use databox as flat data store, just set \"hashid\" as parimary key name. value of primarykey(hashid) will be generated by system automatically. sudo /usr/local/small-shell/adm/gen -databox Databox Name: survey.db primary_key(col1): hashid key(col2) name: impression key(col2) label: Impression Data Type (text | select | radio | checkbox | email | num | tel | date | date-time | url | textarea | file | pdls | mls): select please define parameters using comma as separator: Good,Not Good Require to input each time? (yes | no): Directory Structure Data will be stored on Unix file system with indexing and logging transactions. sudo ls /usr/local/small-shell/databox/$databox data def file hashchain index log log.dump Command reference You can access datas through DATA_shell command /usr/local/small-shell/bin/DATA_shell Note DATA_shell has CLI, you can use these commands with sudo small-shell e.g.) sudo -u small-shell /usr/local/small-shell/bin/DATA_shell parama1:$param1 param2:$param2 Base params param description usage authkey Set key for authentication authkey:$authkey session Set session token for authentication. if you have session, you don't need key session:$session pin Set pin for authorize session token pin:$pin databox Set target databox name databox:$databox type Set target data type:data , type:log format Set data format format:html_tag , format:json , format:none command Set command command:$command Command Handler params You can exec several type of command by using DATA_shell \"command:\" option. by the way, commands will refer to index not refer to data file directly. Command usage exec unix command command:grep_-v_test_\"|\"_wc_-l just filtering data command:word1_word2 show data array command:show_all show data array with specific line or column command:show_all[filter=wordA,wordB] show data array by sorting command:show_all[sort=option,col_num] show data array by filtering specific column command:show_all[filter=col1{word}] show 100% match data with specific column command:show_all[match=col1{word}] Command handler exmaple # get data using authkey authkey=\"dGVzdDoyOGZkYTJlOTFjODBkZ************\" databox=\"item.db\" sudo -u small-shell /usr/local/small-shell/bin/DATA_shell authkey:$authkey databox:$databox type:data command:show_all format:json # get data using session token session=\"06deccfc51ec102da4b16db09cf96345a160ce51996fa3533b******\" pin=\"****\" databox=\"item.db\" sudo -u small-shell /usr/local/small-shell/bin/DATA_shell session:$session pin:$pin databox:$databox type:data command:show_all format:json DATA Handler params You can set or show datas using data handler Action usage Set Data action:set Get Data action:get Delete Data action:del Set id id:$id Create new dataset id:new Set data-key scope key:key_nameA Set data-keys scope keys:key_name1,key_name2,key_name3 Set data-keys as all keys:all Set value to the scope value:$value Set null value value:%%null Set input_dir input_dir:/tmp/yyyymmdd app app:$app Data handler exmaple You can set value by 2 way. first way is just typing value to the commandine with value: tag, another way is just put input_dir and upload key file which has value to the directory. authkey=\"dGVzdDoyOGZkYTJlOTFjODBkZ************\" databox=\"item.db\" id=\"d5397fed4d6e0da54ed769232e9706d0f5bbf805f251b3a0b2c9083aa00e6874\" ----------------------------- # get value ----------------------------- sudo -u small-shell /usr/local/small-shell/bin/DATA_shell authkey:$authkey databox:$databox action:get keys:all id:$id format:json ----------------------------- # set value with CLI input ----------------------------- # set sudo -u small-shell /usr/local/small-shell/bin/DATA_shell authkey:$authkey databox:$databox action:set key:description value:test1 id:$id ----------------------------- # set value with file ----------------------------- # set echo \"test2\" > /tmp/description sudo -u small-shell /usr/local/small-shell/bin/DATA_shell authkey:$authkey databox:$databox action:set key:description input_dir:/tmp id:$id Meta charactors in index Some meta charactors are removed or changed to specific tags in the index to be searchable. index is just an index, data itself will not be impacted. It's required to use Meta charactors {%*%} when accessing index by executing DATA_shell with command: option. ` - delete : - {%%%} & - {%%%%} / - {%%%%%} , - {%%%%%%} _ - {%%%%%%%} ( - {%%%%%%%%} ) - {%%%%%%%%%} [ - {%%%%%%%%%%} ] - {%%%%%%%%%%%} | - {%%%%%%%%%%%%} # - {%%%%%%%%%%%%%} $ - {%%%%%%%%%%%%%%} * - {%%%%%%%%%%%%%%%} % - {%%%%%%%%%%%%%%%%} ' - {%%%%%%%%%%%%%%%%%} null - - Hashchain Hashchain is created by que.sh which make index and log and hashchain as well. log.dump data will be hashed and it will be integrated to synthesis hash with previous updated keys. following is code of que.sh #view /usr/local/small-shell/sbin/que.sh log_dump=\"${timestamp} user:${user} primary_key:$primary_key_value updated_key:${updated_key} value:${value} #id:$id\" # gen hash hash=`echo \"$log_dump\" | sha256sum | awk '{print $1}'` # update hash chain last_hash=`grep synthesis_hash $ROOT/databox/$databox/hashchain | tail -1 | awk -F \":\" '{print $2}'` synthesis_hash=` echo ${last_hash}${hash} | sha256sum | awk '{print $1}'` echo \"`date +%Y-%m-%d` `date +%T` id :$id\" >> $ROOT/databox/$databox/hashchain echo \"`date +%Y-%m-%d` `date +%T` hash :$hash\" >> $ROOT/databox/$databox/hashchain echo \"`date +%Y-%m-%d` `date +%T` synthesis_hash :$synthesis_hash\" >> $ROOT/databox/$databox/hashchain Download hashchain Base APP user can download hash chain and verificate data integrity by themselves. Meta command \"meta\" command can be used for gathering meta data. sudo -u small-shell /usr/local/small-shell/bin/meta #------------------------------------------------------ # PARAM FOR META # action(L1).action(L2):target{param} #---------------------------------------------------------- # meta get.chain:$databox # meta get.progress:$import_session # meta get.num:$databox # meta get.databox # meta get.server # meta get.attr:$user{$attribute_key} # meta get.attr:$app/$user{$attribute_key} # meta get.key:$databox{primary} # meta get.key:$databox{all} # meta get.pdls:$databox{filter_word} # meta get.label:$databox{all} # meta get.header:$databox{csv} # meta get.header:$databox{json} # meta get.tag:$databox # meta get.tag:$app{$databox} # meta get.command # meta get.IP #show whitelisted IPs # meta get.statistics:ls{html_tag} # meta get.statistics:ls.$filter_word1,$filter_word2{html_tag} # meta get.statistics:$statistics{graph} # meta get.statistics:$statistics{raw_data} # meta get.shared_pass:$app # meta get.users # meta get.users:$app # meta get.link:$app # meta chk.form:$databox #---------------------------------------------------------- Batch for DATA shell You can import or delete datas using batch scripts. /usr/local/small-shell/util/scripts # bat_import.sh ## import file must be csv format usage: sudo -u small-shell bat_import.sh $authkey $databox $import_file # data_del.sh ## list file should just contain IDs of target datasets usage: sudo -u small-shell del_datasets.sh $authkey $databox $list_file Gen databox using db.def template You can define data structure using db.def template, util/scripts/bat_gen.sh can generate databox without dialog if you use db.def. template sample is here. db.def Template please freely add column by using \"+addcol\" declaration. #--------------------------------------------------------------- # db definition #--------------------------------------------------------------- # databox databox=\"\" # col1 #------------------------------------------- primary_key=\"\" primary_key_label=\"\" #------------------------------------------- +addcol # col2 #------------------------------------------- col2_key_name=\"\" col2_key_label=\"\" col2_type=\"\" # only for radio, select. you must use comma as separator col2_key_params=\"\" # only for pdls col2_primary_databox=\"\" # required col2_required=\"\" #------------------------------------------- +addcol # col3 #------------------------------------------- col3_key_name=\"\" col3_key_label=\"\" col3_type=\"\" # only for radio, select. you must use comma as separator col3_key_params=\"\" # only for pdls col3_primary_databox=\"\" # required option col3_required=\"\" #------------------------------------------- Generate Databox by bat_gen.sh Command example is here. In this example we use /tmp as temporary directory. bat_gen.sh will generate databox promptly. vi /tmp/db.def #please writedown definition sudo /usr/local/small-shell/util/scripts/bat_gen.sh /tmp/db.def Import / Export data You can import datas through WEB APP or batch command. csv format can be downloaded from Base APP table #csv tag or import form. Note If you are using hashid for primary key, please input value as \"new\". if you are not use hashid as primary key, you can input any value to the key. Import throgh Base APP You can import datas from Base APP \"Data Import\" menu. Import format can be download on the page. Import through batch Instead of Web UI, you can also import data through bat_import script. /usr/local/small-shell/util/scripts/bat_import $authkey $databox $file tail -f /usr/local/small-shell/tmp/log/$session.log Export data through APP You can export datas with csv format on Base APP table. Delete databox There is util script for deleting databox. usage: sudo /usr/local/small-shell/util/scripts/del_databox $databox Verified environment OS: Ubuntu 2X (recommnded), Debian 1X, macOS Monterey, CentOS 7, RHEL 8 bash: 4.X curl: 7.X # REQUIRED commands Core commands : sha256sum, flock, base64 awk : above 3 that can use \"IGNORECASE = 1;\" option sed : above 4.2.2 that can use \"-z\" option PHP : any version which have PHP url encyption libraries","title":"DATA Shell"},{"location":"data_shell_tour/#data-shell","text":"\"DATA shell\" manage \"databox\" that is mainly designed to be used by WEB APP of APP shell. DATA shell is interface of manage databox and it can ensure data integrity utilizing hash chain.","title":"DATA Shell"},{"location":"data_shell_tour/#key-value-store","text":"Data will be saved in databox as key value type of data sets like this. view of databox will be table type on WEB APP. # DataboxA --------------------------------------------------------------------------------------------- dataset1:{ primary_key(col1):value, key(col2):value, key(col3):value, ... key(colX):value } dataset2:{ primary_key(col1):value, key(col2):value, key(col3):value, ... key(colX):value } dataset3:{ primary_key(col1):value, key(col2):value, key(col3):value, ... key(colX):value } dataset4:{ primary_key(col1):value, key(col2):value, key(col3):value, ... key(colX):value } .. datasetX:{ primary_key(col1):value, key(col2):value, key(col3):value, ... key(colX):value } ----------------------------------------------------------------------------------------------","title":"Key value store"},{"location":"data_shell_tour/#feature","text":"small-shell databox could have both feature of relational database and key value storage. if you want to use databox as master database, please set specific name to primary key. if it's just used as flat data store, please set hashid to primary key. see detail as below.","title":"Feature"},{"location":"data_shell_tour/#pattern1-generate-databox-as-master-database","text":"Use databox as master database. in this example, item_name is set as specific primary key name. sudo /usr/local/small-shell/adm/gen -databox Databox Name: item.db primary_key(col1): item_name primary_key label: Item Name Add more column to the databox? (yes | no): yes key(col2) name: description key(col2) label: Description Data Type (text | select | radio | checkbox | email | num | tel | date | date-time | url | textarea | file | pdls | mls): text","title":"Pattern1 Generate Databox as master database"},{"location":"data_shell_tour/#pattern2-generate-databox-as-flat-box","text":"If you want to use databox as flat data store, just set \"hashid\" as parimary key name. value of primarykey(hashid) will be generated by system automatically. sudo /usr/local/small-shell/adm/gen -databox Databox Name: survey.db primary_key(col1): hashid key(col2) name: impression key(col2) label: Impression Data Type (text | select | radio | checkbox | email | num | tel | date | date-time | url | textarea | file | pdls | mls): select please define parameters using comma as separator: Good,Not Good Require to input each time? (yes | no):","title":"Pattern2 Generate Databox as flat box"},{"location":"data_shell_tour/#directory-structure","text":"Data will be stored on Unix file system with indexing and logging transactions. sudo ls /usr/local/small-shell/databox/$databox data def file hashchain index log log.dump","title":"Directory Structure"},{"location":"data_shell_tour/#command-reference","text":"You can access datas through DATA_shell command /usr/local/small-shell/bin/DATA_shell Note DATA_shell has CLI, you can use these commands with sudo small-shell e.g.) sudo -u small-shell /usr/local/small-shell/bin/DATA_shell parama1:$param1 param2:$param2","title":"Command reference"},{"location":"data_shell_tour/#base-params","text":"param description usage authkey Set key for authentication authkey:$authkey session Set session token for authentication. if you have session, you don't need key session:$session pin Set pin for authorize session token pin:$pin databox Set target databox name databox:$databox type Set target data type:data , type:log format Set data format format:html_tag , format:json , format:none command Set command command:$command","title":"Base params"},{"location":"data_shell_tour/#command-handler-params","text":"You can exec several type of command by using DATA_shell \"command:\" option. by the way, commands will refer to index not refer to data file directly. Command usage exec unix command command:grep_-v_test_\"|\"_wc_-l just filtering data command:word1_word2 show data array command:show_all show data array with specific line or column command:show_all[filter=wordA,wordB] show data array by sorting command:show_all[sort=option,col_num] show data array by filtering specific column command:show_all[filter=col1{word}] show 100% match data with specific column command:show_all[match=col1{word}]","title":"Command Handler params"},{"location":"data_shell_tour/#command-handler-exmaple","text":"# get data using authkey authkey=\"dGVzdDoyOGZkYTJlOTFjODBkZ************\" databox=\"item.db\" sudo -u small-shell /usr/local/small-shell/bin/DATA_shell authkey:$authkey databox:$databox type:data command:show_all format:json # get data using session token session=\"06deccfc51ec102da4b16db09cf96345a160ce51996fa3533b******\" pin=\"****\" databox=\"item.db\" sudo -u small-shell /usr/local/small-shell/bin/DATA_shell session:$session pin:$pin databox:$databox type:data command:show_all format:json","title":"Command handler exmaple"},{"location":"data_shell_tour/#data-handler-params","text":"You can set or show datas using data handler Action usage Set Data action:set Get Data action:get Delete Data action:del Set id id:$id Create new dataset id:new Set data-key scope key:key_nameA Set data-keys scope keys:key_name1,key_name2,key_name3 Set data-keys as all keys:all Set value to the scope value:$value Set null value value:%%null Set input_dir input_dir:/tmp/yyyymmdd app app:$app","title":"DATA Handler params"},{"location":"data_shell_tour/#data-handler-exmaple","text":"You can set value by 2 way. first way is just typing value to the commandine with value: tag, another way is just put input_dir and upload key file which has value to the directory. authkey=\"dGVzdDoyOGZkYTJlOTFjODBkZ************\" databox=\"item.db\" id=\"d5397fed4d6e0da54ed769232e9706d0f5bbf805f251b3a0b2c9083aa00e6874\" ----------------------------- # get value ----------------------------- sudo -u small-shell /usr/local/small-shell/bin/DATA_shell authkey:$authkey databox:$databox action:get keys:all id:$id format:json ----------------------------- # set value with CLI input ----------------------------- # set sudo -u small-shell /usr/local/small-shell/bin/DATA_shell authkey:$authkey databox:$databox action:set key:description value:test1 id:$id ----------------------------- # set value with file ----------------------------- # set echo \"test2\" > /tmp/description sudo -u small-shell /usr/local/small-shell/bin/DATA_shell authkey:$authkey databox:$databox action:set key:description input_dir:/tmp id:$id","title":"Data handler exmaple"},{"location":"data_shell_tour/#meta-charactors-in-index","text":"Some meta charactors are removed or changed to specific tags in the index to be searchable. index is just an index, data itself will not be impacted. It's required to use Meta charactors {%*%} when accessing index by executing DATA_shell with command: option. ` - delete : - {%%%} & - {%%%%} / - {%%%%%} , - {%%%%%%} _ - {%%%%%%%} ( - {%%%%%%%%} ) - {%%%%%%%%%} [ - {%%%%%%%%%%} ] - {%%%%%%%%%%%} | - {%%%%%%%%%%%%} # - {%%%%%%%%%%%%%} $ - {%%%%%%%%%%%%%%} * - {%%%%%%%%%%%%%%%} % - {%%%%%%%%%%%%%%%%} ' - {%%%%%%%%%%%%%%%%%} null - -","title":"Meta charactors in index"},{"location":"data_shell_tour/#hashchain","text":"Hashchain is created by que.sh which make index and log and hashchain as well. log.dump data will be hashed and it will be integrated to synthesis hash with previous updated keys. following is code of que.sh #view /usr/local/small-shell/sbin/que.sh log_dump=\"${timestamp} user:${user} primary_key:$primary_key_value updated_key:${updated_key} value:${value} #id:$id\" # gen hash hash=`echo \"$log_dump\" | sha256sum | awk '{print $1}'` # update hash chain last_hash=`grep synthesis_hash $ROOT/databox/$databox/hashchain | tail -1 | awk -F \":\" '{print $2}'` synthesis_hash=` echo ${last_hash}${hash} | sha256sum | awk '{print $1}'` echo \"`date +%Y-%m-%d` `date +%T` id :$id\" >> $ROOT/databox/$databox/hashchain echo \"`date +%Y-%m-%d` `date +%T` hash :$hash\" >> $ROOT/databox/$databox/hashchain echo \"`date +%Y-%m-%d` `date +%T` synthesis_hash :$synthesis_hash\" >> $ROOT/databox/$databox/hashchain","title":"Hashchain"},{"location":"data_shell_tour/#download-hashchain","text":"Base APP user can download hash chain and verificate data integrity by themselves.","title":"Download hashchain"},{"location":"data_shell_tour/#meta-command","text":"\"meta\" command can be used for gathering meta data. sudo -u small-shell /usr/local/small-shell/bin/meta #------------------------------------------------------ # PARAM FOR META # action(L1).action(L2):target{param} #---------------------------------------------------------- # meta get.chain:$databox # meta get.progress:$import_session # meta get.num:$databox # meta get.databox # meta get.server # meta get.attr:$user{$attribute_key} # meta get.attr:$app/$user{$attribute_key} # meta get.key:$databox{primary} # meta get.key:$databox{all} # meta get.pdls:$databox{filter_word} # meta get.label:$databox{all} # meta get.header:$databox{csv} # meta get.header:$databox{json} # meta get.tag:$databox # meta get.tag:$app{$databox} # meta get.command # meta get.IP #show whitelisted IPs # meta get.statistics:ls{html_tag} # meta get.statistics:ls.$filter_word1,$filter_word2{html_tag} # meta get.statistics:$statistics{graph} # meta get.statistics:$statistics{raw_data} # meta get.shared_pass:$app # meta get.users # meta get.users:$app # meta get.link:$app # meta chk.form:$databox #----------------------------------------------------------","title":"Meta command"},{"location":"data_shell_tour/#batch-for-data-shell","text":"You can import or delete datas using batch scripts. /usr/local/small-shell/util/scripts # bat_import.sh ## import file must be csv format usage: sudo -u small-shell bat_import.sh $authkey $databox $import_file # data_del.sh ## list file should just contain IDs of target datasets usage: sudo -u small-shell del_datasets.sh $authkey $databox $list_file","title":"Batch for DATA shell"},{"location":"data_shell_tour/#gen-databox-using-dbdef-template","text":"You can define data structure using db.def template, util/scripts/bat_gen.sh can generate databox without dialog if you use db.def. template sample is here.","title":"Gen databox using db.def template"},{"location":"data_shell_tour/#dbdef-template","text":"please freely add column by using \"+addcol\" declaration. #--------------------------------------------------------------- # db definition #--------------------------------------------------------------- # databox databox=\"\" # col1 #------------------------------------------- primary_key=\"\" primary_key_label=\"\" #------------------------------------------- +addcol # col2 #------------------------------------------- col2_key_name=\"\" col2_key_label=\"\" col2_type=\"\" # only for radio, select. you must use comma as separator col2_key_params=\"\" # only for pdls col2_primary_databox=\"\" # required col2_required=\"\" #------------------------------------------- +addcol # col3 #------------------------------------------- col3_key_name=\"\" col3_key_label=\"\" col3_type=\"\" # only for radio, select. you must use comma as separator col3_key_params=\"\" # only for pdls col3_primary_databox=\"\" # required option col3_required=\"\" #-------------------------------------------","title":"db.def Template"},{"location":"data_shell_tour/#generate-databox-by-bat_gensh","text":"Command example is here. In this example we use /tmp as temporary directory. bat_gen.sh will generate databox promptly. vi /tmp/db.def #please writedown definition sudo /usr/local/small-shell/util/scripts/bat_gen.sh /tmp/db.def","title":"Generate Databox by bat_gen.sh"},{"location":"data_shell_tour/#import-export-data","text":"You can import datas through WEB APP or batch command. csv format can be downloaded from Base APP table #csv tag or import form. Note If you are using hashid for primary key, please input value as \"new\". if you are not use hashid as primary key, you can input any value to the key.","title":"Import / Export data"},{"location":"data_shell_tour/#import-throgh-base-app","text":"You can import datas from Base APP \"Data Import\" menu. Import format can be download on the page.","title":"Import throgh Base APP"},{"location":"data_shell_tour/#import-through-batch","text":"Instead of Web UI, you can also import data through bat_import script. /usr/local/small-shell/util/scripts/bat_import $authkey $databox $file tail -f /usr/local/small-shell/tmp/log/$session.log","title":"Import through batch"},{"location":"data_shell_tour/#export-data-through-app","text":"You can export datas with csv format on Base APP table.","title":"Export data through APP"},{"location":"data_shell_tour/#delete-databox","text":"There is util script for deleting databox. usage: sudo /usr/local/small-shell/util/scripts/del_databox $databox","title":"Delete databox"},{"location":"data_shell_tour/#verified-environment","text":"OS: Ubuntu 2X (recommnded), Debian 1X, macOS Monterey, CentOS 7, RHEL 8 bash: 4.X curl: 7.X # REQUIRED commands Core commands : sha256sum, flock, base64 awk : above 3 that can use \"IGNORECASE = 1;\" option sed : above 4.2.2 that can use \"-z\" option PHP : any version which have PHP url encyption libraries","title":"Verified environment"},{"location":"python_tour/","text":"Pyshell Pyshell is designed for python integration. it can call python librarise {matplotlib, numpy, pandas} for analyzing data and generating png graph. Setup Env @ubuntu/debian Install library for compiling python3 sudo apt update sudo apt install build-essential libbz2-dev libdb-dev \\ libreadline-dev libffi-dev libgdbm-dev liblzma-dev \\ libncursesw5-dev libsqlite3-dev libssl-dev \\ zlib1g-dev uuid-dev tk-dev Install python This is an expamle of install python3.9 # Download cd $HOME wget https://www.python.org/ftp/python/3.12.4/Python-3.12.4.tar.xz tar xJf Python-3.12.4.tar.xz # Compiling cd Python-3.12.4 ./configure make # install sudo make install ls /usr/local/lib/python3.12 ls /usr/local/bin/pip3.12 Install python libraries # please ignore just WARNINGS sudo /usr/local/bin/pip3.12 install numpy sudo /usr/local/bin/pip3.12 install pandas sudo /usr/local/bin/pip3.12 install matplotlib # mkdir for matplotlib sudo mkdir -p /home/small-shell/.config/matplotlib sudo mkdir -p /home/small-shell/.cache/matplotlib sudo chown -R small-shell:small-shell /home/small-shell Note If you are using macOS, python3 must be installed as default. please just install librarise with following command which pyphon3; which pip3 xcode-select --install sudo python3 -m pip install --upgrade pip sudo pip3 install numpy; sudo pip3 install pandas; sudo pip3 install matplotlib Define python path sudo vi /usr/local/small-shell/util/pyshell/env --code-- PYTHON=\"/usr/local/bin/python3.12\" -------- Make statistics job sudo /usr/local/small-shell/adm/gen -job It' required to complete OS setup and setup of small-shell Base APP, see detail at Quickstart . Following is an expamle that count up number of record of inventory.db $ sudo /usr/local/small-shell/adm/gen -job Job Name: countup_num_of_record Type of job (1.job automation | 2.file exchange) : 1 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: any Hour [ any | 0-23 ]: 0 Min [ any | 0-59 ]: 1 Week [ any | mon - sun ]: any Exec command or batch script: countup.sh databox:inventory.db type:line frequency:daily # enable job $ sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.countup_record # execute manually, please execute several time because line graph needs at least 2 teims execution. $ sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.countup_record countup_record successfully completed # re-execute manually. because line graph need to have at least 2 line. $ sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.countup_record countup_record successfully completed View statistics You can view statistics on console of Base APP. pyshell could make graph using pandas and matplotlib librarise. please exec #stats at console, then you can access to graph. Pop up graph is here. Utilscripts You can use util scripts for statistics. ls /usr/local/small-shell/util/scripts Note utilscripts should be executed small-shell priviledge. e.g.) sudo -u small-shell /usr/local/small-shell/util/scripts/$utilscript param1:$param1 param2:$param2 List of utilscripts script description countup.sh countup number of data, if you don't set filter words, it will count lines of databox. if you set filter word, it will count number of data per filter. in that case, filter word will be label of graph sumup.sh sumup specific column data, if you set filters , it will sumup data of filtered array of column data. in that case, filter word will be label of graph Parameters for util scirpts param description allowed param useage databox target databox any databox:$databox title title of graph (optional) any title:$title X_lalbel label of X line (optional) any X_label:$X_label Y_lalbel label of Y line (optional) any Y_label:$Y_label type graph type, deault is line line bar pie type:$type frequency frequency of data gathering batch, it will adjust titles and xticks formats adequately. default will be daily monthly daily hourly snapshot frequency:$frequency filters words for countup or sumup in databox, these words will be labels of graph. please set key {key: or filter_key:} at same timing any filters:word1,word2 or filter:word key key name of the column which is filtering target of countup any key:$key sumup_key key name of the column which will be sumuped any sumup_key:$key filter_key key name of the column which sumup , if the dataset contain the word in the column, it will be targetted any filter_key:$key glogal_filter filtering data from pipeline from databox, but it will not be label any global_filter:word diff calc difference from last statistics number, default is \"no\" any diff:no or diff:yes set_time set specific date to X line line set_time:yyyy-mm-dd{####}HH:MM Note If you want to put space in the title, please use {####}. it's changed to space internally in th pyshell. You can insert command result to the parameter, such like global_filter:`date +%Y-%m-%d` Usage please set following commands as exec_command in \"#sudo gen -job\" dialog. or you can execute the script manually. then you can confirm result on console box of Standard APP. Countup e.g.) just countup survey result that is stored at suvery.box sudo -u small-shell /usr/local/small-shell/util/scripts/countup.sh databox:survey.box type:bar frequency:daily Target Databox for analytics survey.box Countup with filtering e.g.) countup survey result which have \"Good\" or \"Average\" or \"Bad\" as feedback in impression key column. sudo -u small-shell /usr/local/small-shell/util/scripts/countup.sh databox:survey.box key:impression filters:Good,Average,Bad \\ type:bar frequency:snapshot sudo -u small-shell /usr/local/small-shell/util/scripts/countup.sh databox:survey.box \\ key:impression filters:Good,Average,Bad type:pie title:2024-11-28_survey_result frequency:snapshot Sumup Scenario Create monthly graph of inventory.db by sumup each type of inventory Target Databox for analytics] inventory.db {item_name:text, category:select, num:num} Sumup with filtering sudo -u small-shell /usr/local/small-shell/util/scripts/sumup.sh databox:inventory.db type:bar filter_key:category filter:PC,network_device,audio_visual,furniture,other sumup_key:num frequency:snapshot Delete rawdata and graph cd /usr/local/small-shell/util/statistics cd rawdata or cd graph sudo rm $target BI tool integration You can export rawdata of statistics to BI tool. If graph must be complex one, we would like to recommend to use BI tool. rawdata of statistics You can check, export or delete rawdata on small-shell server. ls /usr/local/small-shell/util/statistics/rawdata rawdata format Please transfer tehse rawdatas to BI tool. Time,item1,item2 2021-01-01 01:00:00,1,2 2021-01-01 02:00:00,1,2 pyshell Pyshell is a intermediate generation tool for python programs. it will generate python program which contain Pandas , matplotlib and numpy. You can generate graph through pygraph.sh ls /usr/local/small-shell/util/pyshell/pygraph.sh #-------------------------------------------------------------- # usage: pygraph.sh type:$type input:$input output:$output \\ # title:$title X_label:$X_label Y_label:$Y_label #-------------------------------------------------------------- # graph types #-------------------------------------------------------------- # type:bar,hourly # type:bar,daily # type:bar,monthly # type:line,hourly # type:line,daily # type:line,monthly # type:pie,snapshot{yyyy-mm-dd HH:MM} # type:bar,snapshot{yyyy-mm-dd HH:MM} #-------------------------------------------------------------- pyshell libraries Pyshell could generate python programs using core libraries. /usr/local/small-shell/util/pyshell/lib Input for pyshell Input data must be csv and column 1 must be \"Time\", countup.sh or sumup.sh could generate statistic data in this standard format, then pass to pyshell for generating matplotlib graph. sample data format Time,label1,label2 2021-01-01 01:00:00,1,2 2021-01-01 02:00:00,1,2 Change fonts-family If your charactor is not shown correctly in graph, please install favorite fonts and reflect to pyshell. followings are exmaple. Linux (ubuntu) # installation sudo apt install fonts-ipaexfont # change fonts sudo vi /usr/local/small-shell/util/pyshell/env --code-- font_family=\"IPAexGothic\" #modify -------- # remove cash sudo -u small-shell rm /home/small-shell/.cache/matplotlib/fontlist-*.json macOS sudo vi /usr/local/small-shell/util/pyshell/env --code-- font_family=\"AppleGothic\" #modify -------- pyshell verificated env OS: Ubuntu 2X (recommnded), Debian 1X, macOS Monterey, CentOS 7, RHEL 8 bash: 4.X python: 3.X required: matplotlib(3.X), pandas(1.X), numpy(1.X)","title":"Pyshell"},{"location":"python_tour/#pyshell","text":"Pyshell is designed for python integration. it can call python librarise {matplotlib, numpy, pandas} for analyzing data and generating png graph.","title":"Pyshell"},{"location":"python_tour/#setup-env-ubuntudebian","text":"","title":"Setup Env @ubuntu/debian"},{"location":"python_tour/#install-library-for-compiling-python3","text":"sudo apt update sudo apt install build-essential libbz2-dev libdb-dev \\ libreadline-dev libffi-dev libgdbm-dev liblzma-dev \\ libncursesw5-dev libsqlite3-dev libssl-dev \\ zlib1g-dev uuid-dev tk-dev","title":"Install library for compiling python3"},{"location":"python_tour/#install-python","text":"This is an expamle of install python3.9 # Download cd $HOME wget https://www.python.org/ftp/python/3.12.4/Python-3.12.4.tar.xz tar xJf Python-3.12.4.tar.xz # Compiling cd Python-3.12.4 ./configure make # install sudo make install ls /usr/local/lib/python3.12 ls /usr/local/bin/pip3.12","title":"Install python"},{"location":"python_tour/#install-python-libraries","text":"# please ignore just WARNINGS sudo /usr/local/bin/pip3.12 install numpy sudo /usr/local/bin/pip3.12 install pandas sudo /usr/local/bin/pip3.12 install matplotlib # mkdir for matplotlib sudo mkdir -p /home/small-shell/.config/matplotlib sudo mkdir -p /home/small-shell/.cache/matplotlib sudo chown -R small-shell:small-shell /home/small-shell Note If you are using macOS, python3 must be installed as default. please just install librarise with following command which pyphon3; which pip3 xcode-select --install sudo python3 -m pip install --upgrade pip sudo pip3 install numpy; sudo pip3 install pandas; sudo pip3 install matplotlib","title":"Install python libraries"},{"location":"python_tour/#define-python-path","text":"sudo vi /usr/local/small-shell/util/pyshell/env --code-- PYTHON=\"/usr/local/bin/python3.12\" --------","title":"Define python path"},{"location":"python_tour/#make-statistics-job","text":"sudo /usr/local/small-shell/adm/gen -job It' required to complete OS setup and setup of small-shell Base APP, see detail at Quickstart . Following is an expamle that count up number of record of inventory.db $ sudo /usr/local/small-shell/adm/gen -job Job Name: countup_num_of_record Type of job (1.job automation | 2.file exchange) : 1 --Define schedule-- Month [ any | 1-12 ]: any Date [ any | 1-31 ]: any Hour [ any | 0-23 ]: 0 Min [ any | 0-59 ]: 1 Week [ any | mon - sun ]: any Exec command or batch script: countup.sh databox:inventory.db type:line frequency:daily # enable job $ sudo -u small-shell /usr/local/small-shell/bin/e-cron enable.countup_record # execute manually, please execute several time because line graph needs at least 2 teims execution. $ sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.countup_record countup_record successfully completed # re-execute manually. because line graph need to have at least 2 line. $ sudo -u small-shell /usr/local/small-shell/bin/e-cron exec.countup_record countup_record successfully completed","title":"Make statistics job"},{"location":"python_tour/#view-statistics","text":"You can view statistics on console of Base APP. pyshell could make graph using pandas and matplotlib librarise. please exec #stats at console, then you can access to graph. Pop up graph is here.","title":"View statistics"},{"location":"python_tour/#utilscripts","text":"You can use util scripts for statistics. ls /usr/local/small-shell/util/scripts Note utilscripts should be executed small-shell priviledge. e.g.) sudo -u small-shell /usr/local/small-shell/util/scripts/$utilscript param1:$param1 param2:$param2","title":"Utilscripts"},{"location":"python_tour/#list-of-utilscripts","text":"script description countup.sh countup number of data, if you don't set filter words, it will count lines of databox. if you set filter word, it will count number of data per filter. in that case, filter word will be label of graph sumup.sh sumup specific column data, if you set filters , it will sumup data of filtered array of column data. in that case, filter word will be label of graph","title":"List of utilscripts"},{"location":"python_tour/#parameters-for-util-scirpts","text":"param description allowed param useage databox target databox any databox:$databox title title of graph (optional) any title:$title X_lalbel label of X line (optional) any X_label:$X_label Y_lalbel label of Y line (optional) any Y_label:$Y_label type graph type, deault is line line bar pie type:$type frequency frequency of data gathering batch, it will adjust titles and xticks formats adequately. default will be daily monthly daily hourly snapshot frequency:$frequency filters words for countup or sumup in databox, these words will be labels of graph. please set key {key: or filter_key:} at same timing any filters:word1,word2 or filter:word key key name of the column which is filtering target of countup any key:$key sumup_key key name of the column which will be sumuped any sumup_key:$key filter_key key name of the column which sumup , if the dataset contain the word in the column, it will be targetted any filter_key:$key glogal_filter filtering data from pipeline from databox, but it will not be label any global_filter:word diff calc difference from last statistics number, default is \"no\" any diff:no or diff:yes set_time set specific date to X line line set_time:yyyy-mm-dd{####}HH:MM Note If you want to put space in the title, please use {####}. it's changed to space internally in th pyshell. You can insert command result to the parameter, such like global_filter:`date +%Y-%m-%d`","title":"Parameters for util scirpts"},{"location":"python_tour/#usage","text":"please set following commands as exec_command in \"#sudo gen -job\" dialog. or you can execute the script manually. then you can confirm result on console box of Standard APP.","title":"Usage"},{"location":"python_tour/#countup","text":"e.g.) just countup survey result that is stored at suvery.box sudo -u small-shell /usr/local/small-shell/util/scripts/countup.sh databox:survey.box type:bar frequency:daily","title":"Countup"},{"location":"python_tour/#target-databox-for-analytics","text":"survey.box","title":"Target Databox for analytics"},{"location":"python_tour/#countup-with-filtering","text":"e.g.) countup survey result which have \"Good\" or \"Average\" or \"Bad\" as feedback in impression key column. sudo -u small-shell /usr/local/small-shell/util/scripts/countup.sh databox:survey.box key:impression filters:Good,Average,Bad \\ type:bar frequency:snapshot sudo -u small-shell /usr/local/small-shell/util/scripts/countup.sh databox:survey.box \\ key:impression filters:Good,Average,Bad type:pie title:2024-11-28_survey_result frequency:snapshot","title":"Countup with filtering"},{"location":"python_tour/#sumup-scenario","text":"Create monthly graph of inventory.db by sumup each type of inventory","title":"Sumup Scenario"},{"location":"python_tour/#target-databox-for-analytics_1","text":"inventory.db {item_name:text, category:select, num:num}","title":"Target Databox for analytics]"},{"location":"python_tour/#sumup-with-filtering","text":"sudo -u small-shell /usr/local/small-shell/util/scripts/sumup.sh databox:inventory.db type:bar filter_key:category filter:PC,network_device,audio_visual,furniture,other sumup_key:num frequency:snapshot","title":"Sumup with filtering"},{"location":"python_tour/#delete-rawdata-and-graph","text":"cd /usr/local/small-shell/util/statistics cd rawdata or cd graph sudo rm $target","title":"Delete rawdata and graph"},{"location":"python_tour/#bi-tool-integration","text":"You can export rawdata of statistics to BI tool. If graph must be complex one, we would like to recommend to use BI tool.","title":"BI tool integration"},{"location":"python_tour/#rawdata-of-statistics","text":"You can check, export or delete rawdata on small-shell server. ls /usr/local/small-shell/util/statistics/rawdata","title":"rawdata of statistics"},{"location":"python_tour/#rawdata-format","text":"Please transfer tehse rawdatas to BI tool. Time,item1,item2 2021-01-01 01:00:00,1,2 2021-01-01 02:00:00,1,2","title":"rawdata format"},{"location":"python_tour/#pyshell_1","text":"Pyshell is a intermediate generation tool for python programs. it will generate python program which contain Pandas , matplotlib and numpy. You can generate graph through pygraph.sh ls /usr/local/small-shell/util/pyshell/pygraph.sh #-------------------------------------------------------------- # usage: pygraph.sh type:$type input:$input output:$output \\ # title:$title X_label:$X_label Y_label:$Y_label #-------------------------------------------------------------- # graph types #-------------------------------------------------------------- # type:bar,hourly # type:bar,daily # type:bar,monthly # type:line,hourly # type:line,daily # type:line,monthly # type:pie,snapshot{yyyy-mm-dd HH:MM} # type:bar,snapshot{yyyy-mm-dd HH:MM} #--------------------------------------------------------------","title":"pyshell"},{"location":"python_tour/#pyshell-libraries","text":"Pyshell could generate python programs using core libraries. /usr/local/small-shell/util/pyshell/lib","title":"pyshell libraries"},{"location":"python_tour/#input-for-pyshell","text":"Input data must be csv and column 1 must be \"Time\", countup.sh or sumup.sh could generate statistic data in this standard format, then pass to pyshell for generating matplotlib graph.","title":"Input for pyshell"},{"location":"python_tour/#sample-data-format","text":"Time,label1,label2 2021-01-01 01:00:00,1,2 2021-01-01 02:00:00,1,2","title":"sample data format"},{"location":"python_tour/#change-fonts-family","text":"If your charactor is not shown correctly in graph, please install favorite fonts and reflect to pyshell. followings are exmaple.","title":"Change fonts-family"},{"location":"python_tour/#linux-ubuntu","text":"# installation sudo apt install fonts-ipaexfont # change fonts sudo vi /usr/local/small-shell/util/pyshell/env --code-- font_family=\"IPAexGothic\" #modify -------- # remove cash sudo -u small-shell rm /home/small-shell/.cache/matplotlib/fontlist-*.json","title":"Linux (ubuntu)"},{"location":"python_tour/#macos","text":"sudo vi /usr/local/small-shell/util/pyshell/env --code-- font_family=\"AppleGothic\" #modify --------","title":"macOS"},{"location":"python_tour/#pyshell-verificated-env","text":"OS: Ubuntu 2X (recommnded), Debian 1X, macOS Monterey, CentOS 7, RHEL 8 bash: 4.X python: 3.X required: matplotlib(3.X), pandas(1.X), numpy(1.X)","title":"pyshell verificated env"},{"location":"quick_start_Mac/","text":"Quick start for Mac OS You can deploy small-shell to Mac OS as well. We are thinking that Mac mini could be a mini server for working with small team. Setup Env on Mac terminal # addd user sudo dscl . -create /Users/small-shell sudo dscl . -create /Users/small-shell UserShell /usr/bin/false sudo dscl . -create /Users/small-shell UniqueID 1001 sudo dscl . -create /Users/small-shell PrimaryGroupID 1001 sudo dscl . -create /Users/small-shell NFSHomeDirectory /Users/small-shell # addd group sudo dscl . -create /Groups/small-shell PrimaryGroupID 1001 # create directory sudo mkdir /Users/small-shell sudo chown small-shell:small-shell /Users/small-shell # install brew if it's not installed yet /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" # insetall basic command brew install jq brew install php brew install gnu-sed brew install gawk #brew install sha3sum brew install flock brew install node Change sleep setting Also you need to change sleep setting on GUI to avoid service down when display is off. setting should be done from System preference > Security & Privacy > Power Adaptor Note Please check \"Prevent your Mac from automatically sleeping when the display is off\" Installation # install cd /usr/local sudo git clone https://github.com/small-shell/small-shell.git sudo chown -R small-shell:small-shell /usr/local/small-shell sudo chmod 755 /usr/local/small-shell/adm/gen Generate Databox Then Let's generate databox as the data store of WEB APP. DATA shell details are in DATA shell tour sudo /usr/local/small-shell/adm/gen -databox #-> dialog will be started Note You can exit dialog anytime with ctrl + C Dialog In this expamle, \"item_name\" is set as priary key. Databox Name: item.db primary_key(col1): item_name primary_key label: Item Name Add more column to the databox? (yes | no): yes key(col2) name: description key(col2) label: Description Data Type (text | select | radio | checkbox | email | num | tel | date | date-time | url | textarea | file | pdls | mls): text Require to input each time? (yes | no): yes Add more column to the databox? (yes | no): no Data box will be generated by following order, please check it ----------------------------------------------------------------- databox_name:item.db #primary_key name=\"item_name\" label=\"Item Name\" type=\"text\" option=\"required\" #key(col2) name=\"description\" label=\"Description\" type=\"text\" option=\"required\" ----------------------------------------------------------------- Is it OK? (yes | no): yes Generare Base APP Once at least 1 databox is ready, please generate APP shell APP shell details are in APP shell tour sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 Type of server (1.small-shell WEB srv | 2.other WEB srv): 1 protocol (http | https): https WEB Server FQDN or IP addr (e.g. 192.168.10.1): ec2-XX-XX-XX-XX.us-west-2.compute.XXXX.com ssl cert path : /root/cert.pem ssl privare key path : /root/private.pem Do you need to use chain certificate ? (yes | no): no Add user Following example is adding user name \"test\", \"test\" can initialize and get base64 key by accessing the URL that is generated by ops command sudo /usr/local/small-shell/adm/ops add.usr:test By the way, this URL can be accessed only 1 time. please inform to the user. ----------------------------------------------------------------- Key initializing & generating URL for test on Base APP is here ----------------------------------------------------------------- https://$server/cgi-bin/auth.base?initialize=*****109a7126be47d5049cd7d5c440,6bc0917d9510ae794ab5cb5d1e65834c09ad11fbd3d78db881a656c591d1604a End user can access to the Base APP by click the button and key will be stored to local storage of browser. Connect to the Base APP Image of authentication page of Base APP is as following. the access URL will be shown in the end of the gen dialog but basically it will be \"https://$FQDN/base\". key will be inserted automatically if it's stored in local storage. Then end user can use following APP features as default. ofcourse you can make your own APP, please see detail on Create Scratch APP Base APP FEATURES Push or Get datas thorough simplest UI Can use \"And\" search using space [e.g. word1 word2] Multi type of sort using sort command Serch using specific key of column, [e.g key{wordA}] Download search result by CSV format Import Data with CSV format Define number of line per page [e.g #line:20] [e.g word #line:20] + Command Console Analyze data using linux commands [grep, wc, awk, uniq, sed, tail, head, nl, sort, cut ..] Search log with freewords by adding tag [e.g. word1 word2 #log] Show statistics #stats, you need to define statistics job. Please see the pyshell for further details. Re-generate initialize URL If end user lost their key, you can re-generate initialize URL by following command. In this example, admin will re-generate initialize URL for user name \"test\" sudo /usr/local/small-shell/adm/ops initialize.usr:test Re-start web server You can restart web server by launchctl command # restart sudo launchctl stop org.small-shell.node sudo launchctl start org.small-shell.node # check process ps -ef | grep app.sh # check log ls /var/www/log Enable cron access If you want to use e-cron, you need to allow cron to access data by changing privacy setting. setting should be done on GUI from System preference > Security & Privacy > FUll Disk Access. Note Please add /usr/sbin/cron by using command+shift+G shortcut on FUll disk Access setting. Update to latest version You can updsate small-shell very easily. this is exmaples of update procedure. Once you clone the latest code, it's recommended to re-generate Base APP. Even if Base APP has been upgraded, you can keep to use user key, ssl cert & key, API key. cd /var/tmp sudo git clone https://github.com/small-shell/small-shell.git sudo \\cp -Rf small-shell/* /usr/local/small-shell/ sudo rm -rf small-shell # re-generate Base APP sudo /usr/local/small-shell/adm/gen -app ----------------------------------------------- Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 ------------------------------------------------ -> dialog will be started","title":"For macOS"},{"location":"quick_start_Mac/#quick-start-for-mac-os","text":"You can deploy small-shell to Mac OS as well. We are thinking that Mac mini could be a mini server for working with small team.","title":"Quick start for Mac OS"},{"location":"quick_start_Mac/#setup-env-on-mac-terminal","text":"# addd user sudo dscl . -create /Users/small-shell sudo dscl . -create /Users/small-shell UserShell /usr/bin/false sudo dscl . -create /Users/small-shell UniqueID 1001 sudo dscl . -create /Users/small-shell PrimaryGroupID 1001 sudo dscl . -create /Users/small-shell NFSHomeDirectory /Users/small-shell # addd group sudo dscl . -create /Groups/small-shell PrimaryGroupID 1001 # create directory sudo mkdir /Users/small-shell sudo chown small-shell:small-shell /Users/small-shell # install brew if it's not installed yet /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" # insetall basic command brew install jq brew install php brew install gnu-sed brew install gawk #brew install sha3sum brew install flock brew install node","title":"Setup Env on Mac terminal"},{"location":"quick_start_Mac/#change-sleep-setting","text":"Also you need to change sleep setting on GUI to avoid service down when display is off. setting should be done from System preference > Security & Privacy > Power Adaptor Note Please check \"Prevent your Mac from automatically sleeping when the display is off\"","title":"Change sleep setting"},{"location":"quick_start_Mac/#installation","text":"# install cd /usr/local sudo git clone https://github.com/small-shell/small-shell.git sudo chown -R small-shell:small-shell /usr/local/small-shell sudo chmod 755 /usr/local/small-shell/adm/gen","title":"Installation"},{"location":"quick_start_Mac/#generate-databox","text":"Then Let's generate databox as the data store of WEB APP. DATA shell details are in DATA shell tour sudo /usr/local/small-shell/adm/gen -databox #-> dialog will be started Note You can exit dialog anytime with ctrl + C","title":"Generate Databox"},{"location":"quick_start_Mac/#dialog","text":"In this expamle, \"item_name\" is set as priary key. Databox Name: item.db primary_key(col1): item_name primary_key label: Item Name Add more column to the databox? (yes | no): yes key(col2) name: description key(col2) label: Description Data Type (text | select | radio | checkbox | email | num | tel | date | date-time | url | textarea | file | pdls | mls): text Require to input each time? (yes | no): yes Add more column to the databox? (yes | no): no Data box will be generated by following order, please check it ----------------------------------------------------------------- databox_name:item.db #primary_key name=\"item_name\" label=\"Item Name\" type=\"text\" option=\"required\" #key(col2) name=\"description\" label=\"Description\" type=\"text\" option=\"required\" ----------------------------------------------------------------- Is it OK? (yes | no): yes","title":"Dialog"},{"location":"quick_start_Mac/#generare-base-app","text":"Once at least 1 databox is ready, please generate APP shell APP shell details are in APP shell tour sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 Type of server (1.small-shell WEB srv | 2.other WEB srv): 1 protocol (http | https): https WEB Server FQDN or IP addr (e.g. 192.168.10.1): ec2-XX-XX-XX-XX.us-west-2.compute.XXXX.com ssl cert path : /root/cert.pem ssl privare key path : /root/private.pem Do you need to use chain certificate ? (yes | no): no","title":"Generare Base APP"},{"location":"quick_start_Mac/#add-user","text":"Following example is adding user name \"test\", \"test\" can initialize and get base64 key by accessing the URL that is generated by ops command sudo /usr/local/small-shell/adm/ops add.usr:test By the way, this URL can be accessed only 1 time. please inform to the user. ----------------------------------------------------------------- Key initializing & generating URL for test on Base APP is here ----------------------------------------------------------------- https://$server/cgi-bin/auth.base?initialize=*****109a7126be47d5049cd7d5c440,6bc0917d9510ae794ab5cb5d1e65834c09ad11fbd3d78db881a656c591d1604a End user can access to the Base APP by click the button and key will be stored to local storage of browser.","title":"Add user"},{"location":"quick_start_Mac/#connect-to-the-base-app","text":"Image of authentication page of Base APP is as following. the access URL will be shown in the end of the gen dialog but basically it will be \"https://$FQDN/base\". key will be inserted automatically if it's stored in local storage. Then end user can use following APP features as default. ofcourse you can make your own APP, please see detail on Create Scratch APP","title":"Connect to the Base APP"},{"location":"quick_start_Mac/#base-app-features","text":"Push or Get datas thorough simplest UI Can use \"And\" search using space [e.g. word1 word2] Multi type of sort using sort command Serch using specific key of column, [e.g key{wordA}] Download search result by CSV format Import Data with CSV format Define number of line per page [e.g #line:20] [e.g word #line:20]","title":"Base APP FEATURES"},{"location":"quick_start_Mac/#command-console","text":"Analyze data using linux commands [grep, wc, awk, uniq, sed, tail, head, nl, sort, cut ..] Search log with freewords by adding tag [e.g. word1 word2 #log] Show statistics #stats, you need to define statistics job. Please see the pyshell for further details.","title":"+ Command Console"},{"location":"quick_start_Mac/#re-generate-initialize-url","text":"If end user lost their key, you can re-generate initialize URL by following command. In this example, admin will re-generate initialize URL for user name \"test\" sudo /usr/local/small-shell/adm/ops initialize.usr:test","title":"Re-generate initialize URL"},{"location":"quick_start_Mac/#re-start-web-server","text":"You can restart web server by launchctl command # restart sudo launchctl stop org.small-shell.node sudo launchctl start org.small-shell.node # check process ps -ef | grep app.sh # check log ls /var/www/log","title":"Re-start web server"},{"location":"quick_start_Mac/#enable-cron-access","text":"If you want to use e-cron, you need to allow cron to access data by changing privacy setting. setting should be done on GUI from System preference > Security & Privacy > FUll Disk Access. Note Please add /usr/sbin/cron by using command+shift+G shortcut on FUll disk Access setting.","title":"Enable cron access"},{"location":"quick_start_Mac/#update-to-latest-version","text":"You can updsate small-shell very easily. this is exmaples of update procedure. Once you clone the latest code, it's recommended to re-generate Base APP. Even if Base APP has been upgraded, you can keep to use user key, ssl cert & key, API key. cd /var/tmp sudo git clone https://github.com/small-shell/small-shell.git sudo \\cp -Rf small-shell/* /usr/local/small-shell/ sudo rm -rf small-shell # re-generate Base APP sudo /usr/local/small-shell/adm/gen -app ----------------------------------------------- Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 ------------------------------------------------ -> dialog will be started","title":"Update to latest version"},{"location":"quick_start_linux/","text":"Quick start This is a quick start guide for ubuntu and debian with small-shell default web server that's included in small-shell package. Setup Env@ubuntu/debian # addd user sudo useradd -s /sbin/nologin small-shell # update apt list and install curl sudo apt update sudo apt install curl # install bc and crontab if its not installed sudo apt install bc sudo apt install cron # install npm/php libraries, php will be used for encoding and node.js will be used for writing WEB server sudo apt install npm sudo apt install php ##install jq sudo apt install jq Installation # install cd /usr/local sudo git clone https://github.com/small-shell/small-shell.git sudo chown -R small-shell:small-shell /usr/local/small-shell sudo chmod 755 /usr/local/small-shell/adm/gen Generate Databox Then Let's generate databox as the data store of WEB APP. DATA shell details are in DATA shell tour sudo /usr/local/small-shell/adm/gen -databox #-> dialog will be started Note You can exit dialog anytime with ctrl + C Dialog In this expamle, \"item_name\" is set as priary key. Databox Name: item.db primary_key(col1): item_name primary_key label: Item Name Add more column to the databox? (yes | no): yes key(col2) name: description key(col2) label: Description Data Type (text | select | radio | checkbox | email | num | tel | date | date-time | url | textarea | file | pdls | mls): text Require to input each time? (yes | no): yes Add more column to the databox? (yes | no): no Data box will be generated by following order, please check it ----------------------------------------------------------------- Databox Name:item.db #primary_key name=\"item_name\" label=\"Item Name\" type=\"text\" option=\"required\" #key(col2) name=\"description\" label=\"Description\" type=\"text\" option=\"required\" ----------------------------------------------------------------- Is it OK? (yes | no): yes Generate Base APP Once databox is ready, let's generate Base APP, detail of this APP is in APP shell tour sudo /usr/local/small-shell/adm/gen -app In the dialog, if you will use https, please input path of cert and key of ssl. these cert and key will be copied to /var/www/app during dialog and https web server will be started automatically. Note If you don't have any ssl certificate, ofcourse you can choose http as potocol. and if you want, you can generate ssl certificate by using Let's encrypt. please check cook book Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 Type of server (1.small-shell WEB srv | 2.other WEB srv): 1 protocol (http | https): https WEB Server FQDN or IP addr (e.g. 192.168.10.1): ec2-XX-XX-XX-XX.us-west-2.compute.XXXX.com ssl cert path : /root/cert.pem ssl privare key path : /root/private.pem Do you need to use chain certificate ? (yes | no): no Add user Following example is adding user name \"test\", \"test\" can initialize and get base64 key by accessing the URL that is generated by ops command. sudo /usr/local/small-shell/adm/ops add.usr:test By the way, this URL can be accessed only 1 time. please inform to the user. ----------------------------------------------------------------- Key initializing & generating URL for test on Base APP is here ----------------------------------------------------------------- https://$server/cgi-bin/auth.base?initialize=*****fce76b37e4e93b7605022da52e6ccc26fd2,4c5a2ae68d20e530b4ce457c71eae42590135268e1fb933a945f7e188678ccf4 End user can access to the Base APP by click the button and key will be stored to local storage of browser. Connect to the Base APP Image of authentication page of Base APP is as following. the access URL will be shown in the end of the gen dialog but basically it will be \"https://$FQDN/base\". key will be inserted automatically if it's stored in local storage. Then end user can use following APP features as default. ofcourse you can make your own APP, please see detail on Create Scratch APP Base APP FEATURES Push or Get datas thorough simplest UI Can use \"And\" search using space [e.g. word1 word2] Multi type of sort using sort command Serch using specific key of column, [e.g key{wordA}] Download search result by CSV format Import Data with CSV format Define number of line per page [e.g #line:20] [e.g word #line:20] + Command Console Analyze data using linux commands [grep, wc, awk, uniq, sed, tail, head, nl, sort, cut ..] Search log with freewords by adding tag [e.g. word1 word2 #log] Show statistics #stats, you need to define statistics job. Please see the pyshell for further details. Re-generate initialize URL If end user lost their key, you can re-generate initialize URL by following command. In this example, admin will re-generate initialize URL for user name \"test\" sudo /usr/local/small-shell/adm/ops initialize.usr:test Re-start small-shell web srv If you want to restart web server please use systemctl command. sudo systemctl restart small-shell # check process ps -ef | grep app.sh # check log ls -ltr /var/www/log Update to latest version You can update small-shell very easily. this is exmaples of update procedure. Once you clone the latest code, it's recommended to re-generate Base APP. Even if Base APP has been upgraded, you can keep to use user key, ssl cert & key, API key. cd /var/tmp sudo git clone https://github.com/small-shell/small-shell.git sudo \\cp -Rf small-shell/* /usr/local/small-shell/ sudo rm -rf small-shell # re-generate Base APP sudo /usr/local/small-shell/adm/gen -app ----------------------------------------------- Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 ------------------------------------------------ -> dialog will be started","title":"For ubuntu or debian"},{"location":"quick_start_linux/#quick-start","text":"This is a quick start guide for ubuntu and debian with small-shell default web server that's included in small-shell package.","title":"Quick start"},{"location":"quick_start_linux/#setup-envubuntudebian","text":"# addd user sudo useradd -s /sbin/nologin small-shell # update apt list and install curl sudo apt update sudo apt install curl # install bc and crontab if its not installed sudo apt install bc sudo apt install cron # install npm/php libraries, php will be used for encoding and node.js will be used for writing WEB server sudo apt install npm sudo apt install php ##install jq sudo apt install jq","title":"Setup Env@ubuntu/debian"},{"location":"quick_start_linux/#installation","text":"# install cd /usr/local sudo git clone https://github.com/small-shell/small-shell.git sudo chown -R small-shell:small-shell /usr/local/small-shell sudo chmod 755 /usr/local/small-shell/adm/gen","title":"Installation"},{"location":"quick_start_linux/#generate-databox","text":"Then Let's generate databox as the data store of WEB APP. DATA shell details are in DATA shell tour sudo /usr/local/small-shell/adm/gen -databox #-> dialog will be started Note You can exit dialog anytime with ctrl + C","title":"Generate Databox"},{"location":"quick_start_linux/#dialog","text":"In this expamle, \"item_name\" is set as priary key. Databox Name: item.db primary_key(col1): item_name primary_key label: Item Name Add more column to the databox? (yes | no): yes key(col2) name: description key(col2) label: Description Data Type (text | select | radio | checkbox | email | num | tel | date | date-time | url | textarea | file | pdls | mls): text Require to input each time? (yes | no): yes Add more column to the databox? (yes | no): no Data box will be generated by following order, please check it ----------------------------------------------------------------- Databox Name:item.db #primary_key name=\"item_name\" label=\"Item Name\" type=\"text\" option=\"required\" #key(col2) name=\"description\" label=\"Description\" type=\"text\" option=\"required\" ----------------------------------------------------------------- Is it OK? (yes | no): yes","title":"Dialog"},{"location":"quick_start_linux/#generate-base-app","text":"Once databox is ready, let's generate Base APP, detail of this APP is in APP shell tour sudo /usr/local/small-shell/adm/gen -app In the dialog, if you will use https, please input path of cert and key of ssl. these cert and key will be copied to /var/www/app during dialog and https web server will be started automatically. Note If you don't have any ssl certificate, ofcourse you can choose http as potocol. and if you want, you can generate ssl certificate by using Let's encrypt. please check cook book Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 Type of server (1.small-shell WEB srv | 2.other WEB srv): 1 protocol (http | https): https WEB Server FQDN or IP addr (e.g. 192.168.10.1): ec2-XX-XX-XX-XX.us-west-2.compute.XXXX.com ssl cert path : /root/cert.pem ssl privare key path : /root/private.pem Do you need to use chain certificate ? (yes | no): no","title":"Generate Base APP"},{"location":"quick_start_linux/#add-user","text":"Following example is adding user name \"test\", \"test\" can initialize and get base64 key by accessing the URL that is generated by ops command. sudo /usr/local/small-shell/adm/ops add.usr:test By the way, this URL can be accessed only 1 time. please inform to the user. ----------------------------------------------------------------- Key initializing & generating URL for test on Base APP is here ----------------------------------------------------------------- https://$server/cgi-bin/auth.base?initialize=*****fce76b37e4e93b7605022da52e6ccc26fd2,4c5a2ae68d20e530b4ce457c71eae42590135268e1fb933a945f7e188678ccf4 End user can access to the Base APP by click the button and key will be stored to local storage of browser.","title":"Add user"},{"location":"quick_start_linux/#connect-to-the-base-app","text":"Image of authentication page of Base APP is as following. the access URL will be shown in the end of the gen dialog but basically it will be \"https://$FQDN/base\". key will be inserted automatically if it's stored in local storage. Then end user can use following APP features as default. ofcourse you can make your own APP, please see detail on Create Scratch APP","title":"Connect to the Base APP"},{"location":"quick_start_linux/#base-app-features","text":"Push or Get datas thorough simplest UI Can use \"And\" search using space [e.g. word1 word2] Multi type of sort using sort command Serch using specific key of column, [e.g key{wordA}] Download search result by CSV format Import Data with CSV format Define number of line per page [e.g #line:20] [e.g word #line:20]","title":"Base APP FEATURES"},{"location":"quick_start_linux/#command-console","text":"Analyze data using linux commands [grep, wc, awk, uniq, sed, tail, head, nl, sort, cut ..] Search log with freewords by adding tag [e.g. word1 word2 #log] Show statistics #stats, you need to define statistics job. Please see the pyshell for further details.","title":"+ Command Console"},{"location":"quick_start_linux/#re-generate-initialize-url","text":"If end user lost their key, you can re-generate initialize URL by following command. In this example, admin will re-generate initialize URL for user name \"test\" sudo /usr/local/small-shell/adm/ops initialize.usr:test","title":"Re-generate initialize URL"},{"location":"quick_start_linux/#re-start-small-shell-web-srv","text":"If you want to restart web server please use systemctl command. sudo systemctl restart small-shell # check process ps -ef | grep app.sh # check log ls -ltr /var/www/log","title":"Re-start small-shell web srv"},{"location":"quick_start_linux/#update-to-latest-version","text":"You can update small-shell very easily. this is exmaples of update procedure. Once you clone the latest code, it's recommended to re-generate Base APP. Even if Base APP has been upgraded, you can keep to use user key, ssl cert & key, API key. cd /var/tmp sudo git clone https://github.com/small-shell/small-shell.git sudo \\cp -Rf small-shell/* /usr/local/small-shell/ sudo rm -rf small-shell # re-generate Base APP sudo /usr/local/small-shell/adm/gen -app ----------------------------------------------- Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 ------------------------------------------------ -> dialog will be started","title":"Update to latest version"},{"location":"quick_start_linux_apache2/","text":"Quick start for ubuntu+apapche2 This is a quick start guide for ubuntu&apache2. of course you can choose other linux distributor, but so far our recommendation is ubuntu. Setup Env@ubuntu # addd user sudo useradd -s /sbin/nologin small-shell # update apt list and install curl sudo apt update sudo apt install curl # install httpd (e.g. apache) sudo apt install apache2 sudo a2enmod cgid #sudo systemctl start apache2 sudo service apache2 start sudo update-rc.d apache2 defaults # install php library, it will be used for url encoding (required) sudo apt install php ##install jq sudo apt install jq Installation # install cd /usr/local sudo git clone https://github.com/small-shell/small-shell.git sudo chown -R small-shell:small-shell /usr/local/small-shell sudo chmod 755 /usr/local/small-shell/adm/gen Sudo setting # change sudo setting sudo visudo ## add to last line ## sudo setting for httpd user (e.g.) www-data for apache2 www-data ALL=(small-shell) NOPASSWD: /usr/local/small-shell/bin/*, /usr/local/small-shell/sbin/* Generate Databox Then Let's generate databox as the data store of WEB APP. DATA shell details are in DATA shell tour sudo /usr/local/small-shell/adm/gen -databox #-> dialog will be started Note You can exit dialog anytime with ctrl + C Dialog In this expamle, \"item_name\" is set as priary key. Databox Name: item.db primary_key(col1): item_name primary_key label: Item Name Add more column to the databox? (yes | no): yes key(col2) name: description key(col2) label: Description Data Type (text | select | radio | checkbox | email | num | tel | date | date-time | url | textarea | file | pdls | mls): text Require to input each time? (yes | no): yes Add more column to the databox? (yes | no): no Data box will be generated by following order, please check it ----------------------------------------------------------------- Databox Name:item.db #primary_key name=\"item_name\" label=\"Item Name\" type=\"text\" option=\"required\" #key(col2) name=\"description\" label=\"Description\" type=\"text\" option=\"required\" ----------------------------------------------------------------- Is it OK? (yes | no): yes Generate Base APP Once at least 1 databox is ready, please generate APP shell APP shell details are in APP shell tour sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 Type of server (1.small-shell WEB srv | 2.other WEB srv): 2 #-> Dialog will be started, for making Base APP # Dialog result -------------------------------------------------------------------------- APP Type: 1.BASE Protocol: https APP Exec User: www-data Root Directory: /var/www CGI Directory: /usr/lib/cgi-bin Server: ec2-XX-XX-XX-XX.us-west-2.compute.XXXX.com Access URL: https://ec2-XX-XX-XX-XX.us-west-2.compute.XXXX.com/cgi-bin/ -------------------------------------------------------------------------- Add symlink on ubuntu If you are using ubuntu and apache2, please add symlink by answering \"yes\" in the dialog. www dir must have relation with CGI dir. Is it OK to make symbolic link on /usr/lib ? following command will be executed ----------------------------------------------------------------- ln -s /var/www/bin /usr/lib/bin ln -s /var/www/descriptor /usr/lib/descriptor ln -s /var/www/tmp /usr/lib/tmp ----------------------------------------------------------------- (yes | no): yes Add user Following example is adding user name \"test\", \"test\" can initialize and get base64 key by accessing the URL that is generated by ops command. sudo /usr/local/small-shell/adm/ops add.usr:test By the way, this URL can be accessed only 1 time. please inform to the user. ----------------------------------------------------------------- Key initializing & generating URL for test on Base APP is here ----------------------------------------------------------------- https://$server/cgi-bin/auth.base?initialize=*****26fd2,4c5a2ae68d20e530b4ce457c71eae42590135268e1fb933a945f7e188678ccf4 End user can access to the Base APP by click the button and key will be stored to local storage of browser. Connect to the Base APP Image of authentication page of Base APP is as following. the access URL will be shown in the end of the gen dialog but basically it will be \"https://$FQDN/base\". key will be inserted automatically if it's stored in local storage. Then end user can use following APP features as default. ofcourse you can make your own APP, please see detail on Create Scratch APP Base APP FEATURES Push or Get datas thorough simplest UI Can use \"And\" search using space [e.g. word1 word2] Multi type of sort using sort command Serch using specific key of column, [e.g key{wordA}] Download search result by CSV format Import Data with CSV format Define number of line per page [e.g #line:20] [e.g word #line:20] + Command Console Analyze data using linux commands [grep, wc, awk, uniq, sed, tail, head, nl, sort, cut ..] Search log with freewords by adding tag [e.g. word1 word2 #log] Show statistics #stats, you need to define statistics job. Please see the pyshell for further details. Re-generate initialize URL If end user lost their key, you can re-generate initialize URL by following command. In this example, admin will re-generate initialize URL for user name \"test\" sudo /usr/local/small-shell/adm/ops initialize.usr:test SE linux setting change If you are using SE linux, pelase change to permissive mode and then please make specific rule for SE linux before enforcing. ## check SE linux sestatus ## if current mode is enforcing. please change to permissive. then please make rule later. sudo vi /etc/selinux/config SELINUX=permissive ##reoobt sudo reboot Update to latest version You can update small-shell very easily. this is exmaples of update procedure. cd /var/tmp sudo git clone https://github.com/small-shell/small-shell.git sudo \\cp -Rf small-shell/* /usr/local/small-shell/ sudo rm -rf small-shell sudo /usr/local/small-shell/adm/gen #renew global.conf Then please re-generate web app using gen command if needed.","title":"For ubuntu + apache2 "},{"location":"quick_start_linux_apache2/#quick-start-for-ubuntuapapche2","text":"This is a quick start guide for ubuntu&apache2. of course you can choose other linux distributor, but so far our recommendation is ubuntu.","title":"Quick start for ubuntu+apapche2"},{"location":"quick_start_linux_apache2/#setup-envubuntu","text":"# addd user sudo useradd -s /sbin/nologin small-shell # update apt list and install curl sudo apt update sudo apt install curl # install httpd (e.g. apache) sudo apt install apache2 sudo a2enmod cgid #sudo systemctl start apache2 sudo service apache2 start sudo update-rc.d apache2 defaults # install php library, it will be used for url encoding (required) sudo apt install php ##install jq sudo apt install jq","title":"Setup Env@ubuntu"},{"location":"quick_start_linux_apache2/#installation","text":"# install cd /usr/local sudo git clone https://github.com/small-shell/small-shell.git sudo chown -R small-shell:small-shell /usr/local/small-shell sudo chmod 755 /usr/local/small-shell/adm/gen","title":"Installation"},{"location":"quick_start_linux_apache2/#sudo-setting","text":"# change sudo setting sudo visudo ## add to last line ## sudo setting for httpd user (e.g.) www-data for apache2 www-data ALL=(small-shell) NOPASSWD: /usr/local/small-shell/bin/*, /usr/local/small-shell/sbin/*","title":"Sudo setting"},{"location":"quick_start_linux_apache2/#generate-databox","text":"Then Let's generate databox as the data store of WEB APP. DATA shell details are in DATA shell tour sudo /usr/local/small-shell/adm/gen -databox #-> dialog will be started Note You can exit dialog anytime with ctrl + C","title":"Generate Databox"},{"location":"quick_start_linux_apache2/#dialog","text":"In this expamle, \"item_name\" is set as priary key. Databox Name: item.db primary_key(col1): item_name primary_key label: Item Name Add more column to the databox? (yes | no): yes key(col2) name: description key(col2) label: Description Data Type (text | select | radio | checkbox | email | num | tel | date | date-time | url | textarea | file | pdls | mls): text Require to input each time? (yes | no): yes Add more column to the databox? (yes | no): no Data box will be generated by following order, please check it ----------------------------------------------------------------- Databox Name:item.db #primary_key name=\"item_name\" label=\"Item Name\" type=\"text\" option=\"required\" #key(col2) name=\"description\" label=\"Description\" type=\"text\" option=\"required\" ----------------------------------------------------------------- Is it OK? (yes | no): yes","title":"Dialog"},{"location":"quick_start_linux_apache2/#generate-base-app","text":"Once at least 1 databox is ready, please generate APP shell APP shell details are in APP shell tour sudo /usr/local/small-shell/adm/gen -app Type of APP (1.BASE | 2.FORM | 3.SCRATCH): 1 Type of server (1.small-shell WEB srv | 2.other WEB srv): 2 #-> Dialog will be started, for making Base APP # Dialog result -------------------------------------------------------------------------- APP Type: 1.BASE Protocol: https APP Exec User: www-data Root Directory: /var/www CGI Directory: /usr/lib/cgi-bin Server: ec2-XX-XX-XX-XX.us-west-2.compute.XXXX.com Access URL: https://ec2-XX-XX-XX-XX.us-west-2.compute.XXXX.com/cgi-bin/ --------------------------------------------------------------------------","title":"Generate Base APP"},{"location":"quick_start_linux_apache2/#add-symlink-on-ubuntu","text":"If you are using ubuntu and apache2, please add symlink by answering \"yes\" in the dialog. www dir must have relation with CGI dir. Is it OK to make symbolic link on /usr/lib ? following command will be executed ----------------------------------------------------------------- ln -s /var/www/bin /usr/lib/bin ln -s /var/www/descriptor /usr/lib/descriptor ln -s /var/www/tmp /usr/lib/tmp ----------------------------------------------------------------- (yes | no): yes","title":"Add symlink on ubuntu"},{"location":"quick_start_linux_apache2/#add-user","text":"Following example is adding user name \"test\", \"test\" can initialize and get base64 key by accessing the URL that is generated by ops command. sudo /usr/local/small-shell/adm/ops add.usr:test By the way, this URL can be accessed only 1 time. please inform to the user. ----------------------------------------------------------------- Key initializing & generating URL for test on Base APP is here ----------------------------------------------------------------- https://$server/cgi-bin/auth.base?initialize=*****26fd2,4c5a2ae68d20e530b4ce457c71eae42590135268e1fb933a945f7e188678ccf4 End user can access to the Base APP by click the button and key will be stored to local storage of browser.","title":"Add user"},{"location":"quick_start_linux_apache2/#connect-to-the-base-app","text":"Image of authentication page of Base APP is as following. the access URL will be shown in the end of the gen dialog but basically it will be \"https://$FQDN/base\". key will be inserted automatically if it's stored in local storage. Then end user can use following APP features as default. ofcourse you can make your own APP, please see detail on Create Scratch APP","title":"Connect to the Base APP"},{"location":"quick_start_linux_apache2/#base-app-features","text":"Push or Get datas thorough simplest UI Can use \"And\" search using space [e.g. word1 word2] Multi type of sort using sort command Serch using specific key of column, [e.g key{wordA}] Download search result by CSV format Import Data with CSV format Define number of line per page [e.g #line:20] [e.g word #line:20]","title":"Base APP FEATURES"},{"location":"quick_start_linux_apache2/#command-console","text":"Analyze data using linux commands [grep, wc, awk, uniq, sed, tail, head, nl, sort, cut ..] Search log with freewords by adding tag [e.g. word1 word2 #log] Show statistics #stats, you need to define statistics job. Please see the pyshell for further details.","title":"+ Command Console"},{"location":"quick_start_linux_apache2/#re-generate-initialize-url","text":"If end user lost their key, you can re-generate initialize URL by following command. In this example, admin will re-generate initialize URL for user name \"test\" sudo /usr/local/small-shell/adm/ops initialize.usr:test","title":"Re-generate initialize URL"},{"location":"quick_start_linux_apache2/#se-linux-setting-change","text":"If you are using SE linux, pelase change to permissive mode and then please make specific rule for SE linux before enforcing. ## check SE linux sestatus ## if current mode is enforcing. please change to permissive. then please make rule later. sudo vi /etc/selinux/config SELINUX=permissive ##reoobt sudo reboot","title":"SE linux setting change"},{"location":"quick_start_linux_apache2/#update-to-latest-version","text":"You can update small-shell very easily. this is exmaples of update procedure. cd /var/tmp sudo git clone https://github.com/small-shell/small-shell.git sudo \\cp -Rf small-shell/* /usr/local/small-shell/ sudo rm -rf small-shell sudo /usr/local/small-shell/adm/gen #renew global.conf Then please re-generate web app using gen command if needed.","title":"Update to latest version"}]}