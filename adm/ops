#!/bin/bash

#----------------------------------------------------------
# PARAM FOR OPS
# action(L1).action(L2):target{param}
#----------------------------------------------------------

#-----------------------------------
# Show all user
#-----------------------------------
# ls.usr

#-----------------------------------
# User management for Base APP
#-----------------------------------
# add.usr:$user
# initialize.usr:$user
# del.usr:$user

#-----------------------------------
# User management for Scratch APP
#-----------------------------------
# add.usr:$user app:$app
# del.usr:$user app:$app
# initialize.usr:$user app:$app

#-----------------------------------
# Set permission/attribute to Base APP user
#-----------------------------------
# set.attr:$user{ro} 
# set.attr:$user{rw} 
# set.attr:$user{$attribute_key=$param}

#-----------------------------------
# Set permission/attribute to Scratch APP user
#-----------------------------------
# set.attr:$user{ro} app:$app
# set.attr:$user{rw} app:$app
# set.attr:$user{$attribute_key=$param} app:$app

#-----------------------------------
# Add tag for Base APP table
#-----------------------------------
# add.tag:$databox{$filter}
# del.tag:$databox{$filter}

#-----------------------------------
# Add tag for Scratch APP table
#-----------------------------------
# ops add.tag:$databox{$filter} app:$app
# ops del.tag:$databox{$filter} app:$app

#------------------
# IP whitelisting
#------------------
# ops set.IP #IP whitelisting

#----------------------------------------------------------

WHOAMI=`whoami`
if [ ! "$WHOAMI" = "root" ];then
  echo "error: user must be root"
  exit 1
fi

# global conf load
SCRIPT_DIR=`dirname $0`
 . ${SCRIPT_DIR}/../global.conf

# parsa input params
for param in `echo $@`
do

  if [[ $param == ls.usr ]]; then
    action=`echo $param | $AWK -F":" '{print $1}'`
  fi

  if [[ $param == add.usr:* ]]; then
    action=`echo $param | $AWK -F":" '{print $1}'`
    user_name=`echo $param | $AWK -F":" '{print $2}'`
  fi

  if [[ $param == del.usr:* ]]; then
    action=`echo $param | $AWK -F":" '{print $1}'`
    user_name=`echo $param |  $AWK -F":" '{print $2}'`
  fi

  if [[ $param == set.attr* ]]; then
    action=`echo $param | $AWK -F":" '{print $1}'`
    user_name=`echo $param |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $1}'`
    attr_param=`echo $param |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $2}' | $SED "s/}//g"`
    attr_key=`echo $attr_param | grep "=" | $AWK -F "=" '{print $1}'`

    if [ ! "$attr_key" ];then
      attr_key=permission
    else
      attr_param=`echo $attr_param |  $AWK -F"=" '{print $2}'`
    fi

  fi

  if [[ $param == get.attr* ]]; then
    action=`echo $param | $AWK -F":" '{print $1}'`
    user_name=`echo $param |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $1}'`
  fi

  if [[ $param == initialize.usr:* ]]; then
    action=`echo $param | $AWK -F":" '{print $1}'`
    user_name=`echo $param |  $AWK -F":" '{print $2}' | $AWK -F"{" '{print $1}'`
  fi

  if [[ $param == add.tag:* ]]; then
    action=`echo $param | $AWK -F":" '{print $1}'`
    databox=`echo $param | $AWK -F":" '{print $2}' | $AWK -F"{" '{print $1}'`
    filter=`echo $param | $SED "s/$action:$databox//g" | $SED "s/^{//g" | $SED "s/}$//g"`
  fi

  if [[ $param == del.tag:* ]]; then
    action=`echo $param | $AWK -F":" '{print $1}'`
    databox=`echo $param | $AWK -F":" '{print $2}' | $AWK -F"{" '{print $1}'`
    filter=`echo $param | $SED "s/$action:$databox//g" | $SED "s/^{//g" | $SED "s/}$//g"`
  fi

  if [[ $param == set.IP ]]; then
    action="set.IP"
  fi

  if [[ $param == app:* ]]; then
    app=`echo $param | $AWK -F":" '{print $2}'`
  fi

done

if [ ! -f $ROOT/web/base ];then
  echo "error: please generate Base APP first #gen -app"
  rm -rf $user_dir
  exit 1
fi

# load web base info
. $ROOT/web/base

if [ "$cluster_base_url" -a "$master" ];then
  echo "error: this is replication host, you must exec this operation on $master"
  exit 1
fi

function initialize_url(){
  user_id=$1
  user_name=$2
  t_app=$3
 
  if [ ! "$t_app" ];then
    auth=auth.base
  else
    auth=auth.${t_app}
  fi

  if [ ! "$t_app" ];then
    user_dir="$ROOT/users/${user_id}"
    t_app="Base APP"
  else
    user_dir="$ROOT/users/${t_app}.${user_id}"
  fi

  if [ ! -f $cgidir/$auth ];then
    echo "error: please generate APP first #gen -app" 
    rm -rf $user_dir
    exit 1
  fi

  echo "initialize_key:$user_id:$random_key:${RANDOM}" | $SHASUM | $AWK '{print $1}' > $user_dir/initialize_key
  chown small-shell:small-shell $user_dir/initialize_key
  chmod 700 $user_dir/initialize_key

  if [ $? -eq 0 ];then
    initialize_hash_key=`cat $user_dir/initialize_key`

    if [ "$cluster_base_url" ];then
      initialize_url="${cluster_base_url}${auth}?initialize=$user_id,$initialize_hash_key"
    else
      initialize_url="${base_url}${auth}?initialize=$user_id,$initialize_hash_key"
    fi

    clear
    echo "-------------------------------------------------------------------"
    echo "Key initializing & generating URL for $user_name on $t_app is here"
    echo "-------------------------------------------------------------------"
    echo "$initialize_url"
  else
    echo "error: failed to create initialize key"
    exit 1
  fi

  return 0
}

function set_attr(){
  user_id=$1
  attr_key=$2
  attr_param=$3
  t_app=$4

  if [ ! "$t_app" ];then
    user_dir="$ROOT/users/${user_id}"
  else
    user_dir="$ROOT/users/${t_app}.${user_id}"
  fi

  if [ ! -d $user_dir ];then
    echo "error: user is not found"
    exit 1
  fi
  
  if [ -f $user_dir/attr ];then
    cat $user_dir/attr | grep -v "^${attr_key}=" > $user_dir/.attr.tmp 2>/dev/null
    echo "${attr_key}=${attr_param}" >> $user_dir/.attr.tmp
    cat $user_dir/.attr.tmp > $user_dir/attr
    chown small-shell:small-shell $user_dir/attr
  else
    echo "${attr_key}=${attr_param}" > $user_dir/attr
    chmod 755 $user_dir/attr
    chown small-shell:small-shell $user_dir/attr
  fi

  return 0
  
}

if [ "$action" = "ls.usr" ];then
  echo "----------User List-------------"
  for id in `ls $ROOT/users | grep -v audit | xargs basename -a`
  do
    app_chk=`echo $id | $AWK -F "." '{print $2}'`
    if [ "$app_chk" ];then
      app=`echo $id | $AWK -F "." '{print $1}'`
      echo "${app}/`cat $ROOT/users/$id/user_name`"
    else
      echo "`cat $ROOT/users/$id/user_name`"
    fi
  done
  echo "--------------------------------"
fi

# Handle user operation request
if [ "$action" = "add.usr" ];then
  
  if [ ! "$user_name" ];then
    echo "error: please set user_name"
    exit 1
  fi

  if [[ $user_name == *:* ]]; then
    echo "error: you can not use : for in username"
    exit 1
  fi

  if [[ $user_name == *{*}* ]]; then
    echo "error: you can not use "{ }" for in username"
    exit 1
  fi

  user_id=`echo "$user_name" | $SHASUM | $AWK '{print $1}'`

  if [ "$app" ];then
    user_dir="$ROOT/users/${app}.${user_id}"
  else
    user_dir="$ROOT/users/${user_id}"
  fi

  if [ -d $user_dir ];then 
    echo "warn: $user_name is already existing. if you want to initialize key of the use, please execute following command"
    if [ "$app" ];then
      echo "sudo $ROOT/adm/ops initialize.usr:$user_name app:$app"
    else
      echo "sudo $ROOT/adm/ops initialize.usr:$user_name"
    fi
    exit 1
  fi

  mkdir $user_dir
  echo "$user_name" > $user_dir/user_name
  chown -R small-shell:small-shell $user_dir

  set_attr $user_id permission rw $app
  initialize_url $user_id $user_name $app

fi

# Handle initialize operation request
if [ "$action" = "initialize.usr" ];then

  if [ ! "$user_name" ];then 
     echo "error: please input user name"
     exit 1
  fi

  user_id=`echo "$user_name" | $SHASUM | $AWK '{print $1}'`

  if [ "$app" ];then
    user_dir="$ROOT/users/${app}.${user_id}"
  else
    user_dir="$ROOT/users/${user_id}"
  fi

  if [ ! -d $user_dir ];then 
    if [ "$app" ];then
      user_name="${app}/${user_name}"
    fi
    echo "error: $user_name is not existing"
    exit 1
  fi
  
  initialize_url $user_id $user_name $app

fi

# Handle delete user request
if [ "$action" = "del.usr" ];then
  user_id=`echo "$user_name" | $SHASUM | $AWK '{print $1}'`

  if [ "$app" ];then
    user_dir="$ROOT/users/${app}.${user_id}"
  else
    user_dir="$ROOT/users/${user_id}"
  fi

  if [ ! -d $user_dir ];then
    if [ "$app" ];then
      user_name="${app}/${user_name}"
    fi
    echo "error: $user_name is not existing"
    exit 1
  fi

  if [ "$user_id" ];then
    rm -rf $user_dir
    if [ $? -eq 0 ];then
      echo "successfully deleted"
    else
      echo "error: something is wrong"
    fi
  fi
fi

# Handle attribute setting
if [[ $action == set.attr* ]];then

  user_id=`echo "$user_name" | $SHASUM | $AWK '{print $1}'`

  if [ "$app" ];then
    user_dir="$ROOT/users/${app}.${user_id}"
  else
    user_dir="$ROOT/users/${user_id}"
  fi

  if [ ! -d $user_dir ];then
    if [ "$app" ];then
      echo "error: there is no $user_name@${app}"
    else
      echo "error: there is no $user_name"
    fi
    exit 1
  fi

  set_attr $user_id $attr_key $attr_param $app
  if [ $? -eq 0 ];then
    if [ ! "$app" ];then
      echo "successfully set attr $attr_key $user_name{${attr_key}=${attr_param}}"
    else
      echo "successfully set attr $attr_key $app/$user_name{$attr_param}"
    fi
  else
    echo "error: failed to set attribute"
  fi

fi

if [[ $action == get.attr* ]];then
  user_id=`echo "$user_name" | $SHASUM | $AWK '{print $1}'`
  if [ "$app" ];then
    user_dir="$ROOT/users/${app}.${user_id}"
  else
    user_dir="$ROOT/users/${user_id}"
  fi

  if [ ! -d $user_dir ];then
    echo "error: there is no user ($user_name)"
    exit 1
  fi
  cat $user_dir/attr
fi

# Handle table tagging request
if [[ $action == add.tag* ]];then

  if [ ! "$databox" ];then
    echo "error: please set databox"
    exit 1
  fi

  if [ ! -d $ROOT/databox/$databox ];then
    echo "error:there is no databox $databox"
    exit 1
  fi

  if [ ! "$app" ];then
   tdir=$databox
   meta_param=$databox
  else
   tdir=${app}.${databox}
   meta_param=${app}{$databox}
  fi

  grep "^$filter$" $ROOT/tmp/tag/$tdir/* >/dev/null 2>&1
  if [ $? -eq 0 ];then
    echo "error: tag is already defined"
    exit 1
  fi

  tag=$RANDOM
  if [ ! -d $ROOT/tmp/tag/$tdir ];then
    mkdir $ROOT/tmp/tag/$tdir
    chown small-shell:small-shell $ROOT/tmp/tag/$tdir
  fi

  while [ -f $ROOT/tmp/tag/$tdir/$tag ]
  do
    tag=$RANDOM 
  done

  echo "$filter" > $ROOT/tmp/tag/$tdir/$tag
  chown small-shell:small-shell $ROOT/tmp/tag/$tdir/$tag
  echo "successfully created tag to $databox table"

fi

if [[ $action == del.tag* ]];then

  if [ ! "$app" ];then
   tdir=$databox
  else
   tdir=${app}.${databox}
  fi

  grep "^$filter$" $ROOT/tmp/tag/$tdir/* >/dev/null 2>&1

  if [ $? -eq 0 ];then
    tag=`grep -l "^$filter\$" $ROOT/tmp/tag/$tdir/* | xargs basename -a`
    rm $ROOT/tmp/tag/$tdir/$tag
    echo "successfully deleted tag from $tdir"
  else
    echo "error: there is no tag:${filter} on $tdir table"
    exit 1
  fi
fi

# Handle IP whitelisting operation request
if [ "$action" = "set.IP" ];then
  clear
  echo "please edit IP whitelisting list via Vim"
  echo "file will be opened after 3 sec"
  sleep 1
  clear
  echo "please edit IP whitelisting list via Vim"
  echo "file will be opened after 2 sec"
  sleep 1 
  clear
  echo "please edit IP whitelisting list via Vim"
  echo "file will be opened after 1 sec"
  sleep 1 

  chown small-shell:small-shell $ROOT/web/whitelist
  vi $ROOT/web/whitelist
fi


if [ ! "$action" ];then
 echo "please set action properly, man is here"
 echo "--------------------------------------------------
# BASIC OPERATION
 ls.usr
 add.usr:\$user
 initialize.usr:\$user
 del.usr:\$user
 set.attr:\$user{ro}
 set.attr:\$user{rw}
 set.attr:\$user{\$attribute_key=\$param}
 get.attr:\$user

# Tagging for Base APP table
 add.tag:\$databox{\$filter}
 del.tag:\$databox{\$filter}

# for Scratch APP
 add.usr:\$user app:\$app
 initialize.usr:\$user app:\$app
 del.usr:\$user app:\$app
 add.tag:\$databox{\$filter} app:\$app
 del.tag:\$databox{\$filter} app:\$app
 set.attr:\$user{rw} app:\$app
 set.attr:\$user{ro} app:\$app
 set.attr:\$user{\$attribute_key=\$param} app:\$app
 get.attr:\$user app:\$app

# IP whitelisting
 set.IP #IP whitelisting
 --------------------------------------------------"

fi
exit 0
