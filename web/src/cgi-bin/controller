#!/bin/bash
###############################
# controller for Base APP
###############################

# preproceduure
session_update="required"
IP_persistence="yes"
User_agent_persistence="yes"

# load small-shell conf
. %%www/descriptor/.small_shell_conf

# load header
if [ "$IP_persistence" = "yes" ];then
  remote_addr=`echo $REMOTE_ADDR | $SED "s/:/-/g"`
else
  logging_IP=`echo $REMOTE_ADDR | $SED "s/:/-/g"`
fi

if [ "$User_agent_persistence" = "yes" ];then
  user_agent=`echo $HTTP_USER_AGENT | $SED "s/:/-/g" | $SED "s/ /_/g"`
fi

param=`date +%s`
param="$param:$RANDOM"
count=1
while [ -f %%www/tmp/${param} ]
do
 sleep 0.01
 count=`expr $count + 1`
 if [ $count -eq 100 ];then
   echo "Content-Type: text/html"
   echo ""
   echo "error: please contact to adimin"
   exit 1
 fi
done

# parse QUERY_STRING
echo $QUERY_STRING | $PHP -r "echo urldecode(file_get_contents('php://stdin'));" | tr -d \$ | tr -d \` | $SED "s/\&/\n/g" > %%www/tmp/${param}
cat %%www/tmp/${param} | $SED -e "s/=/=\"/1" | $SED "s/$/\"/g" | $SED "s/^\"//g" > %%www/tmp/${param}.load
chmod 755 %%www/tmp/${param}.load

# load query string
.  %%www/tmp/${param}.load
rm  %%www/tmp/${param}*


# define main req
if [ "$req" = "main" -o ! "$req" ];then
  req=table
fi

# define contents type except statistics file or graph
if [ ! "$req" = "stats" -a ! "$req" = "file" ];then
  echo "Content-Type: text/html"
  echo ""
fi

  
if [ "$req" = "log_viewer" -o "$req" = "csv" -o "$req" = "hash" -o "$req" = "stats" -o "$req" = "file" ];then
  # session check
  session_chk=`${small_shell_path}/bin/auth session_chk:${session} pin:${pin} remote_addr:${remote_addr} user_agent:${user_agent} logging_IP:${logging_IP}`

  session_update=no
  if [ ! "$session_chk" ];then 
    if [ "$req" = "stats" -o "$req" = "file" ];then
      echo "Content-Type: text/html"
      echo ""
    fi

    if [ "$req" = "log_viewer" ];then
      echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.base?databox=$databox&req=$req&id=$id&message=!%20Session%20Expired\">"
      exit 1
    else
      req=main
      echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.base?databox=$databox&req=$req&message=!%20Session%20Expired\">"
      exit 1
    fi
  fi
fi

if [ "$req" = "logout" ]; then
  ${small_shell_path}/bin/auth pin:${pin} remote_addr:${remote_addr} user_agent:${user_agent} \
  logout:${session} logging_IP:${logging_IP} > /dev/null 2>&1
  echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.base?req=main\">"
  exit 0
fi

if [ "$session_update" = "required" ];then
  get_session=`${small_shell_path}/bin/auth session_persist:${session} \
  pin:${pin} remote_addr:${remote_addr} user_agent:${user_agent} logging_IP:${logging_IP}`
  user_name=`echo $get_session | $AWK -F "," '{print $1}' | $AWK -F ":" '{print $2}'`
  session=`echo $get_session | $AWK -F "," '{print $2}' | $AWK -F ":" '{print $2}'`
  pin=`echo $get_session | $AWK -F "," '{print $3}' | $AWK -F ":" '{print $2}'`

  if [ ! "$user_name" -o ! "$session" -o ! "${pin}" ];then

    if [ "$req" = "console" ];then
      echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.base?databox=$databox&req=$req&message=!%20Session%20Expired\">"
      exit 1

    elif [ "$req" = "table" ];then
      echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.base?databox=$databox&req=$req&message=!%20Session%20Expired\">"
      exit 1

    elif [ "$req" = "get" ];then
      echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.base?databox=$databox&req=$req&id=$id&message=!%20Session%20Expired\">"
      exit 1

    else
      req=main
      echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.base?databox=$databox&req=$req&message=!%20Session%20Expired\">"
      exit 1

    fi
  fi

  if [ "$replica_hosts" ];then
    for replica in $replica_hosts
    do
      ${small_shell_path}/bin/auth sync:${session}@${replica} > /dev/null 2>&1 &
    done
  fi

fi

# null handling
if [ "$databox" = "null" -o ! "$databox" ];then
  echo "<h1>NO DATABOX, please create databox first</h1>"
  exit 1
fi

# dump POST data
if [ "`echo $REQUEST_METHOD | grep -i "POST"`" ];then

  if [ "`echo $CONTENT_TYPE | grep "application/json"`" ];then
    method=json
  elif [ "`echo $CONTENT_TYPE | grep "multipart/form-data"`" ];then
    method=multipart
  elif [ "`echo $CONTENT_TYPE | grep "application/octet-stream"`" ];then
    method=data-binary
  else
    method=urlenc
  fi

  mkdir %%www/tmp/$session
  # dump posted data
  dd bs=${CONTENT_LENGTH} of=%%www/tmp/$session/input 2>/dev/null
  %%www/bin/parse.sh $session $method

fi

#----------------------------
# routing to action scripts
#----------------------------

case "$req" in

  "console")
    %%www/bin/console.sh databox:$databox session:$session user_name:$user_name pin:$pin remote_addr:${remote_addr};;

  "table")
    table_command="`echo $table_command | $SED "s/ /{%%space}/g"`"
    %%www/bin/table.sh databox:$databox session:$session user_name:$user_name pin:$pin page:$page table_command:$table_command line:$line;;

  "get")
    # if its replica host, master definition will be in ./descriptor/.small-shell.conf
    if [ ! "$master" ];then
      %%www/bin/get.sh databox:$databox session:$session user_name:$user_name pin:$pin id:$id duplicate:$duplicate
    else
      sync=`${small_shell_path}/bin/auth sync:${session}@${master}`
      if [ "$sync" = "synced" ];then
        redirect=yes
      else
        redirect=no
      fi
      %%www/bin/get.sh databox:$databox session:$session user_name:$user_name pin:$pin id:$id duplicate:$duplicate redirect:$redirect
    fi
    ;;

  "set")
    %%www/bin/set.sh databox:$databox session:$session user_name:$user_name pin:$pin id:$id ;;

  "del")
    %%www/bin/del.sh databox:$databox session:$session user_name:$user_name pin:$pin id:$id ;;

  "log_viewer")
    %%www/bin/log_viewer.sh databox:$databox session:$session pin:$pin id:$id data_import_session:$data_import_session ;;

  "import")
    # master param must be loaded on ./descriptor/.small-shell.conf
    if [ ! "$master" ];then
      %%www/bin/import.sh databox:$databox session:$session pin:$pin user_name:$user_name \
      remote_addr:${remote_addr} user_agent:${user_agent}
    else
      sync=`${small_shell_path}/bin/auth sync:${session}@${master}`
      if [ "$sync" = "synced" ];then
        redirect=yes
      else
        redirect=no
      fi
      %%www/bin/import.sh databox:$databox session:$session pin:$pin user_name:$user_name \
      remote_addr:${remote_addr} user_agent:${user_agent} redirect:$redirect 
    fi
    ;;


  "hash")
    %%www/bin/hashchain.sh databox:$databox session:$session pin:$pin id:$id ;;

  "csv")
    %%www/bin/csv.sh databox:$databox session:$session pin:$pin filter:$filter ;;

  "stats")
    %%www/bin/statistics_viewer.sh session:$session target:$target type:$type ;;

  "file")
    %%www/bin/dl.sh session:$session pin:$pin id:$id databox:$databox ;;

  *)
    echo "error: wrong request";;

esac

exit 0
