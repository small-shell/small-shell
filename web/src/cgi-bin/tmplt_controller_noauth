#!/bin/bash

##########################################
# controller for Scratch APP #none auth
##########################################

authkey="%%authkey"
IP_whitelisting=%%IP_whitelisting
IP_persistence="yes"
User_agent_persistence="yes"

# load small-shell params
. %%www/descriptor/.small_shell_conf

# load header
if [ "$IP_persistence" = "yes" ];then
  remote_addr=`echo $REMOTE_ADDR | $SED "s/:/-/g"`
else
  logging_IP=`echo $REMOTE_ADDR | $SED "s/:/-/g"`
fi
if [ "$User_agent_persistence" = "yes" ];then
  user_agent=`echo $HTTP_USER_AGENT | $SED "s/:/-/g" | $SED "s/ /_/g"`
fi

# IP restriction check
if [ "$IP_whitelisting" = "yes" ];then
  whitelist_chk=`${small_shell_path}/bin/meta get.IP | grep -v "NO IP RESTRICTION"`
  if [ "$whitelist_chk" ];then
    for IP in $whitelist_chk
    do
      IP=`echo $IP | $SED "s/*//g"`
      if [[ ${remote_addr} == ${IP}* ]] || [[ ${logging_IP} == ${IP}* ]] ;then
        IP_chk=yes
        break
      fi
    done
   
    if [ ! "$IP_chk" = "yes" ];then
      echo "error: your IP is not allowed to access"
      exit 1
    fi
  fi
fi

param=`date +%s`
param="$param:$RANDOM"
count=1
while [ -f %%www/tmp/${param} ]
do
 sleep 0.01
 count=`expr $count + 1`
 if [ $count -eq 100 ];then
   echo "error: please contact to adimin"
   exit 1
 fi
done

# parse QUERY_STRING
echo $QUERY_STRING | $PHP -r "echo urldecode(file_get_contents('php://stdin'));" | tr -d \$ | tr -d \` | $SED "s/\&/\n/g" > %%www/tmp/${param}
cat %%www/tmp/${param} | $SED -e "s/=/=\"/1" | $SED "s/$/\"/g" | $SED "s/^\"//g" > %%www/tmp/${param}.load
chmod 755 %%www/tmp/${param}.load

# load query string
.  %%www/tmp/${param}.load
rm  %%www/tmp/${param}*

if [ ! "$req" ];then
  req=main
fi

if [ "$subapp" ];then
  if [ ! "$req" = "main" -a ! "$req" = "logout" ];then
    req="${subapp}.$req"
  fi
fi

# define contents type except statistics file or graph
if [[ ! "$req" == *stats && ! "$req" == *file ]];then
  echo "Content-Type: text/html"
  echo ""
fi

# auth for small-shell databox
auth_req=`${small_shell_path}/bin/extension_auth key_auth:${authkey} remote_addr:${remote_addr} \
app:%%app user_agent:${user_agent} logging_IP:${logging_IP}`
user_name="guest"
session=`echo $auth_req | $AWK -F "," '{print $2}' | $AWK -F ":" '{print $2}'`
pin=`echo $auth_req | $AWK -F "," '{print $3}' | $AWK -F ":" '{print $2}'`

if [ ! "$session" -o ! "$pin" ];then
  echo "Content-Type: text/html"
  echo ""
  echo "error: internal key authentication failure"
  exit 1
fi

# dump POST data
if [ "`echo $REQUEST_METHOD | grep -i "POST"`" ];then

  if [ "`echo $CONTENT_TYPE | grep "application/json"`" ];then
    method=json
  elif [ "`echo $CONTENT_TYPE | grep "multipart/form-data"`" ];then
    method=multipart
  elif [ "`echo $CONTENT_TYPE | grep "application/octet-stream"`" ];then
    method=data-binary
  else
    method=urlenc
  fi

  mkdir %%www/tmp/$session
  # dump posted data
  dd bs=${CONTENT_LENGTH} of=%%www/tmp/$session/input 2>/dev/null
  %%www/bin/parse.sh $session $method

fi

#----------------------------
# routing to action scripts
#----------------------------

case "$req" in
  
  "main")
    %%www/bin/%%app_main.sh session:$session pin:$pin user_name:$user_name remote_addr:${remote_addr};;

  "get")
    %%www/bin/%%app_get.sh session:$session pin:$pin user_name:$user_name id:$id duplicate:$duplicate;;

  "set")
    %%www/bin/%%app_set.sh session:$session pin:$pin user_name:$user_name id:$id;;

  "table")
    table_command="`echo $table_command | $SED "s/ /{%%space}/g"`"
    %%www/bin/%%app_table.sh session:$session pin:$pin user_name:$user_name id:$id page:$page table_command:$table_command line:$line;;

  "log_viewer")
    %%www/bin/%%app_log_viewer.sh session:$session pin:$pin user_name:$user_name id:$id ;;

  "file")
    %%www/bin/%%app_dl.sh session:$session pin:$pin user_name:$user_name id:$id ;;

  # sub app routing section

  *)
    echo "error: wrong request";;

esac

exit 0
