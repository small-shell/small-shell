#!/bin/bash

# load small-shell conf
. %%www/descriptor/.small_shell_conf

# load remote addr
remote_addr=$(echo "$REMOTE_ADDR" | $SED "s/:/-/g")

# preproceduure
param=$(date +%s)
param="$param:$RANDOM"
count=1

while [ -f %%www/tmp/${param} ]
do
 sleep 0.01
 count=$(expr $count + 1)
 if [ $count -eq 100 ];then
   echo "Content-Type: text/html"
   echo ""
   echo "error: please contact to adimin"
   exit 1
 fi
done

# parse QUERY_STRING
echo "$QUERY_STRING" | $PHP -r "echo urldecode(file_get_contents('php://stdin'));" | tr -d \$ | tr -d \` | $SED "s/\&/\n/g" > %%www/tmp/${param}
cat %%www/tmp/${param} | $SED -e "s/=/=\"/1" | $SED "s/$/\"/g" | $SED "s/^\"//g" > %%www/tmp/${param}.load
chmod 755 %%www/tmp/${param}.load

# load query string
.  %%www/tmp/${param}.load
rm  %%www/tmp/${param}*

# load from HTML request header 
authkey=$HTTP_X_SMALL_SHELL_AUTHKEY

# key auth
auth_req=$(${small_shell_path}/bin/auth key_auth:${authkey} remote_addr:${remote_addr} user_agent:e-cron)
user_name=$(echo "$auth_req" | $AWK -F "," '{print $1}' | $AWK -F ":" '{print $2}')
session=$(echo "$auth_req" | $AWK -F "," '{print $2}' | $AWK -F ":" '{print $2}')
pin=$(echo "$auth_req" | $AWK -F "," '{print $3}' | $AWK -F ":" '{print $2}')

if [ ! "$user_name" -o ! "$session" -o ! "$pin" ];then
  echo "Content-Type: text/html"
  echo ""
  echo "KEY AUTHENTICATION FAILED"
  exit 1
fi

# parse POST data
if [ "$(echo "$REQUEST_METHOD" | grep -i "POST")" ];then
  
  if [ "$(echo "$CONTENT_TYPE" | grep "application/json")" ];then
    method=json
  elif [ "$(echo "$CONTENT_TYPE" | grep "multipart/form-data")" ];then
    method=multipart
  elif [ "$(echo "$CONTENT_TYPE" | grep "application/octet-stream")" ];then
    method=data-binary
  else
    method=urlenc
  fi
 
  mkdir %%www/tmp/${session}
  # dump posted data
  dd bs=${CONTENT_LENGTH} of=%%www/tmp/${session}/input 2>/dev/null
  %%www/bin/parse.sh $session $method
 
fi

# chk request
if [ "$req" = "ls" ];then
  if [ "$filename" ];then
    echo "Content-Type: text/html"
    echo ""
    ${small_shell_path}/bin/e-cron ls.file:$filename remote_addr:$remote_addr
  fi
fi

# get message or file from e-cron core
if [ "$req" = "get" ];then
  if [ "$message" ];then
    echo "Content-Type: text/html"
    echo ""
    ${small_shell_path}/bin/e-cron get.message:$message
  fi

  if [ "$filename" ];then
    file_chk=$(${small_shell_path}/bin/e-cron ls.file:$filename remote_addr:$remote_addr)
    if [ "$file_chk" ];then
      echo "Content-Disposition: attachment; filename=$filename"
      echo "Content-Type: application/octet-stream"
      echo ""
      ${small_shell_path}/bin/e-cron get.file:$filename remote_addr:$remote_addr
    else
      echo "Content-Disposition: attachment; filename=failed"
      echo "Content-Type: application/octet-stream"
      echo ""
      echo "file is not ready"
    fi 
  fi
fi

# send messages or file to e-cron core
if [ "$req" = "push" ];then
  if [ "$message" ];then
    echo "Content-Type: text/html"
    echo ""
    ${small_shell_path}/bin/e-cron push.message:$message remote_addr:$remote_addr
  fi

  if [ "$filename"  ];then
    echo "Content-Type: text/html"
    echo ""
    if [ -f %%www/tmp/${session}/binary_file/binary.data ];then
      mv %%www/tmp/${session}/binary_file/binary.data %%www/tmp/${session}/${filename}
      ${small_shell_path}/bin/e-cron push.file:%%www/tmp/${session}/${filename} remote_addr:$remote_addr
    else
      echo "$filename seems not uploaded"
    fi
  fi
fi

if [ -d %%www/tmp/${session} ];then
  rm -rf %%www/tmp/${session}
fi

exit 0
