#!/bin/bash

###############################
# key auth for CustomAPP
###############################

# set persistence option
IP_persistence="no"
User_agent_persistence="yes"

echo "Content-Type: text/html"
echo ""

# load small-shell conf
. %%www/def/.small_shell_conf

#read posted param 
input=$(dd bs=${CONTENT_LENGTH} 2>/dev/null | cat -)

# load header
if [ "$IP_persistence" = "yes" ];then
  remote_addr=$(echo "$REMOTE_ADDR" | $SED "s/:/-/g")
else
  logging_IP=$(echo "$REMOTE_ADDR" | $SED "s/:/-/g")
fi
if [ "$User_agent_persistence" = "yes" ];then
  user_agent=$(echo "$HTTP_USER_AGENT" | $SED "s/:/-/g" | $SED "s/ /_/g")
fi

param=$(date +%s)
param="$param:$RANDOM"
count=1
while [ -f %%www/tmp/${param} ]
do
 sleep 0.01
 count=$(expr $count + 1)
 if [ $count -eq 100 ];then
   echo "error: please contact to adimin"
   exit 1
 fi
done

# parse QUERY STRING
echo "$QUERY_STRING" | $PHP -r "echo urldecode(file_get_contents('php://stdin'));" | $SED "s/\&/\n/g" > %%www/tmp/${param}

# parse POST param
echo "$input" | $SED "s/&/\n/g"  | $SED -r "s/%%app_authkey(.*)=/received_key=/g" \
| $PHP -r "echo urldecode(file_get_contents('php://stdin'));"  >> %%www/tmp/${param}
cat %%www/tmp/${param} | $SED -e "s/=/=\"/1" | $SED "s/$/\"/g" | $SED "s/^\"//g" |  tr -d \$ | tr -d \` > %%www/tmp/${param}.load

chmod 755 %%www/tmp/${param}.load

# load query string and POSTED params
.  %%www/tmp/${param}.load
rm  %%www/tmp/${param}*


# For the access with initialize hashkey which contain in query string and create new user_key
if [ "$initialize" ];then
  user_id=$(echo "$initialize" | $AWK -F "," '{print $1}')
  initialize_hash_key=$(echo "$initialize" |  $AWK -F "," '{print $2}')

  if [ "$master" ];then
    key_gen=$(ssh ${master} ${small_shell_path}/bin/extension_auth app:%%app initialize:${user_id}{${initialize_hash_key}} \
    remote_addr:${remote_addr} logging_IP:${logging_IP})
    if [ $? -eq 255 ];then
      message="Master server failed. please contact to WEB admin"
      cat %%www/def/key_initialize_err.html.def \
      | $SED "s/%%message/${message}/g"
      exit 1
    fi
  else
    key_gen=$(${small_shell_path}/bin/extension_auth app:%%app initialize:${user_id}{${initialize_hash_key}} \
    remote_addr:${remote_addr} logging_IP:${logging_IP})
  fi

  user_name=$(echo "$key_gen" | $AWK -F "," '{print $1}' | $AWK -F ":" '{print $2}')
  user_key=$(echo "$key_gen" | $AWK -F "," '{print $2}' | $AWK -F ":" '{print $2}')
  server=$(${small_shell_path}/bin/meta get.server)

  # render success page
  if [ "$user_name" -a "$user_key" ];then
    if [ ! "$remote_addr" ];then
      remote_addr=$logging_IP
    fi
    cat %%www/def/%%app_auth_initialize.html.def | $SED -r "s/^( *)</</1" \
    | $SED "s/%%IP/${remote_addr}/g" \
    | $SED "s/%%user_name/${user_name}/g" \
    | $SED "s/%%user_key/${user_key}/g" \
    | $SED "s/%%server/${server}/g"
    exit 0
  else
    message="error: Your initialize URL should be wrong or expired"
    cat %%www/def/key_initialize_err.html.def \
    | $SED "s/%%message/${message}/g"
    exit 1 
  fi
fi

# render auth form
if [ ! "$received_key" ];then
  # regenerate  query string
  if [ "$req" ];then
    req="?req=$(echo "$req")"
  fi

  if [ "$id" ];then
    id="\&id=$(echo "$id")"
  fi

  if [ "$message" ];then
    message="<p><b>$(echo "$message")<\/b><\/p>"
  fi

  # render standard login form with queyr string and messge
  cat %%www/def/%%app_auth_form.html.def | $SED -r "s/^( *)</</1" \
  | $SED "/%%auth_form_menu/r %%www/def/common_parts/%%app_auth_form_menu" \
  | $SED "s/%%auth_form_menu//g"\
  | $SED "/%%footer/r %%www/def/common_parts/%%app_footer" \
  | $SED "/%%footer/d"\
  | $SED "s/%%message/${message}/g" \
  | $SED "s/?%%params/${req}${id}/g"
  exit 0
fi

# Authentication 
if [ "$received_key" ];then
  if [[ $received_key == *:* ]]; then
    authkey=$(echo "$received_key" | $AWK -F ":" '{print $2}')
  else
    authkey=$received_key
  fi
  auth_req=$(${small_shell_path}/bin/extension_auth app:%%app key_auth:${authkey} \
  remote_addr:${remote_addr} user_agent:${user_agent} logging_IP:${logging_IP})
  user_name=$(echo "$auth_req" | $AWK -F "," '{print $1}' | $AWK -F ":" '{print $2}')
  session=$(echo "$auth_req" | $AWK -F "," '{print $2}' | $AWK -F ":" '{print $2}')
  pin=$(echo "$auth_req" | $AWK -F "," '{print $3}' | $AWK -F ":" '{print $2}')
   
  if [ "$user_name" -a "$session" -a "$pin" ];then

    if [ ! "$req" ];then
      req=main
    fi

    # redirect to APP if key auth is OK
    if [[ $req == *table ]];then
      echo "<meta http-equiv=\"refresh\" content=\"0; url=./%%app?session=$session&pin=$pin&req=${req}\">"
    elif [[ $req == *get || $req == *log_viewer ]];then
      echo "<meta http-equiv=\"refresh\" content=\"0; url=./%%app?session=$session&pin=$pin&req=$req&id=${id}\">"
    else
      echo "<meta http-equiv=\"refresh\" content=\"0; url=./%%app?session=$session&pin=$pin&req=${req}\">"
    fi

  else
    # render standard login form with error message
    cat %%www/def/%%app_auth_form.html.def | $SED -r "s/^( *)</</1" \
    | $SED "s/%%message/<p id=\"message\"><b>! Key is wrong<\/b><\/p>/g" \
    | $SED "/%%auth_form_menu/r %%www/def/common_parts/%%app_auth_form_menu" \
    | $SED "s/%%auth_form_menu//g"\
    | $SED "/%%footer/r %%www/def/common_parts/%%app_footer" \
    | $SED "/%%footer/d"\
    | $SED "s/%%params//g"
    exit 1
  fi
  
fi

