#!/bin/bash

echo "Content-Type: text/html"
echo ""

# load small-shell conf
. %%www/descriptor/.small_shell_conf

# load small-shell conf
. %%www/descriptor/.small_shell_conf

# IP restriction check
whitelist_chk=$(${small_shell_path}/bin/meta get.IPL | grep -v "NO IP RESTRICTION")
if [ "$whitelist_chk" ];then
  for IP in $whitelist_chk
  do
    IP=$(echo "$IP" | $SED "s/*//g")
    if [[ ${REMOTE_ADDR} == ${IP}* ]];then
      IP_chk=yes
      break
    fi
  done

  if [ ! "$IP_chk" = "yes" ];then
    echo "error: your IP is not allowed to access"
    exit 1
  fi
fi

# load remote addr and user_agent
remote_addr=$(echo "$REMOTE_ADDR" | $SED "s/:/-/g")
user_agent=$(echo "$HTTP_USER_AGENT" | $SED "s/:/-/g" | $SED "s/ /_/g")

# preproceduure
param=$(date +%s)
param="$param:$RANDOM"
count=1

while [ -f %%www/tmp/${param} ]
do
 sleep 0.01
 count=$(expr $count + 1)
 if [ $count -eq 100 ];then
   echo "error: please contact to adimin"
   exit 1
 fi
done

echo "$QUERY_STRING" | $PHP -r "echo urldecode(file_get_contents('php://stdin'));" | tr -d \$ | tr -d \` | $SED "s/\&/\n/g" > %%www/tmp/${param}
cat %%www/tmp/${param} | $SED -e "s/=/=\"/1" | $SED "s/$/\"/g" | $SED "s/^\"//g" > %%www/tmp/${param}.load
chmod 755 %%www/tmp/${param}.load

# load query string
.  %%www/tmp/${param}.load
rm  %%www/tmp/${param}*

# load from HTML request header 
authkey=$HTTP_X_SMALL_SHELL_AUTHKEY

# key auth
auth_req=$(${small_shell_path}/bin/auth key_auth:${authkey} remote_addr:${remote_addr} user_agent:${user_agent})
user_name=$(echo "$auth_req" | $AWK -F "," '{print $1}' | $AWK -F ":" '{print $2}')
session=$(echo "$auth_req" | $AWK -F "," '{print $2}' | $AWK -F ":" '{print $2}')
pin=$(echo "$auth_req" | $AWK -F "," '{print $3}' | $AWK -F ":" '{print $2}')

if [ ! "$user_name" -o ! "$session" -o ! "$pin" ];then
  echo "{ \"error\": \"KEY AUTHENTICATION FAILED\" }"
  exit 1
fi

# Handle POST request
post_chk=$(echo "$REQUEST_METHOD" | grep -i "POST")
if [ "$post_chk" ];then
  mkdir %%www/tmp/${session}
  # dump posted data
  dd bs=${CONTENT_LENGTH} of=%%www/tmp/${session}/input 2>/dev/null

  json_chk=$(echo "$CONTENT_TYPE" | grep "application/json")
  if [ "$json_chk" ];then
    %%www/bin/parse.sh $session json
    keys=$(ls %%www/tmp/${session} | grep -v binary_file | $SED -z "s/\n/,/g" | $SED "s/,$//g")

    if [ "$id" -a "$databox" ];then

      # set posted data
      ${small_shell_path}/bin/DATA_shell \
      session:$session pin:$pin action:set id:$id databox:$databox keys:$keys \
      input_dir:%%www/tmp/${session} databox:$databox  > %%www/tmp/${session}/result
      echo "{ \"info\": \"$(cat %%www/tmp/${session}/result | $SED -z "s/\n/, /g" | $SED "s/, \$//g" | $SED "s/:/->/g")\" }"
    else

      echo "{ \"error\": \"PLEASE INPUT DATABOX AND ID\" }"
    fi
  else
    echo "{ \"error\": \"PLEASE USE application/json in QUERY_STRING for POSTING THROUGH THIS API\" }"
  fi
fi

# Handle GET request
get_chk=$(echo "$REQUEST_METHOD" | grep -i "GET")
if [ "$get_chk" ];then
  mkdir %%www/tmp/${session}
  if [ "$command" ];then
    ${small_shell_path}/bin/DATA_shell session:$session pin:$pin command:$command databox:$databox format:json \
    | $SED "s/{%%%%%%%%%%%%%}/#/g"\
    | $SED "s/{%%%%%%%%%%%%}/|/g"\
    | $SED "s/{%%%%%%%%%%%}/\]/g"\
    | $SED "s/{%%%%%%%%%%}/\[/g"\
    | $SED "s/{%%%%%%%%%}/)/g"\
    | $SED "s/{%%%%%%%%}/(/g"\
    | $SED "s/{%%%%%%%}/_/g"\
    | $SED "s/{%%%%%%}/,/g"\
    | $SED "s/{%%%%%}/\//g"\
    | $SED "s/{%%%%}/\&/g"\
    | $SED "s/{%%%}/:/g" > %%www/tmp/${session}/result

    error_chk=$(grep error: %%www/tmp/${session}/result | $SED "s/error://g")
    if [ "$error_chk" ];then
      echo "{ \"error\": \"$error_chk\" }"
    elif [ ! -s %%www/tmp/${session}/result ];then
      echo "{ \"info\": \"no result\" }"
    else
      cat %%www/tmp/${session}/result
    fi

  elif [ "$id" ];then
    ${small_shell_path}/bin/DATA_shell session:$session pin:$pin \
    action:get keys:$keys id:$id databox:$databox format:json  > %%www/tmp/${session}/result

    error_chk=$(grep error: %%www/tmp/${session}/result | $SED "s/error://g")
    if [ "$error_chk" ];then
      echo "{ \"error\": \"$error_chk\" }"
    elif [ ! -s %%www/tmp/${session}/result ];then
      echo "{ \"info\": \"no result\" }"
    else
      cat %%www/tmp/${session}/result
    fi
  fi
fi

${small_shell_path}/bin/auth pin:${pin} remote_addr:${remote_addr} user_agent:${user_agent} \
logout:${session} > /dev/null 2>&1


if [ "$session" ];then
  rm -rf %%www/tmp/${session}
fi

exit 0
