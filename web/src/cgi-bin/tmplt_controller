#!/bin/bash

###############################
# controller for Scratch APP
###############################

# preprocedure
session_update="required"
IP_persistence="no"
User_agent_persistence="yes"
auth="%%auth"

# load small-shell conf
. %%www/descriptor/.small_shell_conf

# load header
if [ "$IP_persistence" = "yes" ];then
  remote_addr=`echo $REMOTE_ADDR | $SED "s/:/-/g"`
else
  logging_IP=`echo $REMOTE_ADDR | $SED "s/:/-/g"`
fi
if [ "$User_agent_persistence" = "yes" ];then
  user_agent=`echo $HTTP_USER_AGENT | $SED "s/:/-/g" | $SED "s/ /_/g"`
fi

# parse QUERY_STRING
param=`date +%s`
param="$param:$RANDOM"
count=1
while [ -f %%www/tmp/${param} ]
do
 sleep 0.01
 count=`expr $count + 1`
 if [ $count -eq 100 ];then
   echo "error: please contact to adimin"
   exit 1
 fi
done

echo $QUERY_STRING | $PHP -r "echo urldecode(file_get_contents('php://stdin'));" | tr -d \$ | tr -d \` | $SED "s/\&/\n/g" > %%www/tmp/${param}
cat %%www/tmp/${param} | $SED -e "s/=/=\"/1" | $SED "s/$/\"/g" | $SED "s/^\"//g" > %%www/tmp/${param}.load
chmod 755 %%www/tmp/${param}.load

# load query string
.  %%www/tmp/${param}.load
rm  %%www/tmp/${param}*

if [ ! "$req" ];then
  req=main
fi

if [ "$subapp" ];then
  if [ ! "$req" = "main" -a ! "$req" = "logout" ];then
    req="${subapp}.$req"
  fi
fi

# define contents type except file or graph
if [[ ! "$req" == *stats && ! "$req" == *file ]];then

  echo "Content-Type: text/html"
  echo ""
fi


if [ "$auth" = "required" ];then
  # session verification
  if [[ "$req" == *log_viewer || "$req" == *csv || "$req" == *hash || "$req" == *stats || "$req" == *file ]];then

    session_update=no

    # session check
    session_chk=`${small_shell_path}/bin/extension_auth app:%%app session_chk:${session} pin:${pin} \
    remote_addr:${remote_addr} user_agent:${user_agent} logging_IP:${logging_IP}`
    if [ ! "$session_chk" ];then
      if [ "$req" = "log_viewer" ];then
        echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.%%app?req=$req&id=$id&message=!%20Session%20Expired\">"
        exit 1
      else
        echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.%%app?req=$req&message=!%20Session%20Expired\">"
        exit 1
      fi
    fi
  fi

  if [ "$req" = "logout" ]; then
    ${small_shell_path}/bin/extension_auth app:%%app pin:${pin} remote_addr:${remote_addr} logout:${session} \
    user_agent:${user_agent} logging_IP:${logging_IP} > /dev/null 2>&1
    echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.%%app?req=main\">"
    exit 0
  fi

  # session update
  if [ "$session_update" = "required" ];then
    get_session=`${small_shell_path}/bin/extension_auth session_persist:${session} \
    pin:${pin} remote_addr:${remote_addr} user_agent:${user_agent} app:%%app logging_IP:${logging_IP}`

    user_name=`echo $get_session | $AWK -F "," '{print $1}' | $AWK -F ":" '{print $2}'`
    session=`echo $get_session | $AWK -F "," '{print $2}' | $AWK -F ":" '{print $2}'`
    pin=`echo $get_session | $AWK -F "," '{print $3}' | $AWK -F ":" '{print $2}'`

    if [ ! "$user_name" -o ! "$session" -o ! "${pin}" ];then
      if [[ $req == *table ]];then
        echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.%%app?req=$req&message=!%20Session%20Expired\">"
        exit 1
      elif [[ $req == *get ]];then
        echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.%%app?req=$req&id=$id&message=!%20Session%20Expired\">"
        exit 1
      else
        req=main
        echo "<meta http-equiv=\"refresh\" content=\"0; url=./auth.%%app?req=$req&message=!%20Session%20Expired\">"
        exit 1
      fi
    fi

    if [ "$replica_hosts" ];then
      for replica in $replica_hosts
      do
        ${small_shell_path}/bin/extension_auth app:%%app sync:${session}@${replica} > /dev/null 2>&1 &
      done
    fi

  fi
fi

# dump POST data
if [ "`echo $REQUEST_METHOD | grep -i "POST"`" ];then

  if [ "`echo $CONTENT_TYPE | grep "application/json"`" ];then
    method=json
  elif [ "`echo $CONTENT_TYPE | grep "multipart/form-data"`" ];then
    method=multipart
  elif [ "`echo $CONTENT_TYPE | grep "application/octet-stream"`" ];then
    method=data-binary
  else
    method=urlenc
  fi

  mkdir %%www/tmp/$session
  # dump posted data
  dd bs=${CONTENT_LENGTH} of=%%www/tmp/$session/input 2>/dev/null
  %%www/bin/parse.sh $session $method

fi

#----------------------------
# routing to action scripts
#----------------------------

case "$req" in
  
  "main")
    %%www/bin/%%app_main.sh session:$session pin:$pin user_name:$user_name ;;

  "get")
    # if its replica host, master definition will be in ./descriptor/.small-shell.conf
    if [ ! "$master" ];then
      %%www/bin/%%app_get.sh session:$session pin:$pin user_name:$user_name id:$id duplicate:$duplicate databox:$databox
    else
      sync=`${small_shell_path}/bin/extension_auth app:%%app sync:${session}@${master}`
      if [ "$sync" = "synced" ];then
        redirect=yes
      else
        redirect=no
      fi
      %%www/bin/%%app_get.sh session:$session pin:$pin user_name:$user_name id:$id duplicate:$duplicate redirect:$redirect databox:$databox
    fi
    ;;

  "set")
    %%www/bin/%%app_set.sh session:$session pin:$pin user_name:$user_name id:$id databox:$databox ;;

  "del")
    %%www/bin/%%app_del.sh session:$session pin:$pin user_name:$user_name id:$id databox:$databox ;;

  "table")
    table_command="`echo $table_command | $SED "s/ /{%%space}/g"`"
    %%www/bin/%%app_table.sh session:$session pin:$pin user_name:$user_name id:$id page:$page table_command:$table_command line:$line ;;

  "log_viewer")
    %%www/bin/%%app_log_viewer.sh session:$session pin:$pin id:$id databox:$databox ;;

  "file")
    %%www/bin/%%app_dl.sh session:$session pin:$pin id:$id ;;

  # sub app routing section

  *)
    echo "error: wrong request";;

esac

exit 0
