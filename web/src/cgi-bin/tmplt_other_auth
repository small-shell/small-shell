#!/bin/bash

# load authkey
authkey="%%authkey"

echo "Content-Type: text/html"
echo ""

# load small-shell path
. ../descriptor/.small_shell_path

# load remote addr
remote_addr=`echo $REMOTE_ADDR | sed "s/:/-/g"`

# required
IP_whitelisting=%%IP_whitelisting

# IP restriction check
if [ "$IP_whitelisting" = "yes" ];then

  whitelist_chk=`${small_shell_path}/bin/meta get.IP | grep -v "NO IP RESTRICTION"`
  if [ "$whitelist_chk" ];then
    for IP in $whitelist_chk
    do
      IP=`echo $IP | sed "s/*//g"`
      if [[ ${remote_addr} == ${IP}* ]];then
        IP_chk_flag=yes
        break
      fi
    done

    if [ ! "$IP_chk_flag" = "yes" ];then
      echo "error: your IP{$remote_addr} is not allowed to access"
      exit 1
    fi
  fi
fi

param=`date +%s`
param="$param:$RANDOM"
count=1

while [ -f ../tmp/${param} ]
do
 sleep 0.01
 count=`expr $count + 1`
 if [ $count -eq 100 ];then
   echo "error: please contact to adimin"
   exit 1
 fi
done

# parse QUERY STRING
echo $QUERY_STRING | php -r "echo urldecode(file_get_contents('php://stdin'));" | tr -d \$ | tr -d \` | sed "s/\&/\n/g" > ../tmp/${param}
cat ../tmp/${param} | sed -e "s/=/=\"/1" | sed "s/$/\"/g" | sed "s/^\"//g" | tr -d \$ | tr -d \` > ../tmp/${param}.load
chmod 755 ../tmp/${param}.load

# load query string
. ../tmp/${param}.load

# dump posted data
dummy_session="$param.post"
mkdir ../tmp/$dummy_session
dd bs=${CONTENT_LENGTH} of=../tmp/$dummy_session/input 2>/dev/null
../bin/parse.sh $dummy_session urlenc

# load posted data
ls ../tmp/$dummy_session/%%app_step_in_token >/dev/null 2>&1
if [ $? -eq 0 ];then
  app_step_in_token=`cat ../tmp/$dummy_session/%%app_step_in_token`
fi
rm -rf ../tmp/${param}*

# render login button if there is no step in log for audit matter
if [ ! "$app_step_in_token" ];then

  # regenerate  query string
  if [ "$req" ];then
    req="?req=`echo $req`"
  fi

  if [ "$id" ];then
    id="\&id=`echo $id`"
  fi

  if [ "$message" ];then
    message="<p><b>`echo $message`<\/b><\/p>"
  fi

  # render standard login form with queyr string and messge
  cat ../descriptor/%%app_auth_form.html.def | sed "s/^ *</</g"\
  | sed "/%%auth_form_menu/r ../descriptor/common_parts/%%app_auth_form_menu" \
  | sed "s/%%auth_form_menu//g"\
  | sed "/%%footer/r ../descriptor/common_parts/%%app_footer" \
  | sed "/%%footer/d"\
  | sed "s/%%message/${message}/g" \
  | sed "s/?%%params/${req}${id}/g"
  exit 0
fi


# Just check user name
if [ "$app_step_in_token" ];then
  # auth_req=`sudo -u small-shell ${small_shell_path}/bin/extension_auth app:%%app key_auth:${authkey} force_user:${%%app_user} remote_addr:${remote_addr}`
  auth_req=`sudo -u small-shell ${small_shell_path}/bin/extension_auth app:%%app key_auth:${authkey} remote_addr:${remote_addr}`
  session=`echo $auth_req | awk -F "," '{print $2}' | awk -F ":" '{print $2}'`
  pin=`echo $auth_req | awk -F "," '{print $3}' | awk -F ":" '{print $2}'`
   
  if [ "$session" -a "$pin" ];then
    if [ ! "$req" ];then
      req=main
    fi

    # redirect to APP if key auth is OK
    if [[ $req == *table ]];then
      echo "<meta http-equiv=\"refresh\" content=\"0; url=./%%app?session=$session&pin=$pin&req=$req\">"
    elif [[ $req == *get ]];then
      echo "<meta http-equiv=\"refresh\" content=\"0; url=./%%app?session=$session&pin=$pin&req=$req&id=$id\">"
    else
      echo "<meta http-equiv=\"refresh\" content=\"0; url=./%%app?session=$session&pin=$pin&req=$req\">"
    fi
  fi
fi

